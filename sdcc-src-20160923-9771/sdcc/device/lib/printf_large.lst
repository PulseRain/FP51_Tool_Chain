                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.3 #9771 (MSVC)
                                      4 ;--------------------------------------------------------
                                      5 	.module printf_large
                                      6 	.optsdcc -mmcs51 --model-large --xstack
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _strlen
                                     12 	.globl __print_format_PARM_4
                                     13 	.globl __print_format_PARM_3
                                     14 	.globl __print_format_PARM_2
                                     15 	.globl __print_format
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
      000000                         35 _output_float_sloc0_1_0:
      000000                         36 	.ds 4
      000004                         37 _output_float_sloc1_1_0:
      000004                         38 	.ds 4
      000008                         39 _output_float_sloc2_1_0:
      000008                         40 	.ds 4
      00000C                         41 __print_format_sloc0_1_0:
      00000C                         42 	.ds 1
      00000D                         43 __print_format_sloc1_1_0:
      00000D                         44 	.ds 1
      00000E                         45 __print_format_sloc2_1_0:
      00000E                         46 	.ds 1
      00000F                         47 __print_format_sloc3_1_0:
      00000F                         48 	.ds 1
      000010                         49 __print_format_sloc4_1_0:
      000010                         50 	.ds 1
      000011                         51 __print_format_sloc5_1_0:
      000011                         52 	.ds 2
                                     53 ;--------------------------------------------------------
                                     54 ; overlayable items in internal ram 
                                     55 ;--------------------------------------------------------
                                     56 	.area	OSEG    (OVR,DATA)
                                     57 ;--------------------------------------------------------
                                     58 ; indirectly addressable internal ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area ISEG    (DATA)
                                     61 ;--------------------------------------------------------
                                     62 ; absolute internal ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area IABS    (ABS,DATA)
                                     65 	.area IABS    (ABS,DATA)
                                     66 ;--------------------------------------------------------
                                     67 ; bit data
                                     68 ;--------------------------------------------------------
                                     69 	.area BSEG    (BIT)
                                     70 ;--------------------------------------------------------
                                     71 ; paged external ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area PSEG    (PAG,XDATA)
                                     74 ;--------------------------------------------------------
                                     75 ; external ram data
                                     76 ;--------------------------------------------------------
                                     77 	.area XSEG    (XDATA)
      000000                         78 _lower_case:
      000000                         79 	.ds 1
      000001                         80 _output_char:
      000001                         81 	.ds 2
      000003                         82 _p:
      000003                         83 	.ds 3
      000006                         84 _value:
      000006                         85 	.ds 5
      00000B                         86 _charsOutputted:
      00000B                         87 	.ds 2
      00000D                         88 __output_char_c_1_51:
      00000D                         89 	.ds 1
      00000E                         90 _output_digit_n_1_53:
      00000E                         91 	.ds 1
      00000F                         92 _output_2digits_b_1_56:
      00000F                         93 	.ds 1
      000010                         94 _calculate_digit_radix_1_58:
      000010                         95 	.ds 1
      000011                         96 _output_float_PARM_2:
      000011                         97 	.ds 1
      000012                         98 _output_float_PARM_3:
      000012                         99 	.ds 1
      000013                        100 _output_float_PARM_4:
      000013                        101 	.ds 1
      000014                        102 _output_float_PARM_5:
      000014                        103 	.ds 1
      000015                        104 _output_float_PARM_6:
      000015                        105 	.ds 1
      000016                        106 _output_float_PARM_7:
      000016                        107 	.ds 1
      000017                        108 _output_float_f_1_62:
      000017                        109 	.ds 4
      00001B                        110 _output_float_fpBuffer_1_63:
      00001B                        111 	.ds 128
      00009B                        112 _output_float_negative_1_63:
      00009B                        113 	.ds 1
      00009C                        114 _output_float_integerPart_1_63:
      00009C                        115 	.ds 4
      0000A0                        116 _output_float_rounding_1_63:
      0000A0                        117 	.ds 4
      0000A4                        118 _output_float_decimalPart_1_63:
      0000A4                        119 	.ds 4
      0000A8                        120 _output_float_fpBI_1_63:
      0000A8                        121 	.ds 1
      0000A9                        122 _output_float_minWidth_1_63:
      0000A9                        123 	.ds 1
      0000AA                        124 _output_float_exp_1_63:
      0000AA                        125 	.ds 1
      0000AB                        126 __print_format_PARM_2:
      0000AB                        127 	.ds 3
      0000AE                        128 __print_format_PARM_3:
      0000AE                        129 	.ds 3
      0000B1                        130 __print_format_PARM_4:
      0000B1                        131 	.ds 1
      0000B2                        132 __print_format_pfn_1_99:
      0000B2                        133 	.ds 2
      0000B4                        134 __print_format_left_justify_1_100:
      0000B4                        135 	.ds 1
      0000B5                        136 __print_format_zero_padding_1_100:
      0000B5                        137 	.ds 1
      0000B6                        138 __print_format_prefix_sign_1_100:
      0000B6                        139 	.ds 1
      0000B7                        140 __print_format_prefix_space_1_100:
      0000B7                        141 	.ds 1
      0000B8                        142 __print_format_signed_argument_1_100:
      0000B8                        143 	.ds 1
      0000B9                        144 __print_format_char_argument_1_100:
      0000B9                        145 	.ds 1
      0000BA                        146 __print_format_long_argument_1_100:
      0000BA                        147 	.ds 1
      0000BB                        148 __print_format_float_argument_1_100:
      0000BB                        149 	.ds 1
      0000BC                        150 __print_format_lsd_1_100:
      0000BC                        151 	.ds 1
      0000BD                        152 __print_format_radix_1_100:
      0000BD                        153 	.ds 1
      0000BE                        154 __print_format_width_1_100:
      0000BE                        155 	.ds 1
      0000BF                        156 __print_format_decimals_1_100:
      0000BF                        157 	.ds 1
      0000C0                        158 __print_format_length_1_100:
      0000C0                        159 	.ds 1
      0000C1                        160 __print_format_c_1_100:
      0000C1                        161 	.ds 1
      0000C2                        162 __print_format_store_4_120:
      0000C2                        163 	.ds 6
      0000C8                        164 __print_format_pstore_4_120:
      0000C8                        165 	.ds 2
                                    166 ;--------------------------------------------------------
                                    167 ; absolute external ram data
                                    168 ;--------------------------------------------------------
                                    169 	.area XABS    (ABS,XDATA)
                                    170 ;--------------------------------------------------------
                                    171 ; external initialized ram data
                                    172 ;--------------------------------------------------------
                                    173 	.area XISEG   (XDATA)
                                    174 	.area HOME    (CODE)
                                    175 	.area GSINIT0 (CODE)
                                    176 	.area GSINIT1 (CODE)
                                    177 	.area GSINIT2 (CODE)
                                    178 	.area GSINIT3 (CODE)
                                    179 	.area GSINIT4 (CODE)
                                    180 	.area GSINIT5 (CODE)
                                    181 	.area GSINIT  (CODE)
                                    182 	.area GSFINAL (CODE)
                                    183 	.area CSEG    (CODE)
                                    184 ;--------------------------------------------------------
                                    185 ; global & static initialisations
                                    186 ;--------------------------------------------------------
                                    187 	.area HOME    (CODE)
                                    188 	.area GSINIT  (CODE)
                                    189 	.area GSFINAL (CODE)
                                    190 	.area GSINIT  (CODE)
                                    191 ;--------------------------------------------------------
                                    192 ; Home
                                    193 ;--------------------------------------------------------
                                    194 	.area HOME    (CODE)
                                    195 	.area HOME    (CODE)
                                    196 ;--------------------------------------------------------
                                    197 ; code
                                    198 ;--------------------------------------------------------
                                    199 	.area CSEG    (CODE)
                                    200 ;------------------------------------------------------------
                                    201 ;Allocation info for local variables in function '_output_char'
                                    202 ;------------------------------------------------------------
                                    203 ;c                         Allocated with name '__output_char_c_1_51'
                                    204 ;------------------------------------------------------------
                                    205 ;	printf_large.c:105: _output_char (unsigned char c)
                                    206 ;	-----------------------------------------
                                    207 ;	 function _output_char
                                    208 ;	-----------------------------------------
      000000                        209 __output_char:
                           000007   210 	ar7 = 0x07
                           000006   211 	ar6 = 0x06
                           000005   212 	ar5 = 0x05
                           000004   213 	ar4 = 0x04
                           000003   214 	ar3 = 0x03
                           000002   215 	ar2 = 0x02
                           000001   216 	ar1 = 0x01
                           000000   217 	ar0 = 0x00
      000000 E5 82            [12]  218 	mov	a,dpl
      000002 90r00r0D         [24]  219 	mov	dptr,#__output_char_c_1_51
      000005 F0               [24]  220 	movx	@dptr,a
                                    221 ;	printf_large.c:107: output_char( c, p );
      000006 E0               [24]  222 	movx	a,@dptr
      000007 FF               [12]  223 	mov	r7,a
      000008 90r00r03         [24]  224 	mov	dptr,#_p
      00000B E5*00            [12]  225 	mov	a,_spx
      00000D F8               [12]  226 	mov	r0,a
      00000E 24 03            [12]  227 	add	a,#0x03
      000010 F5*00            [12]  228 	mov	_spx,a
      000012 E0               [24]  229 	movx	a,@dptr
      000013 F2               [24]  230 	movx	@r0,a
      000014 08               [12]  231 	inc	r0
      000015 A3               [24]  232 	inc	dptr
      000016 E0               [24]  233 	movx	a,@dptr
      000017 F2               [24]  234 	movx	@r0,a
      000018 08               [12]  235 	inc	r0
      000019 A3               [24]  236 	inc	dptr
      00001A E0               [24]  237 	movx	a,@dptr
      00001B F2               [24]  238 	movx	@r0,a
      00001C 08               [12]  239 	inc	r0
      00001D 12r00r22         [24]  240 	lcall	00103$
      000020 80 0D            [24]  241 	sjmp	00104$
      000022                        242 00103$:
      000022 90r00r01         [24]  243 	mov	dptr,#_output_char
      000025 E0               [24]  244 	movx	a,@dptr
      000026 C0 E0            [24]  245 	push	acc
      000028 A3               [24]  246 	inc	dptr
      000029 E0               [24]  247 	movx	a,@dptr
      00002A C0 E0            [24]  248 	push	acc
      00002C 8F 82            [24]  249 	mov	dpl,r7
      00002E 22               [24]  250 	ret
      00002F                        251 00104$:
      00002F 15*00            [12]  252 	dec	_spx
      000031 15*00            [12]  253 	dec	_spx
      000033 15*00            [12]  254 	dec	_spx
                                    255 ;	printf_large.c:108: charsOutputted++;
      000035 90r00r0B         [24]  256 	mov	dptr,#_charsOutputted
      000038 E0               [24]  257 	movx	a,@dptr
      000039 24 01            [12]  258 	add	a,#0x01
      00003B F0               [24]  259 	movx	@dptr,a
      00003C A3               [24]  260 	inc	dptr
      00003D E0               [24]  261 	movx	a,@dptr
      00003E 34 00            [12]  262 	addc	a,#0x00
      000040 F0               [24]  263 	movx	@dptr,a
      000041 22               [24]  264 	ret
                                    265 ;------------------------------------------------------------
                                    266 ;Allocation info for local variables in function 'output_digit'
                                    267 ;------------------------------------------------------------
                                    268 ;c                         Allocated to registers r7 
                                    269 ;n                         Allocated with name '_output_digit_n_1_53'
                                    270 ;------------------------------------------------------------
                                    271 ;	printf_large.c:130: output_digit (unsigned char n)
                                    272 ;	-----------------------------------------
                                    273 ;	 function output_digit
                                    274 ;	-----------------------------------------
      000042                        275 _output_digit:
      000042 E5 82            [12]  276 	mov	a,dpl
      000044 90r00r0E         [24]  277 	mov	dptr,#_output_digit_n_1_53
      000047 F0               [24]  278 	movx	@dptr,a
                                    279 ;	printf_large.c:132: register unsigned char c = n + (unsigned char)'0';
      000048 E0               [24]  280 	movx	a,@dptr
                                    281 ;	printf_large.c:134: if (c > (unsigned char)'9')
      000049 24 30            [12]  282 	add	a,#0x30
      00004B FF               [12]  283 	mov	r7,a
      00004C 24 C6            [12]  284 	add	a,#0xff - 0x39
      00004E 50 0E            [24]  285 	jnc	00104$
                                    286 ;	printf_large.c:136: c += (unsigned char)('A' - '0' - 10);
      000050 74 07            [12]  287 	mov	a,#0x07
      000052 2F               [12]  288 	add	a,r7
      000053 FF               [12]  289 	mov	r7,a
                                    290 ;	printf_large.c:137: if (lower_case)
      000054 90r00r00         [24]  291 	mov	dptr,#_lower_case
      000057 E0               [24]  292 	movx	a,@dptr
      000058 FE               [12]  293 	mov	r6,a
      000059 60 03            [24]  294 	jz	00104$
                                    295 ;	printf_large.c:138: c = tolower(c);
      00005B 43 07 20         [24]  296 	orl	ar7,#0x20
      00005E                        297 00104$:
                                    298 ;	printf_large.c:140: _output_char( c );
      00005E 8F 82            [24]  299 	mov	dpl,r7
      000060 02r00r00         [24]  300 	ljmp	__output_char
                                    301 ;------------------------------------------------------------
                                    302 ;Allocation info for local variables in function 'output_2digits'
                                    303 ;------------------------------------------------------------
                                    304 ;b                         Allocated with name '_output_2digits_b_1_56'
                                    305 ;------------------------------------------------------------
                                    306 ;	printf_large.c:157: output_2digits (unsigned char b)
                                    307 ;	-----------------------------------------
                                    308 ;	 function output_2digits
                                    309 ;	-----------------------------------------
      000063                        310 _output_2digits:
      000063 E5 82            [12]  311 	mov	a,dpl
      000065 90r00r0F         [24]  312 	mov	dptr,#_output_2digits_b_1_56
      000068 F0               [24]  313 	movx	@dptr,a
                                    314 ;	printf_large.c:159: output_digit( b>>4   );
      000069 E0               [24]  315 	movx	a,@dptr
      00006A FF               [12]  316 	mov	r7,a
      00006B C4               [12]  317 	swap	a
      00006C 54 0F            [12]  318 	anl	a,#0x0f
      00006E FE               [12]  319 	mov	r6,a
      00006F C0 00            [24]  320 	push	ar0
      000071 EF               [12]  321 	mov	a,r7
      000072 A8*00            [24]  322 	mov	r0,_spx
      000074 05*00            [12]  323 	inc	_spx
      000076 F2               [24]  324 	movx	@r0,a
      000077 D0 00            [24]  325 	pop	ar0
      000079 8E 82            [24]  326 	mov	dpl,r6
      00007B 12r00r42         [24]  327 	lcall	_output_digit
      00007E A8*00            [24]  328 	mov	r0,_spx
      000080 18               [12]  329 	dec	r0
      000081 E2               [24]  330 	movx	a,@r0
      000082 FF               [12]  331 	mov	r7,a
      000083 15*00            [12]  332 	dec	_spx
                                    333 ;	printf_large.c:160: output_digit( b&0x0F );
      000085 53 07 0F         [24]  334 	anl	ar7,#0x0f
      000088 8F 82            [24]  335 	mov	dpl,r7
      00008A 02r00r42         [24]  336 	ljmp	_output_digit
                                    337 ;------------------------------------------------------------
                                    338 ;Allocation info for local variables in function 'calculate_digit'
                                    339 ;------------------------------------------------------------
                                    340 ;radix                     Allocated with name '_calculate_digit_radix_1_58'
                                    341 ;ul                        Allocated to registers r4 r5 r6 r7 
                                    342 ;b4                        Allocated to registers r3 
                                    343 ;i                         Allocated to registers r2 
                                    344 ;------------------------------------------------------------
                                    345 ;	printf_large.c:189: calculate_digit (unsigned char radix)
                                    346 ;	-----------------------------------------
                                    347 ;	 function calculate_digit
                                    348 ;	-----------------------------------------
      00008D                        349 _calculate_digit:
      00008D E5 82            [12]  350 	mov	a,dpl
      00008F 90r00r10         [24]  351 	mov	dptr,#_calculate_digit_radix_1_58
      000092 F0               [24]  352 	movx	@dptr,a
                                    353 ;	printf_large.c:191: register unsigned long ul = value.ul;
      000093 90r00r06         [24]  354 	mov	dptr,#_value
      000096 E0               [24]  355 	movx	a,@dptr
      000097 FC               [12]  356 	mov	r4,a
      000098 A3               [24]  357 	inc	dptr
      000099 E0               [24]  358 	movx	a,@dptr
      00009A FD               [12]  359 	mov	r5,a
      00009B A3               [24]  360 	inc	dptr
      00009C E0               [24]  361 	movx	a,@dptr
      00009D FE               [12]  362 	mov	r6,a
      00009E A3               [24]  363 	inc	dptr
      00009F E0               [24]  364 	movx	a,@dptr
      0000A0 FF               [12]  365 	mov	r7,a
                                    366 ;	printf_large.c:192: register unsigned char b4 = value.byte[4];
      0000A1 90r00r0A         [24]  367 	mov	dptr,#(_value + 0x0004)
      0000A4 E0               [24]  368 	movx	a,@dptr
      0000A5 FB               [12]  369 	mov	r3,a
                                    370 ;	printf_large.c:193: register unsigned char i = 32;
      0000A6 7A 20            [12]  371 	mov	r2,#0x20
                                    372 ;	printf_large.c:195: do
      0000A8 90r00r10         [24]  373 	mov	dptr,#_calculate_digit_radix_1_58
      0000AB E0               [24]  374 	movx	a,@dptr
      0000AC F9               [12]  375 	mov	r1,a
      0000AD                        376 00103$:
                                    377 ;	printf_large.c:197: b4 = (b4 << 1);
      0000AD EB               [12]  378 	mov	a,r3
      0000AE 2B               [12]  379 	add	a,r3
      0000AF FB               [12]  380 	mov	r3,a
                                    381 ;	printf_large.c:198: b4 |= (ul >> 31) & 0x01;
      0000B0 EF               [12]  382 	mov	a,r7
      0000B1 23               [12]  383 	rl	a
      0000B2 54 01            [12]  384 	anl	a,#0x01
      0000B4 F8               [12]  385 	mov	r0,a
      0000B5 42 03            [12]  386 	orl	ar3,a
                                    387 ;	printf_large.c:199: ul <<= 1;
      0000B7 EC               [12]  388 	mov	a,r4
      0000B8 2C               [12]  389 	add	a,r4
      0000B9 FC               [12]  390 	mov	r4,a
      0000BA ED               [12]  391 	mov	a,r5
      0000BB 33               [12]  392 	rlc	a
      0000BC FD               [12]  393 	mov	r5,a
      0000BD EE               [12]  394 	mov	a,r6
      0000BE 33               [12]  395 	rlc	a
      0000BF FE               [12]  396 	mov	r6,a
      0000C0 EF               [12]  397 	mov	a,r7
      0000C1 33               [12]  398 	rlc	a
      0000C2 FF               [12]  399 	mov	r7,a
                                    400 ;	printf_large.c:201: if (radix <= b4 )
      0000C3 C3               [12]  401 	clr	c
      0000C4 EB               [12]  402 	mov	a,r3
      0000C5 99               [12]  403 	subb	a,r1
      0000C6 40 07            [24]  404 	jc	00104$
                                    405 ;	printf_large.c:203: b4 -= radix;
      0000C8 EB               [12]  406 	mov	a,r3
      0000C9 C3               [12]  407 	clr	c
      0000CA 99               [12]  408 	subb	a,r1
      0000CB FB               [12]  409 	mov	r3,a
                                    410 ;	printf_large.c:204: ul |= 1;
      0000CC 43 04 01         [24]  411 	orl	ar4,#0x01
      0000CF                        412 00104$:
                                    413 ;	printf_large.c:206: } while (--i);
      0000CF EA               [12]  414 	mov	a,r2
      0000D0 14               [12]  415 	dec	a
      0000D1 F8               [12]  416 	mov	r0,a
      0000D2 FA               [12]  417 	mov	r2,a
      0000D3 70 D8            [24]  418 	jnz	00103$
                                    419 ;	printf_large.c:207: value.ul = ul;
      0000D5 90r00r06         [24]  420 	mov	dptr,#_value
      0000D8 EC               [12]  421 	mov	a,r4
      0000D9 F0               [24]  422 	movx	@dptr,a
      0000DA ED               [12]  423 	mov	a,r5
      0000DB A3               [24]  424 	inc	dptr
      0000DC F0               [24]  425 	movx	@dptr,a
      0000DD EE               [12]  426 	mov	a,r6
      0000DE A3               [24]  427 	inc	dptr
      0000DF F0               [24]  428 	movx	@dptr,a
      0000E0 EF               [12]  429 	mov	a,r7
      0000E1 A3               [24]  430 	inc	dptr
      0000E2 F0               [24]  431 	movx	@dptr,a
                                    432 ;	printf_large.c:208: value.byte[4] = b4;
      0000E3 90r00r0A         [24]  433 	mov	dptr,#(_value + 0x0004)
      0000E6 EB               [12]  434 	mov	a,r3
      0000E7 F0               [24]  435 	movx	@dptr,a
      0000E8 22               [24]  436 	ret
                                    437 ;------------------------------------------------------------
                                    438 ;Allocation info for local variables in function 'output_float'
                                    439 ;------------------------------------------------------------
                                    440 ;sloc0                     Allocated with name '_output_float_sloc0_1_0'
                                    441 ;sloc1                     Allocated with name '_output_float_sloc1_1_0'
                                    442 ;sloc2                     Allocated with name '_output_float_sloc2_1_0'
                                    443 ;reqWidth                  Allocated with name '_output_float_PARM_2'
                                    444 ;reqDecimals               Allocated with name '_output_float_PARM_3'
                                    445 ;left                      Allocated with name '_output_float_PARM_4'
                                    446 ;zero                      Allocated with name '_output_float_PARM_5'
                                    447 ;sign                      Allocated with name '_output_float_PARM_6'
                                    448 ;space                     Allocated with name '_output_float_PARM_7'
                                    449 ;f                         Allocated with name '_output_float_f_1_62'
                                    450 ;fpBuffer                  Allocated with name '_output_float_fpBuffer_1_63'
                                    451 ;negative                  Allocated with name '_output_float_negative_1_63'
                                    452 ;integerPart               Allocated with name '_output_float_integerPart_1_63'
                                    453 ;rounding                  Allocated with name '_output_float_rounding_1_63'
                                    454 ;decimalPart               Allocated with name '_output_float_decimalPart_1_63'
                                    455 ;fpBI                      Allocated with name '_output_float_fpBI_1_63'
                                    456 ;fpBD                      Allocated with name '_output_float_fpBD_1_63'
                                    457 ;minWidth                  Allocated with name '_output_float_minWidth_1_63'
                                    458 ;i                         Allocated with name '_output_float_i_1_63'
                                    459 ;exp                       Allocated with name '_output_float_exp_1_63'
                                    460 ;------------------------------------------------------------
                                    461 ;	printf_large.c:241: output_float (float f, unsigned char reqWidth,
                                    462 ;	-----------------------------------------
                                    463 ;	 function output_float
                                    464 ;	-----------------------------------------
      0000E9                        465 _output_float:
      0000E9 AF 82            [24]  466 	mov	r7,dpl
      0000EB AE 83            [24]  467 	mov	r6,dph
      0000ED AD F0            [24]  468 	mov	r5,b
      0000EF FC               [12]  469 	mov	r4,a
      0000F0 90r00r17         [24]  470 	mov	dptr,#_output_float_f_1_62
      0000F3 EF               [12]  471 	mov	a,r7
      0000F4 F0               [24]  472 	movx	@dptr,a
      0000F5 EE               [12]  473 	mov	a,r6
      0000F6 A3               [24]  474 	inc	dptr
      0000F7 F0               [24]  475 	movx	@dptr,a
      0000F8 ED               [12]  476 	mov	a,r5
      0000F9 A3               [24]  477 	inc	dptr
      0000FA F0               [24]  478 	movx	@dptr,a
      0000FB EC               [12]  479 	mov	a,r4
      0000FC A3               [24]  480 	inc	dptr
      0000FD F0               [24]  481 	movx	@dptr,a
                                    482 ;	printf_large.c:247: bool negative = 0;
      0000FE 90r00r9B         [24]  483 	mov	dptr,#_output_float_negative_1_63
      000101 E4               [12]  484 	clr	a
      000102 F0               [24]  485 	movx	@dptr,a
                                    486 ;	printf_large.c:253: signed char exp = -128;
      000103 90r00rAA         [24]  487 	mov	dptr,#_output_float_exp_1_63
      000106 74 80            [12]  488 	mov	a,#0x80
      000108 F0               [24]  489 	movx	@dptr,a
                                    490 ;	printf_large.c:256: if (f<0)
      000109 90r00r17         [24]  491 	mov	dptr,#_output_float_f_1_62
      00010C E0               [24]  492 	movx	a,@dptr
      00010D FC               [12]  493 	mov	r4,a
      00010E A3               [24]  494 	inc	dptr
      00010F E0               [24]  495 	movx	a,@dptr
      000110 FD               [12]  496 	mov	r5,a
      000111 A3               [24]  497 	inc	dptr
      000112 E0               [24]  498 	movx	a,@dptr
      000113 FE               [12]  499 	mov	r6,a
      000114 A3               [24]  500 	inc	dptr
      000115 E0               [24]  501 	movx	a,@dptr
      000116 FF               [12]  502 	mov	r7,a
      000117 90r00r00         [24]  503 	mov	dptr,#___fslt_PARM_2
      00011A E4               [12]  504 	clr	a
      00011B F0               [24]  505 	movx	@dptr,a
      00011C A3               [24]  506 	inc	dptr
      00011D F0               [24]  507 	movx	@dptr,a
      00011E A3               [24]  508 	inc	dptr
      00011F F0               [24]  509 	movx	@dptr,a
      000120 A3               [24]  510 	inc	dptr
      000121 F0               [24]  511 	movx	@dptr,a
      000122 C0 00            [24]  512 	push	ar0
      000124 E5*00            [12]  513 	mov	a,_spx
      000126 F8               [12]  514 	mov	r0,a
      000127 24 04            [12]  515 	add	a,#0x04
      000129 F5*00            [12]  516 	mov	_spx,a
      00012B EF               [12]  517 	mov	a,r7
      00012C F2               [24]  518 	movx	@r0,a
      00012D 08               [12]  519 	inc	r0
      00012E EE               [12]  520 	mov	a,r6
      00012F F2               [24]  521 	movx	@r0,a
      000130 08               [12]  522 	inc	r0
      000131 ED               [12]  523 	mov	a,r5
      000132 F2               [24]  524 	movx	@r0,a
      000133 08               [12]  525 	inc	r0
      000134 EC               [12]  526 	mov	a,r4
      000135 F2               [24]  527 	movx	@r0,a
      000136 D0 00            [24]  528 	pop	ar0
      000138 8C 82            [24]  529 	mov	dpl,r4
      00013A 8D 83            [24]  530 	mov	dph,r5
      00013C 8E F0            [24]  531 	mov	b,r6
      00013E EF               [12]  532 	mov	a,r7
      00013F 12r00r00         [24]  533 	lcall	___fslt
      000142 E5 82            [12]  534 	mov	a,dpl
      000144 C0 E0            [24]  535 	push	acc
      000146 A8*00            [24]  536 	mov	r0,_spx
      000148 18               [12]  537 	dec	r0
      000149 E2               [24]  538 	movx	a,@r0
      00014A FC               [12]  539 	mov	r4,a
      00014B 18               [12]  540 	dec	r0
      00014C E2               [24]  541 	movx	a,@r0
      00014D FD               [12]  542 	mov	r5,a
      00014E 18               [12]  543 	dec	r0
      00014F E2               [24]  544 	movx	a,@r0
      000150 FE               [12]  545 	mov	r6,a
      000151 18               [12]  546 	dec	r0
      000152 E2               [24]  547 	movx	a,@r0
      000153 FF               [12]  548 	mov	r7,a
      000154 88*00            [24]  549 	mov	_spx,r0
      000156 D0 E0            [24]  550 	pop	acc
      000158 60 16            [24]  551 	jz	00102$
                                    552 ;	printf_large.c:258: negative=1;
      00015A 90r00r9B         [24]  553 	mov	dptr,#_output_float_negative_1_63
      00015D 74 01            [12]  554 	mov	a,#0x01
      00015F F0               [24]  555 	movx	@dptr,a
                                    556 ;	printf_large.c:259: f=-f;
      000160 90r00r17         [24]  557 	mov	dptr,#_output_float_f_1_62
      000163 EC               [12]  558 	mov	a,r4
      000164 F0               [24]  559 	movx	@dptr,a
      000165 ED               [12]  560 	mov	a,r5
      000166 A3               [24]  561 	inc	dptr
      000167 F0               [24]  562 	movx	@dptr,a
      000168 EE               [12]  563 	mov	a,r6
      000169 A3               [24]  564 	inc	dptr
      00016A F0               [24]  565 	movx	@dptr,a
      00016B EF               [12]  566 	mov	a,r7
      00016C B2 E7            [12]  567 	cpl	acc.7
      00016E A3               [24]  568 	inc	dptr
      00016F F0               [24]  569 	movx	@dptr,a
      000170                        570 00102$:
                                    571 ;	printf_large.c:262: if (f>0x00ffffff)
      000170 90r00r17         [24]  572 	mov	dptr,#_output_float_f_1_62
      000173 E0               [24]  573 	movx	a,@dptr
      000174 FC               [12]  574 	mov	r4,a
      000175 A3               [24]  575 	inc	dptr
      000176 E0               [24]  576 	movx	a,@dptr
      000177 FD               [12]  577 	mov	r5,a
      000178 A3               [24]  578 	inc	dptr
      000179 E0               [24]  579 	movx	a,@dptr
      00017A FE               [12]  580 	mov	r6,a
      00017B A3               [24]  581 	inc	dptr
      00017C E0               [24]  582 	movx	a,@dptr
      00017D FF               [12]  583 	mov	r7,a
      00017E 90r00r00         [24]  584 	mov	dptr,#___fsgt_PARM_2
      000181 74 FF            [12]  585 	mov	a,#0xff
      000183 F0               [24]  586 	movx	@dptr,a
      000184 A3               [24]  587 	inc	dptr
      000185 F0               [24]  588 	movx	@dptr,a
      000186 74 7F            [12]  589 	mov	a,#0x7f
      000188 A3               [24]  590 	inc	dptr
      000189 F0               [24]  591 	movx	@dptr,a
      00018A 74 4B            [12]  592 	mov	a,#0x4b
      00018C A3               [24]  593 	inc	dptr
      00018D F0               [24]  594 	movx	@dptr,a
      00018E C0 00            [24]  595 	push	ar0
      000190 E5*00            [12]  596 	mov	a,_spx
      000192 F8               [12]  597 	mov	r0,a
      000193 24 04            [12]  598 	add	a,#0x04
      000195 F5*00            [12]  599 	mov	_spx,a
      000197 EF               [12]  600 	mov	a,r7
      000198 F2               [24]  601 	movx	@r0,a
      000199 08               [12]  602 	inc	r0
      00019A EE               [12]  603 	mov	a,r6
      00019B F2               [24]  604 	movx	@r0,a
      00019C 08               [12]  605 	inc	r0
      00019D ED               [12]  606 	mov	a,r5
      00019E F2               [24]  607 	movx	@r0,a
      00019F 08               [12]  608 	inc	r0
      0001A0 EC               [12]  609 	mov	a,r4
      0001A1 F2               [24]  610 	movx	@r0,a
      0001A2 D0 00            [24]  611 	pop	ar0
      0001A4 8C 82            [24]  612 	mov	dpl,r4
      0001A6 8D 83            [24]  613 	mov	dph,r5
      0001A8 8E F0            [24]  614 	mov	b,r6
      0001AA EF               [12]  615 	mov	a,r7
      0001AB 12r00r00         [24]  616 	lcall	___fsgt
      0001AE E5 82            [12]  617 	mov	a,dpl
      0001B0 C0 E0            [24]  618 	push	acc
      0001B2 A8*00            [24]  619 	mov	r0,_spx
      0001B4 18               [12]  620 	dec	r0
      0001B5 E2               [24]  621 	movx	a,@r0
      0001B6 FC               [12]  622 	mov	r4,a
      0001B7 18               [12]  623 	dec	r0
      0001B8 E2               [24]  624 	movx	a,@r0
      0001B9 FD               [12]  625 	mov	r5,a
      0001BA 18               [12]  626 	dec	r0
      0001BB E2               [24]  627 	movx	a,@r0
      0001BC FE               [12]  628 	mov	r6,a
      0001BD 18               [12]  629 	dec	r0
      0001BE E2               [24]  630 	movx	a,@r0
      0001BF FF               [12]  631 	mov	r7,a
      0001C0 88*00            [24]  632 	mov	_spx,r0
      0001C2 D0 E0            [24]  633 	pop	acc
      0001C4 70 03            [24]  634 	jnz	00348$
      0001C6 02r03rE5         [24]  635 	ljmp	00111$
      0001C9                        636 00348$:
                                    637 ;	printf_large.c:266: for (exp = 0; f >= 10.0; exp++) f /=10.0;
      0001C9 7B 00            [12]  638 	mov	r3,#0x00
      0001CB                        639 00181$:
      0001CB 90r00r17         [24]  640 	mov	dptr,#_output_float_f_1_62
      0001CE E0               [24]  641 	movx	a,@dptr
      0001CF F5*00            [12]  642 	mov	_output_float_sloc0_1_0,a
      0001D1 A3               [24]  643 	inc	dptr
      0001D2 E0               [24]  644 	movx	a,@dptr
      0001D3 F5*01            [12]  645 	mov	(_output_float_sloc0_1_0 + 1),a
      0001D5 A3               [24]  646 	inc	dptr
      0001D6 E0               [24]  647 	movx	a,@dptr
      0001D7 F5*02            [12]  648 	mov	(_output_float_sloc0_1_0 + 2),a
      0001D9 A3               [24]  649 	inc	dptr
      0001DA E0               [24]  650 	movx	a,@dptr
      0001DB F5*03            [12]  651 	mov	(_output_float_sloc0_1_0 + 3),a
      0001DD 90r00r00         [24]  652 	mov	dptr,#___fslt_PARM_2
      0001E0 E4               [12]  653 	clr	a
      0001E1 F0               [24]  654 	movx	@dptr,a
      0001E2 A3               [24]  655 	inc	dptr
      0001E3 F0               [24]  656 	movx	@dptr,a
      0001E4 74 20            [12]  657 	mov	a,#0x20
      0001E6 A3               [24]  658 	inc	dptr
      0001E7 F0               [24]  659 	movx	@dptr,a
      0001E8 74 41            [12]  660 	mov	a,#0x41
      0001EA A3               [24]  661 	inc	dptr
      0001EB F0               [24]  662 	movx	@dptr,a
      0001EC C0 00            [24]  663 	push	ar0
      0001EE E5*00            [12]  664 	mov	a,_spx
      0001F0 F8               [12]  665 	mov	r0,a
      0001F1 24 05            [12]  666 	add	a,#0x05
      0001F3 F5*00            [12]  667 	mov	_spx,a
      0001F5 EF               [12]  668 	mov	a,r7
      0001F6 F2               [24]  669 	movx	@r0,a
      0001F7 08               [12]  670 	inc	r0
      0001F8 EE               [12]  671 	mov	a,r6
      0001F9 F2               [24]  672 	movx	@r0,a
      0001FA 08               [12]  673 	inc	r0
      0001FB ED               [12]  674 	mov	a,r5
      0001FC F2               [24]  675 	movx	@r0,a
      0001FD 08               [12]  676 	inc	r0
      0001FE EC               [12]  677 	mov	a,r4
      0001FF F2               [24]  678 	movx	@r0,a
      000200 08               [12]  679 	inc	r0
      000201 EB               [12]  680 	mov	a,r3
      000202 F2               [24]  681 	movx	@r0,a
      000203 D0 00            [24]  682 	pop	ar0
      000205 85*00 82         [24]  683 	mov	dpl,_output_float_sloc0_1_0
      000208 85*01 83         [24]  684 	mov	dph,(_output_float_sloc0_1_0 + 1)
      00020B 85*02 F0         [24]  685 	mov	b,(_output_float_sloc0_1_0 + 2)
      00020E E5*03            [12]  686 	mov	a,(_output_float_sloc0_1_0 + 3)
      000210 12r00r00         [24]  687 	lcall	___fslt
      000213 A8*00            [24]  688 	mov	r0,_spx
      000215 18               [12]  689 	dec	r0
      000216 E2               [24]  690 	movx	a,@r0
      000217 FB               [12]  691 	mov	r3,a
      000218 18               [12]  692 	dec	r0
      000219 E2               [24]  693 	movx	a,@r0
      00021A FC               [12]  694 	mov	r4,a
      00021B 18               [12]  695 	dec	r0
      00021C E2               [24]  696 	movx	a,@r0
      00021D FD               [12]  697 	mov	r5,a
      00021E 18               [12]  698 	dec	r0
      00021F E2               [24]  699 	movx	a,@r0
      000220 FE               [12]  700 	mov	r6,a
      000221 18               [12]  701 	dec	r0
      000222 E2               [24]  702 	movx	a,@r0
      000223 FF               [12]  703 	mov	r7,a
      000224 88*00            [24]  704 	mov	_spx,r0
      000226 40 6D            [24]  705 	jc	00205$
      000228 C0 04            [24]  706 	push	ar4
      00022A C0 05            [24]  707 	push	ar5
      00022C C0 06            [24]  708 	push	ar6
      00022E C0 07            [24]  709 	push	ar7
      000230 90r00r00         [24]  710 	mov	dptr,#___fsdiv_PARM_2
      000233 E4               [12]  711 	clr	a
      000234 F0               [24]  712 	movx	@dptr,a
      000235 A3               [24]  713 	inc	dptr
      000236 F0               [24]  714 	movx	@dptr,a
      000237 74 20            [12]  715 	mov	a,#0x20
      000239 A3               [24]  716 	inc	dptr
      00023A F0               [24]  717 	movx	@dptr,a
      00023B 74 41            [12]  718 	mov	a,#0x41
      00023D A3               [24]  719 	inc	dptr
      00023E F0               [24]  720 	movx	@dptr,a
      00023F C0 00            [24]  721 	push	ar0
      000241 E5*00            [12]  722 	mov	a,_spx
      000243 F8               [12]  723 	mov	r0,a
      000244 24 04            [12]  724 	add	a,#0x04
      000246 F5*00            [12]  725 	mov	_spx,a
      000248 EE               [12]  726 	mov	a,r6
      000249 F2               [24]  727 	movx	@r0,a
      00024A 08               [12]  728 	inc	r0
      00024B ED               [12]  729 	mov	a,r5
      00024C F2               [24]  730 	movx	@r0,a
      00024D 08               [12]  731 	inc	r0
      00024E EC               [12]  732 	mov	a,r4
      00024F F2               [24]  733 	movx	@r0,a
      000250 08               [12]  734 	inc	r0
      000251 EB               [12]  735 	mov	a,r3
      000252 F2               [24]  736 	movx	@r0,a
      000253 D0 00            [24]  737 	pop	ar0
      000255 85*00 82         [24]  738 	mov	dpl,_output_float_sloc0_1_0
      000258 85*01 83         [24]  739 	mov	dph,(_output_float_sloc0_1_0 + 1)
      00025B 85*02 F0         [24]  740 	mov	b,(_output_float_sloc0_1_0 + 2)
      00025E E5*03            [12]  741 	mov	a,(_output_float_sloc0_1_0 + 3)
      000260 12r00r00         [24]  742 	lcall	___fsdiv
      000263 A8 82            [24]  743 	mov	r0,dpl
      000265 A9 83            [24]  744 	mov	r1,dph
      000267 AA F0            [24]  745 	mov	r2,b
      000269 FF               [12]  746 	mov	r7,a
      00026A C0 00            [24]  747 	push	ar0
      00026C A8*00            [24]  748 	mov	r0,_spx
      00026E 18               [12]  749 	dec	r0
      00026F E2               [24]  750 	movx	a,@r0
      000270 FB               [12]  751 	mov	r3,a
      000271 18               [12]  752 	dec	r0
      000272 E2               [24]  753 	movx	a,@r0
      000273 18               [12]  754 	dec	r0
      000274 E2               [24]  755 	movx	a,@r0
      000275 18               [12]  756 	dec	r0
      000276 E2               [24]  757 	movx	a,@r0
      000277 88*00            [24]  758 	mov	_spx,r0
      000279 D0 00            [24]  759 	pop	ar0
      00027B 90r00r17         [24]  760 	mov	dptr,#_output_float_f_1_62
      00027E E8               [12]  761 	mov	a,r0
      00027F F0               [24]  762 	movx	@dptr,a
      000280 E9               [12]  763 	mov	a,r1
      000281 A3               [24]  764 	inc	dptr
      000282 F0               [24]  765 	movx	@dptr,a
      000283 EA               [12]  766 	mov	a,r2
      000284 A3               [24]  767 	inc	dptr
      000285 F0               [24]  768 	movx	@dptr,a
      000286 EF               [12]  769 	mov	a,r7
      000287 A3               [24]  770 	inc	dptr
      000288 F0               [24]  771 	movx	@dptr,a
      000289 0B               [12]  772 	inc	r3
      00028A D0 07            [24]  773 	pop	ar7
      00028C D0 06            [24]  774 	pop	ar6
      00028E D0 05            [24]  775 	pop	ar5
      000290 D0 04            [24]  776 	pop	ar4
      000292 02r01rCB         [24]  777 	ljmp	00181$
      000295                        778 00205$:
      000295                        779 00184$:
                                    780 ;	printf_large.c:267: for (       ; f < 1.0;   exp--) f *=10.0;
      000295 90r00r17         [24]  781 	mov	dptr,#_output_float_f_1_62
      000298 E0               [24]  782 	movx	a,@dptr
      000299 F5*00            [12]  783 	mov	_output_float_sloc0_1_0,a
      00029B A3               [24]  784 	inc	dptr
      00029C E0               [24]  785 	movx	a,@dptr
      00029D F5*01            [12]  786 	mov	(_output_float_sloc0_1_0 + 1),a
      00029F A3               [24]  787 	inc	dptr
      0002A0 E0               [24]  788 	movx	a,@dptr
      0002A1 F5*02            [12]  789 	mov	(_output_float_sloc0_1_0 + 2),a
      0002A3 A3               [24]  790 	inc	dptr
      0002A4 E0               [24]  791 	movx	a,@dptr
      0002A5 F5*03            [12]  792 	mov	(_output_float_sloc0_1_0 + 3),a
      0002A7 90r00r00         [24]  793 	mov	dptr,#___fslt_PARM_2
      0002AA E4               [12]  794 	clr	a
      0002AB F0               [24]  795 	movx	@dptr,a
      0002AC A3               [24]  796 	inc	dptr
      0002AD F0               [24]  797 	movx	@dptr,a
      0002AE 74 80            [12]  798 	mov	a,#0x80
      0002B0 A3               [24]  799 	inc	dptr
      0002B1 F0               [24]  800 	movx	@dptr,a
      0002B2 74 3F            [12]  801 	mov	a,#0x3f
      0002B4 A3               [24]  802 	inc	dptr
      0002B5 F0               [24]  803 	movx	@dptr,a
      0002B6 C0 00            [24]  804 	push	ar0
      0002B8 E5*00            [12]  805 	mov	a,_spx
      0002BA F8               [12]  806 	mov	r0,a
      0002BB 24 05            [12]  807 	add	a,#0x05
      0002BD F5*00            [12]  808 	mov	_spx,a
      0002BF EF               [12]  809 	mov	a,r7
      0002C0 F2               [24]  810 	movx	@r0,a
      0002C1 08               [12]  811 	inc	r0
      0002C2 EE               [12]  812 	mov	a,r6
      0002C3 F2               [24]  813 	movx	@r0,a
      0002C4 08               [12]  814 	inc	r0
      0002C5 ED               [12]  815 	mov	a,r5
      0002C6 F2               [24]  816 	movx	@r0,a
      0002C7 08               [12]  817 	inc	r0
      0002C8 EC               [12]  818 	mov	a,r4
      0002C9 F2               [24]  819 	movx	@r0,a
      0002CA 08               [12]  820 	inc	r0
      0002CB EB               [12]  821 	mov	a,r3
      0002CC F2               [24]  822 	movx	@r0,a
      0002CD D0 00            [24]  823 	pop	ar0
      0002CF 85*00 82         [24]  824 	mov	dpl,_output_float_sloc0_1_0
      0002D2 85*01 83         [24]  825 	mov	dph,(_output_float_sloc0_1_0 + 1)
      0002D5 85*02 F0         [24]  826 	mov	b,(_output_float_sloc0_1_0 + 2)
      0002D8 E5*03            [12]  827 	mov	a,(_output_float_sloc0_1_0 + 3)
      0002DA 12r00r00         [24]  828 	lcall	___fslt
      0002DD E5 82            [12]  829 	mov	a,dpl
      0002DF C0 E0            [24]  830 	push	acc
      0002E1 A8*00            [24]  831 	mov	r0,_spx
      0002E3 18               [12]  832 	dec	r0
      0002E4 E2               [24]  833 	movx	a,@r0
      0002E5 FB               [12]  834 	mov	r3,a
      0002E6 18               [12]  835 	dec	r0
      0002E7 E2               [24]  836 	movx	a,@r0
      0002E8 FC               [12]  837 	mov	r4,a
      0002E9 18               [12]  838 	dec	r0
      0002EA E2               [24]  839 	movx	a,@r0
      0002EB FD               [12]  840 	mov	r5,a
      0002EC 18               [12]  841 	dec	r0
      0002ED E2               [24]  842 	movx	a,@r0
      0002EE FE               [12]  843 	mov	r6,a
      0002EF 18               [12]  844 	dec	r0
      0002F0 E2               [24]  845 	movx	a,@r0
      0002F1 FF               [12]  846 	mov	r7,a
      0002F2 88*00            [24]  847 	mov	_spx,r0
      0002F4 D0 E0            [24]  848 	pop	acc
      0002F6 60 6D            [24]  849 	jz	00246$
      0002F8 C0 04            [24]  850 	push	ar4
      0002FA C0 05            [24]  851 	push	ar5
      0002FC C0 06            [24]  852 	push	ar6
      0002FE C0 07            [24]  853 	push	ar7
      000300 90r00r00         [24]  854 	mov	dptr,#___fsmul_PARM_2
      000303 E5*00            [12]  855 	mov	a,_output_float_sloc0_1_0
      000305 F0               [24]  856 	movx	@dptr,a
      000306 E5*01            [12]  857 	mov	a,(_output_float_sloc0_1_0 + 1)
      000308 A3               [24]  858 	inc	dptr
      000309 F0               [24]  859 	movx	@dptr,a
      00030A E5*02            [12]  860 	mov	a,(_output_float_sloc0_1_0 + 2)
      00030C A3               [24]  861 	inc	dptr
      00030D F0               [24]  862 	movx	@dptr,a
      00030E E5*03            [12]  863 	mov	a,(_output_float_sloc0_1_0 + 3)
      000310 A3               [24]  864 	inc	dptr
      000311 F0               [24]  865 	movx	@dptr,a
      000312 C0 00            [24]  866 	push	ar0
      000314 E5*00            [12]  867 	mov	a,_spx
      000316 F8               [12]  868 	mov	r0,a
      000317 24 04            [12]  869 	add	a,#0x04
      000319 F5*00            [12]  870 	mov	_spx,a
      00031B EE               [12]  871 	mov	a,r6
      00031C F2               [24]  872 	movx	@r0,a
      00031D 08               [12]  873 	inc	r0
      00031E ED               [12]  874 	mov	a,r5
      00031F F2               [24]  875 	movx	@r0,a
      000320 08               [12]  876 	inc	r0
      000321 EC               [12]  877 	mov	a,r4
      000322 F2               [24]  878 	movx	@r0,a
      000323 08               [12]  879 	inc	r0
      000324 EB               [12]  880 	mov	a,r3
      000325 F2               [24]  881 	movx	@r0,a
      000326 D0 00            [24]  882 	pop	ar0
      000328 90 00 00         [24]  883 	mov	dptr,#0x0000
      00032B 75 F0 20         [24]  884 	mov	b,#0x20
      00032E 74 41            [12]  885 	mov	a,#0x41
      000330 12r00r00         [24]  886 	lcall	___fsmul
      000333 A8 82            [24]  887 	mov	r0,dpl
      000335 A9 83            [24]  888 	mov	r1,dph
      000337 AA F0            [24]  889 	mov	r2,b
      000339 FF               [12]  890 	mov	r7,a
      00033A C0 00            [24]  891 	push	ar0
      00033C A8*00            [24]  892 	mov	r0,_spx
      00033E 18               [12]  893 	dec	r0
      00033F E2               [24]  894 	movx	a,@r0
      000340 FB               [12]  895 	mov	r3,a
      000341 18               [12]  896 	dec	r0
      000342 E2               [24]  897 	movx	a,@r0
      000343 18               [12]  898 	dec	r0
      000344 E2               [24]  899 	movx	a,@r0
      000345 18               [12]  900 	dec	r0
      000346 E2               [24]  901 	movx	a,@r0
      000347 88*00            [24]  902 	mov	_spx,r0
      000349 D0 00            [24]  903 	pop	ar0
      00034B 90r00r17         [24]  904 	mov	dptr,#_output_float_f_1_62
      00034E E8               [12]  905 	mov	a,r0
      00034F F0               [24]  906 	movx	@dptr,a
      000350 E9               [12]  907 	mov	a,r1
      000351 A3               [24]  908 	inc	dptr
      000352 F0               [24]  909 	movx	@dptr,a
      000353 EA               [12]  910 	mov	a,r2
      000354 A3               [24]  911 	inc	dptr
      000355 F0               [24]  912 	movx	@dptr,a
      000356 EF               [12]  913 	mov	a,r7
      000357 A3               [24]  914 	inc	dptr
      000358 F0               [24]  915 	movx	@dptr,a
      000359 1B               [12]  916 	dec	r3
      00035A D0 07            [24]  917 	pop	ar7
      00035C D0 06            [24]  918 	pop	ar6
      00035E D0 05            [24]  919 	pop	ar5
      000360 D0 04            [24]  920 	pop	ar4
      000362 02r02r95         [24]  921 	ljmp	00184$
      000365                        922 00246$:
      000365 90r00rAA         [24]  923 	mov	dptr,#_output_float_exp_1_63
      000368 EB               [12]  924 	mov	a,r3
      000369 F0               [24]  925 	movx	@dptr,a
                                    926 ;	printf_large.c:269: if (negative)
      00036A 90r00r9B         [24]  927 	mov	dptr,#_output_float_negative_1_63
      00036D E0               [24]  928 	movx	a,@dptr
      00036E 60 2E            [24]  929 	jz	00108$
                                    930 ;	printf_large.c:271: OUTPUT_CHAR ('-', p);
      000370 C0 00            [24]  931 	push	ar0
      000372 E5*00            [12]  932 	mov	a,_spx
      000374 F8               [12]  933 	mov	r0,a
      000375 24 04            [12]  934 	add	a,#0x04
      000377 F5*00            [12]  935 	mov	_spx,a
      000379 EF               [12]  936 	mov	a,r7
      00037A F2               [24]  937 	movx	@r0,a
      00037B 08               [12]  938 	inc	r0
      00037C EE               [12]  939 	mov	a,r6
      00037D F2               [24]  940 	movx	@r0,a
      00037E 08               [12]  941 	inc	r0
      00037F ED               [12]  942 	mov	a,r5
      000380 F2               [24]  943 	movx	@r0,a
      000381 08               [12]  944 	inc	r0
      000382 EC               [12]  945 	mov	a,r4
      000383 F2               [24]  946 	movx	@r0,a
      000384 D0 00            [24]  947 	pop	ar0
      000386 75 82 2D         [24]  948 	mov	dpl,#0x2d
      000389 12r00r00         [24]  949 	lcall	__output_char
      00038C A8*00            [24]  950 	mov	r0,_spx
      00038E 18               [12]  951 	dec	r0
      00038F E2               [24]  952 	movx	a,@r0
      000390 FC               [12]  953 	mov	r4,a
      000391 18               [12]  954 	dec	r0
      000392 E2               [24]  955 	movx	a,@r0
      000393 FD               [12]  956 	mov	r5,a
      000394 18               [12]  957 	dec	r0
      000395 E2               [24]  958 	movx	a,@r0
      000396 FE               [12]  959 	mov	r6,a
      000397 18               [12]  960 	dec	r0
      000398 E2               [24]  961 	movx	a,@r0
      000399 FF               [12]  962 	mov	r7,a
      00039A 88*00            [24]  963 	mov	_spx,r0
      00039C 80 32            [24]  964 	sjmp	00109$
      00039E                        965 00108$:
                                    966 ;	printf_large.c:275: if (sign)
      00039E 90r00r15         [24]  967 	mov	dptr,#_output_float_PARM_6
      0003A1 E0               [24]  968 	movx	a,@dptr
      0003A2 60 2C            [24]  969 	jz	00109$
                                    970 ;	printf_large.c:277: OUTPUT_CHAR ('+', p);
      0003A4 C0 00            [24]  971 	push	ar0
      0003A6 E5*00            [12]  972 	mov	a,_spx
      0003A8 F8               [12]  973 	mov	r0,a
      0003A9 24 04            [12]  974 	add	a,#0x04
      0003AB F5*00            [12]  975 	mov	_spx,a
      0003AD EF               [12]  976 	mov	a,r7
      0003AE F2               [24]  977 	movx	@r0,a
      0003AF 08               [12]  978 	inc	r0
      0003B0 EE               [12]  979 	mov	a,r6
      0003B1 F2               [24]  980 	movx	@r0,a
      0003B2 08               [12]  981 	inc	r0
      0003B3 ED               [12]  982 	mov	a,r5
      0003B4 F2               [24]  983 	movx	@r0,a
      0003B5 08               [12]  984 	inc	r0
      0003B6 EC               [12]  985 	mov	a,r4
      0003B7 F2               [24]  986 	movx	@r0,a
      0003B8 D0 00            [24]  987 	pop	ar0
      0003BA 75 82 2B         [24]  988 	mov	dpl,#0x2b
      0003BD 12r00r00         [24]  989 	lcall	__output_char
      0003C0 A8*00            [24]  990 	mov	r0,_spx
      0003C2 18               [12]  991 	dec	r0
      0003C3 E2               [24]  992 	movx	a,@r0
      0003C4 FC               [12]  993 	mov	r4,a
      0003C5 18               [12]  994 	dec	r0
      0003C6 E2               [24]  995 	movx	a,@r0
      0003C7 FD               [12]  996 	mov	r5,a
      0003C8 18               [12]  997 	dec	r0
      0003C9 E2               [24]  998 	movx	a,@r0
      0003CA FE               [12]  999 	mov	r6,a
      0003CB 18               [12] 1000 	dec	r0
      0003CC E2               [24] 1001 	movx	a,@r0
      0003CD FF               [12] 1002 	mov	r7,a
      0003CE 88*00            [24] 1003 	mov	_spx,r0
      0003D0                       1004 00109$:
                                   1005 ;	printf_large.c:280: reqWidth = 0;
      0003D0 90r00r11         [24] 1006 	mov	dptr,#_output_float_PARM_2
      0003D3 E4               [12] 1007 	clr	a
      0003D4 F0               [24] 1008 	movx	@dptr,a
                                   1009 ;	printf_large.c:281: left = 0;
      0003D5 90r00r13         [24] 1010 	mov	dptr,#_output_float_PARM_4
      0003D8 F0               [24] 1011 	movx	@dptr,a
                                   1012 ;	printf_large.c:282: zero = 0;
      0003D9 90r00r14         [24] 1013 	mov	dptr,#_output_float_PARM_5
      0003DC F0               [24] 1014 	movx	@dptr,a
                                   1015 ;	printf_large.c:283: sign = 0;
      0003DD 90r00r15         [24] 1016 	mov	dptr,#_output_float_PARM_6
      0003E0 F0               [24] 1017 	movx	@dptr,a
                                   1018 ;	printf_large.c:284: space = 0;
      0003E1 90r00r16         [24] 1019 	mov	dptr,#_output_float_PARM_7
      0003E4 F0               [24] 1020 	movx	@dptr,a
      0003E5                       1021 00111$:
                                   1022 ;	printf_large.c:288: if (reqDecimals==-1)
      0003E5 90r00r12         [24] 1023 	mov	dptr,#_output_float_PARM_3
      0003E8 E0               [24] 1024 	movx	a,@dptr
      0003E9 FB               [12] 1025 	mov	r3,a
      0003EA BB FF 06         [24] 1026 	cjne	r3,#0xff,00113$
                                   1027 ;	printf_large.c:289: reqDecimals=DEFAULT_FLOAT_PRECISION;
      0003ED 90r00r12         [24] 1028 	mov	dptr,#_output_float_PARM_3
      0003F0 74 06            [12] 1029 	mov	a,#0x06
      0003F2 F0               [24] 1030 	movx	@dptr,a
      0003F3                       1031 00113$:
                                   1032 ;	printf_large.c:292: rounding = 0.5;
      0003F3 90r00rA0         [24] 1033 	mov	dptr,#_output_float_rounding_1_63
      0003F6 E4               [12] 1034 	clr	a
      0003F7 F0               [24] 1035 	movx	@dptr,a
      0003F8 A3               [24] 1036 	inc	dptr
      0003F9 F0               [24] 1037 	movx	@dptr,a
      0003FA A3               [24] 1038 	inc	dptr
      0003FB F0               [24] 1039 	movx	@dptr,a
      0003FC 74 3F            [12] 1040 	mov	a,#0x3f
      0003FE A3               [24] 1041 	inc	dptr
      0003FF F0               [24] 1042 	movx	@dptr,a
                                   1043 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      000400 90r00r12         [24] 1044 	mov	dptr,#_output_float_PARM_3
      000403 E0               [24] 1045 	movx	a,@dptr
      000404 FB               [12] 1046 	mov	r3,a
      000405                       1047 00187$:
      000405 EB               [12] 1048 	mov	a,r3
      000406 60 60            [24] 1049 	jz	00114$
                                   1050 ;	printf_large.c:295: rounding /= 10.0;
      000408 C0 04            [24] 1051 	push	ar4
      00040A C0 05            [24] 1052 	push	ar5
      00040C C0 06            [24] 1053 	push	ar6
      00040E C0 07            [24] 1054 	push	ar7
      000410 90r00rA0         [24] 1055 	mov	dptr,#_output_float_rounding_1_63
      000413 E0               [24] 1056 	movx	a,@dptr
      000414 F8               [12] 1057 	mov	r0,a
      000415 A3               [24] 1058 	inc	dptr
      000416 E0               [24] 1059 	movx	a,@dptr
      000417 F9               [12] 1060 	mov	r1,a
      000418 A3               [24] 1061 	inc	dptr
      000419 E0               [24] 1062 	movx	a,@dptr
      00041A FA               [12] 1063 	mov	r2,a
      00041B A3               [24] 1064 	inc	dptr
      00041C E0               [24] 1065 	movx	a,@dptr
      00041D FF               [12] 1066 	mov	r7,a
      00041E 90r00r00         [24] 1067 	mov	dptr,#___fsdiv_PARM_2
      000421 E4               [12] 1068 	clr	a
      000422 F0               [24] 1069 	movx	@dptr,a
      000423 A3               [24] 1070 	inc	dptr
      000424 F0               [24] 1071 	movx	@dptr,a
      000425 74 20            [12] 1072 	mov	a,#0x20
      000427 A3               [24] 1073 	inc	dptr
      000428 F0               [24] 1074 	movx	@dptr,a
      000429 74 41            [12] 1075 	mov	a,#0x41
      00042B A3               [24] 1076 	inc	dptr
      00042C F0               [24] 1077 	movx	@dptr,a
      00042D C0 00            [24] 1078 	push	ar0
      00042F EB               [12] 1079 	mov	a,r3
      000430 A8*00            [24] 1080 	mov	r0,_spx
      000432 05*00            [12] 1081 	inc	_spx
      000434 F2               [24] 1082 	movx	@r0,a
      000435 D0 00            [24] 1083 	pop	ar0
      000437 88 82            [24] 1084 	mov	dpl,r0
      000439 89 83            [24] 1085 	mov	dph,r1
      00043B 8A F0            [24] 1086 	mov	b,r2
      00043D EF               [12] 1087 	mov	a,r7
      00043E 12r00r00         [24] 1088 	lcall	___fsdiv
      000441 AC 82            [24] 1089 	mov	r4,dpl
      000443 AD 83            [24] 1090 	mov	r5,dph
      000445 AE F0            [24] 1091 	mov	r6,b
      000447 FF               [12] 1092 	mov	r7,a
      000448 A8*00            [24] 1093 	mov	r0,_spx
      00044A 18               [12] 1094 	dec	r0
      00044B E2               [24] 1095 	movx	a,@r0
      00044C FB               [12] 1096 	mov	r3,a
      00044D 15*00            [12] 1097 	dec	_spx
      00044F 90r00rA0         [24] 1098 	mov	dptr,#_output_float_rounding_1_63
      000452 EC               [12] 1099 	mov	a,r4
      000453 F0               [24] 1100 	movx	@dptr,a
      000454 ED               [12] 1101 	mov	a,r5
      000455 A3               [24] 1102 	inc	dptr
      000456 F0               [24] 1103 	movx	@dptr,a
      000457 EE               [12] 1104 	mov	a,r6
      000458 A3               [24] 1105 	inc	dptr
      000459 F0               [24] 1106 	movx	@dptr,a
      00045A EF               [12] 1107 	mov	a,r7
      00045B A3               [24] 1108 	inc	dptr
      00045C F0               [24] 1109 	movx	@dptr,a
                                   1110 ;	printf_large.c:293: for (i=reqDecimals; i>0; i--)
      00045D 1B               [12] 1111 	dec	r3
      00045E D0 07            [24] 1112 	pop	ar7
      000460 D0 06            [24] 1113 	pop	ar6
      000462 D0 05            [24] 1114 	pop	ar5
      000464 D0 04            [24] 1115 	pop	ar4
      000466 80 9D            [24] 1116 	sjmp	00187$
      000468                       1117 00114$:
                                   1118 ;	printf_large.c:297: f += rounding;
      000468 90r00rA0         [24] 1119 	mov	dptr,#_output_float_rounding_1_63
      00046B E0               [24] 1120 	movx	a,@dptr
      00046C F8               [12] 1121 	mov	r0,a
      00046D A3               [24] 1122 	inc	dptr
      00046E E0               [24] 1123 	movx	a,@dptr
      00046F F9               [12] 1124 	mov	r1,a
      000470 A3               [24] 1125 	inc	dptr
      000471 E0               [24] 1126 	movx	a,@dptr
      000472 FA               [12] 1127 	mov	r2,a
      000473 A3               [24] 1128 	inc	dptr
      000474 E0               [24] 1129 	movx	a,@dptr
      000475 FB               [12] 1130 	mov	r3,a
      000476 90r00r00         [24] 1131 	mov	dptr,#___fsadd_PARM_2
      000479 E8               [12] 1132 	mov	a,r0
      00047A F0               [24] 1133 	movx	@dptr,a
      00047B E9               [12] 1134 	mov	a,r1
      00047C A3               [24] 1135 	inc	dptr
      00047D F0               [24] 1136 	movx	@dptr,a
      00047E EA               [12] 1137 	mov	a,r2
      00047F A3               [24] 1138 	inc	dptr
      000480 F0               [24] 1139 	movx	@dptr,a
      000481 EB               [12] 1140 	mov	a,r3
      000482 A3               [24] 1141 	inc	dptr
      000483 F0               [24] 1142 	movx	@dptr,a
      000484 8C 82            [24] 1143 	mov	dpl,r4
      000486 8D 83            [24] 1144 	mov	dph,r5
      000488 8E F0            [24] 1145 	mov	b,r6
      00048A EF               [12] 1146 	mov	a,r7
      00048B 12r00r00         [24] 1147 	lcall	___fsadd
      00048E AC 82            [24] 1148 	mov	r4,dpl
      000490 AD 83            [24] 1149 	mov	r5,dph
      000492 AE F0            [24] 1150 	mov	r6,b
      000494 FF               [12] 1151 	mov	r7,a
      000495 90r00r17         [24] 1152 	mov	dptr,#_output_float_f_1_62
      000498 EC               [12] 1153 	mov	a,r4
      000499 F0               [24] 1154 	movx	@dptr,a
      00049A ED               [12] 1155 	mov	a,r5
      00049B A3               [24] 1156 	inc	dptr
      00049C F0               [24] 1157 	movx	@dptr,a
      00049D EE               [12] 1158 	mov	a,r6
      00049E A3               [24] 1159 	inc	dptr
      00049F F0               [24] 1160 	movx	@dptr,a
      0004A0 EF               [12] 1161 	mov	a,r7
      0004A1 A3               [24] 1162 	inc	dptr
      0004A2 F0               [24] 1163 	movx	@dptr,a
                                   1164 ;	printf_large.c:300: integerPart = f;
      0004A3 C0 00            [24] 1165 	push	ar0
      0004A5 E5*00            [12] 1166 	mov	a,_spx
      0004A7 F8               [12] 1167 	mov	r0,a
      0004A8 24 04            [12] 1168 	add	a,#0x04
      0004AA F5*00            [12] 1169 	mov	_spx,a
      0004AC EF               [12] 1170 	mov	a,r7
      0004AD F2               [24] 1171 	movx	@r0,a
      0004AE 08               [12] 1172 	inc	r0
      0004AF EE               [12] 1173 	mov	a,r6
      0004B0 F2               [24] 1174 	movx	@r0,a
      0004B1 08               [12] 1175 	inc	r0
      0004B2 ED               [12] 1176 	mov	a,r5
      0004B3 F2               [24] 1177 	movx	@r0,a
      0004B4 08               [12] 1178 	inc	r0
      0004B5 EC               [12] 1179 	mov	a,r4
      0004B6 F2               [24] 1180 	movx	@r0,a
      0004B7 D0 00            [24] 1181 	pop	ar0
      0004B9 8C 82            [24] 1182 	mov	dpl,r4
      0004BB 8D 83            [24] 1183 	mov	dph,r5
      0004BD 8E F0            [24] 1184 	mov	b,r6
      0004BF EF               [12] 1185 	mov	a,r7
      0004C0 12r00r00         [24] 1186 	lcall	___fs2ulong
      0004C3 A8 82            [24] 1187 	mov	r0,dpl
      0004C5 A9 83            [24] 1188 	mov	r1,dph
      0004C7 AA F0            [24] 1189 	mov	r2,b
      0004C9 FB               [12] 1190 	mov	r3,a
      0004CA C0 00            [24] 1191 	push	ar0
      0004CC A8*00            [24] 1192 	mov	r0,_spx
      0004CE 18               [12] 1193 	dec	r0
      0004CF E2               [24] 1194 	movx	a,@r0
      0004D0 FC               [12] 1195 	mov	r4,a
      0004D1 18               [12] 1196 	dec	r0
      0004D2 E2               [24] 1197 	movx	a,@r0
      0004D3 FD               [12] 1198 	mov	r5,a
      0004D4 18               [12] 1199 	dec	r0
      0004D5 E2               [24] 1200 	movx	a,@r0
      0004D6 FE               [12] 1201 	mov	r6,a
      0004D7 18               [12] 1202 	dec	r0
      0004D8 E2               [24] 1203 	movx	a,@r0
      0004D9 FF               [12] 1204 	mov	r7,a
      0004DA 88*00            [24] 1205 	mov	_spx,r0
      0004DC D0 00            [24] 1206 	pop	ar0
      0004DE 90r00r9C         [24] 1207 	mov	dptr,#_output_float_integerPart_1_63
      0004E1 E8               [12] 1208 	mov	a,r0
      0004E2 F0               [24] 1209 	movx	@dptr,a
      0004E3 E9               [12] 1210 	mov	a,r1
      0004E4 A3               [24] 1211 	inc	dptr
      0004E5 F0               [24] 1212 	movx	@dptr,a
      0004E6 EA               [12] 1213 	mov	a,r2
      0004E7 A3               [24] 1214 	inc	dptr
      0004E8 F0               [24] 1215 	movx	@dptr,a
      0004E9 EB               [12] 1216 	mov	a,r3
      0004EA A3               [24] 1217 	inc	dptr
      0004EB F0               [24] 1218 	movx	@dptr,a
                                   1219 ;	printf_large.c:301: decimalPart = f - integerPart;
      0004EC C0 00            [24] 1220 	push	ar0
      0004EE E5*00            [12] 1221 	mov	a,_spx
      0004F0 F8               [12] 1222 	mov	r0,a
      0004F1 24 04            [12] 1223 	add	a,#0x04
      0004F3 F5*00            [12] 1224 	mov	_spx,a
      0004F5 EF               [12] 1225 	mov	a,r7
      0004F6 F2               [24] 1226 	movx	@r0,a
      0004F7 08               [12] 1227 	inc	r0
      0004F8 EE               [12] 1228 	mov	a,r6
      0004F9 F2               [24] 1229 	movx	@r0,a
      0004FA 08               [12] 1230 	inc	r0
      0004FB ED               [12] 1231 	mov	a,r5
      0004FC F2               [24] 1232 	movx	@r0,a
      0004FD 08               [12] 1233 	inc	r0
      0004FE EC               [12] 1234 	mov	a,r4
      0004FF F2               [24] 1235 	movx	@r0,a
      000500 D0 00            [24] 1236 	pop	ar0
      000502 88 82            [24] 1237 	mov	dpl,r0
      000504 89 83            [24] 1238 	mov	dph,r1
      000506 8A F0            [24] 1239 	mov	b,r2
      000508 EB               [12] 1240 	mov	a,r3
      000509 12r00r00         [24] 1241 	lcall	___ulong2fs
      00050C A8 82            [24] 1242 	mov	r0,dpl
      00050E A9 83            [24] 1243 	mov	r1,dph
      000510 AA F0            [24] 1244 	mov	r2,b
      000512 FB               [12] 1245 	mov	r3,a
      000513 C0 00            [24] 1246 	push	ar0
      000515 A8*00            [24] 1247 	mov	r0,_spx
      000517 18               [12] 1248 	dec	r0
      000518 E2               [24] 1249 	movx	a,@r0
      000519 FC               [12] 1250 	mov	r4,a
      00051A 18               [12] 1251 	dec	r0
      00051B E2               [24] 1252 	movx	a,@r0
      00051C FD               [12] 1253 	mov	r5,a
      00051D 18               [12] 1254 	dec	r0
      00051E E2               [24] 1255 	movx	a,@r0
      00051F FE               [12] 1256 	mov	r6,a
      000520 18               [12] 1257 	dec	r0
      000521 E2               [24] 1258 	movx	a,@r0
      000522 FF               [12] 1259 	mov	r7,a
      000523 88*00            [24] 1260 	mov	_spx,r0
      000525 D0 00            [24] 1261 	pop	ar0
      000527 90r00r00         [24] 1262 	mov	dptr,#___fssub_PARM_2
      00052A E8               [12] 1263 	mov	a,r0
      00052B F0               [24] 1264 	movx	@dptr,a
      00052C E9               [12] 1265 	mov	a,r1
      00052D A3               [24] 1266 	inc	dptr
      00052E F0               [24] 1267 	movx	@dptr,a
      00052F EA               [12] 1268 	mov	a,r2
      000530 A3               [24] 1269 	inc	dptr
      000531 F0               [24] 1270 	movx	@dptr,a
      000532 EB               [12] 1271 	mov	a,r3
      000533 A3               [24] 1272 	inc	dptr
      000534 F0               [24] 1273 	movx	@dptr,a
      000535 8C 82            [24] 1274 	mov	dpl,r4
      000537 8D 83            [24] 1275 	mov	dph,r5
      000539 8E F0            [24] 1276 	mov	b,r6
      00053B EF               [12] 1277 	mov	a,r7
      00053C 12r00r00         [24] 1278 	lcall	___fssub
      00053F AC 82            [24] 1279 	mov	r4,dpl
      000541 AD 83            [24] 1280 	mov	r5,dph
      000543 AE F0            [24] 1281 	mov	r6,b
      000545 FF               [12] 1282 	mov	r7,a
      000546 90r00rA4         [24] 1283 	mov	dptr,#_output_float_decimalPart_1_63
      000549 EC               [12] 1284 	mov	a,r4
      00054A F0               [24] 1285 	movx	@dptr,a
      00054B ED               [12] 1286 	mov	a,r5
      00054C A3               [24] 1287 	inc	dptr
      00054D F0               [24] 1288 	movx	@dptr,a
      00054E EE               [12] 1289 	mov	a,r6
      00054F A3               [24] 1290 	inc	dptr
      000550 F0               [24] 1291 	movx	@dptr,a
      000551 EF               [12] 1292 	mov	a,r7
      000552 A3               [24] 1293 	inc	dptr
      000553 F0               [24] 1294 	movx	@dptr,a
                                   1295 ;	printf_large.c:304: while (integerPart)
      000554 7F 00            [12] 1296 	mov	r7,#0x00
      000556                       1297 00115$:
      000556 90r00r9C         [24] 1298 	mov	dptr,#_output_float_integerPart_1_63
      000559 E0               [24] 1299 	movx	a,@dptr
      00055A F5*04            [12] 1300 	mov	_output_float_sloc1_1_0,a
      00055C A3               [24] 1301 	inc	dptr
      00055D E0               [24] 1302 	movx	a,@dptr
      00055E F5*05            [12] 1303 	mov	(_output_float_sloc1_1_0 + 1),a
      000560 A3               [24] 1304 	inc	dptr
      000561 E0               [24] 1305 	movx	a,@dptr
      000562 F5*06            [12] 1306 	mov	(_output_float_sloc1_1_0 + 2),a
      000564 A3               [24] 1307 	inc	dptr
      000565 E0               [24] 1308 	movx	a,@dptr
      000566 F5*07            [12] 1309 	mov	(_output_float_sloc1_1_0 + 3),a
      000568 E5*04            [12] 1310 	mov	a,_output_float_sloc1_1_0
      00056A 45*05            [12] 1311 	orl	a,(_output_float_sloc1_1_0 + 1)
      00056C 45*06            [12] 1312 	orl	a,(_output_float_sloc1_1_0 + 2)
      00056E 45*07            [12] 1313 	orl	a,(_output_float_sloc1_1_0 + 3)
      000570 70 03            [24] 1314 	jnz	00356$
      000572 02r05rFD         [24] 1315 	ljmp	00248$
      000575                       1316 00356$:
                                   1317 ;	printf_large.c:306: fpBuffer[fpBI++]='0' + integerPart%10;
      000575 8F 02            [24] 1318 	mov	ar2,r7
      000577 0F               [12] 1319 	inc	r7
      000578 EA               [12] 1320 	mov	a,r2
      000579 24r1B            [12] 1321 	add	a,#_output_float_fpBuffer_1_63
      00057B F5*00            [12] 1322 	mov	_output_float_sloc0_1_0,a
      00057D E4               [12] 1323 	clr	a
      00057E 34s00            [12] 1324 	addc	a,#(_output_float_fpBuffer_1_63 >> 8)
      000580 F5*01            [12] 1325 	mov	(_output_float_sloc0_1_0 + 1),a
      000582 90r00r00         [24] 1326 	mov	dptr,#__modulong_PARM_2
      000585 74 0A            [12] 1327 	mov	a,#0x0a
      000587 F0               [24] 1328 	movx	@dptr,a
      000588 E4               [12] 1329 	clr	a
      000589 A3               [24] 1330 	inc	dptr
      00058A F0               [24] 1331 	movx	@dptr,a
      00058B A3               [24] 1332 	inc	dptr
      00058C F0               [24] 1333 	movx	@dptr,a
      00058D A3               [24] 1334 	inc	dptr
      00058E F0               [24] 1335 	movx	@dptr,a
      00058F C0 00            [24] 1336 	push	ar0
      000591 EF               [12] 1337 	mov	a,r7
      000592 A8*00            [24] 1338 	mov	r0,_spx
      000594 05*00            [12] 1339 	inc	_spx
      000596 F2               [24] 1340 	movx	@r0,a
      000597 D0 00            [24] 1341 	pop	ar0
      000599 85*04 82         [24] 1342 	mov	dpl,_output_float_sloc1_1_0
      00059C 85*05 83         [24] 1343 	mov	dph,(_output_float_sloc1_1_0 + 1)
      00059F 85*06 F0         [24] 1344 	mov	b,(_output_float_sloc1_1_0 + 2)
      0005A2 E5*07            [12] 1345 	mov	a,(_output_float_sloc1_1_0 + 3)
      0005A4 12r00r00         [24] 1346 	lcall	__modulong
      0005A7 A8*00            [24] 1347 	mov	r0,_spx
      0005A9 18               [12] 1348 	dec	r0
      0005AA E2               [24] 1349 	movx	a,@r0
      0005AB FF               [12] 1350 	mov	r7,a
      0005AC 15*00            [12] 1351 	dec	_spx
      0005AE 74 30            [12] 1352 	mov	a,#0x30
      0005B0 28               [12] 1353 	add	a,r0
      0005B1 F8               [12] 1354 	mov	r0,a
      0005B2 85*00 82         [24] 1355 	mov	dpl,_output_float_sloc0_1_0
      0005B5 85*01 83         [24] 1356 	mov	dph,(_output_float_sloc0_1_0 + 1)
      0005B8 F0               [24] 1357 	movx	@dptr,a
                                   1358 ;	printf_large.c:307: integerPart /= 10;
      0005B9 90r00r00         [24] 1359 	mov	dptr,#__divulong_PARM_2
      0005BC 74 0A            [12] 1360 	mov	a,#0x0a
      0005BE F0               [24] 1361 	movx	@dptr,a
      0005BF E4               [12] 1362 	clr	a
      0005C0 A3               [24] 1363 	inc	dptr
      0005C1 F0               [24] 1364 	movx	@dptr,a
      0005C2 A3               [24] 1365 	inc	dptr
      0005C3 F0               [24] 1366 	movx	@dptr,a
      0005C4 A3               [24] 1367 	inc	dptr
      0005C5 F0               [24] 1368 	movx	@dptr,a
      0005C6 C0 00            [24] 1369 	push	ar0
      0005C8 EF               [12] 1370 	mov	a,r7
      0005C9 A8*00            [24] 1371 	mov	r0,_spx
      0005CB 05*00            [12] 1372 	inc	_spx
      0005CD F2               [24] 1373 	movx	@r0,a
      0005CE D0 00            [24] 1374 	pop	ar0
      0005D0 85*04 82         [24] 1375 	mov	dpl,_output_float_sloc1_1_0
      0005D3 85*05 83         [24] 1376 	mov	dph,(_output_float_sloc1_1_0 + 1)
      0005D6 85*06 F0         [24] 1377 	mov	b,(_output_float_sloc1_1_0 + 2)
      0005D9 E5*07            [12] 1378 	mov	a,(_output_float_sloc1_1_0 + 3)
      0005DB 12r00r00         [24] 1379 	lcall	__divulong
      0005DE AB 82            [24] 1380 	mov	r3,dpl
      0005E0 AC 83            [24] 1381 	mov	r4,dph
      0005E2 AD F0            [24] 1382 	mov	r5,b
      0005E4 FE               [12] 1383 	mov	r6,a
      0005E5 A8*00            [24] 1384 	mov	r0,_spx
      0005E7 18               [12] 1385 	dec	r0
      0005E8 E2               [24] 1386 	movx	a,@r0
      0005E9 FF               [12] 1387 	mov	r7,a
      0005EA 15*00            [12] 1388 	dec	_spx
      0005EC 90r00r9C         [24] 1389 	mov	dptr,#_output_float_integerPart_1_63
      0005EF EB               [12] 1390 	mov	a,r3
      0005F0 F0               [24] 1391 	movx	@dptr,a
      0005F1 EC               [12] 1392 	mov	a,r4
      0005F2 A3               [24] 1393 	inc	dptr
      0005F3 F0               [24] 1394 	movx	@dptr,a
      0005F4 ED               [12] 1395 	mov	a,r5
      0005F5 A3               [24] 1396 	inc	dptr
      0005F6 F0               [24] 1397 	movx	@dptr,a
      0005F7 EE               [12] 1398 	mov	a,r6
      0005F8 A3               [24] 1399 	inc	dptr
      0005F9 F0               [24] 1400 	movx	@dptr,a
      0005FA 02r05r56         [24] 1401 	ljmp	00115$
      0005FD                       1402 00248$:
      0005FD 90r00rA8         [24] 1403 	mov	dptr,#_output_float_fpBI_1_63
      000600 EF               [12] 1404 	mov	a,r7
      000601 F0               [24] 1405 	movx	@dptr,a
                                   1406 ;	printf_large.c:309: if (!fpBI)
      000602 EF               [12] 1407 	mov	a,r7
      000603 70 13            [24] 1408 	jnz	00119$
                                   1409 ;	printf_large.c:312: fpBuffer[fpBI++]='0';
      000605 90r00rA8         [24] 1410 	mov	dptr,#_output_float_fpBI_1_63
      000608 EF               [12] 1411 	mov	a,r7
      000609 04               [12] 1412 	inc	a
      00060A F0               [24] 1413 	movx	@dptr,a
      00060B EF               [12] 1414 	mov	a,r7
      00060C 24r1B            [12] 1415 	add	a,#_output_float_fpBuffer_1_63
      00060E F5 82            [12] 1416 	mov	dpl,a
      000610 E4               [12] 1417 	clr	a
      000611 34s00            [12] 1418 	addc	a,#(_output_float_fpBuffer_1_63 >> 8)
      000613 F5 83            [12] 1419 	mov	dph,a
      000615 74 30            [12] 1420 	mov	a,#0x30
      000617 F0               [24] 1421 	movx	@dptr,a
      000618                       1422 00119$:
                                   1423 ;	printf_large.c:316: fpBD=fpBI;
      000618 90r00rA8         [24] 1424 	mov	dptr,#_output_float_fpBI_1_63
      00061B E0               [24] 1425 	movx	a,@dptr
      00061C F5*04            [12] 1426 	mov	_output_float_sloc1_1_0,a
                                   1427 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      00061E 90r00r12         [24] 1428 	mov	dptr,#_output_float_PARM_3
      000621 E0               [24] 1429 	movx	a,@dptr
      000622 FE               [12] 1430 	mov	r6,a
      000623 85*04*00         [24] 1431 	mov	_output_float_sloc0_1_0,_output_float_sloc1_1_0
      000626 8E 04            [24] 1432 	mov	ar4,r6
      000628                       1433 00190$:
      000628 EC               [12] 1434 	mov	a,r4
      000629 70 03            [24] 1435 	jnz	00358$
      00062B 02r07r3E         [24] 1436 	ljmp	00120$
      00062E                       1437 00358$:
                                   1438 ;	printf_large.c:320: decimalPart *= 10.0;
      00062E C0 06            [24] 1439 	push	ar6
      000630 90r00rA4         [24] 1440 	mov	dptr,#_output_float_decimalPart_1_63
      000633 E0               [24] 1441 	movx	a,@dptr
      000634 F8               [12] 1442 	mov	r0,a
      000635 A3               [24] 1443 	inc	dptr
      000636 E0               [24] 1444 	movx	a,@dptr
      000637 F9               [12] 1445 	mov	r1,a
      000638 A3               [24] 1446 	inc	dptr
      000639 E0               [24] 1447 	movx	a,@dptr
      00063A FA               [12] 1448 	mov	r2,a
      00063B A3               [24] 1449 	inc	dptr
      00063C E0               [24] 1450 	movx	a,@dptr
      00063D FB               [12] 1451 	mov	r3,a
      00063E 90r00r00         [24] 1452 	mov	dptr,#___fsmul_PARM_2
      000641 E8               [12] 1453 	mov	a,r0
      000642 F0               [24] 1454 	movx	@dptr,a
      000643 E9               [12] 1455 	mov	a,r1
      000644 A3               [24] 1456 	inc	dptr
      000645 F0               [24] 1457 	movx	@dptr,a
      000646 EA               [12] 1458 	mov	a,r2
      000647 A3               [24] 1459 	inc	dptr
      000648 F0               [24] 1460 	movx	@dptr,a
      000649 EB               [12] 1461 	mov	a,r3
      00064A A3               [24] 1462 	inc	dptr
      00064B F0               [24] 1463 	movx	@dptr,a
      00064C C0 00            [24] 1464 	push	ar0
      00064E A8*00            [24] 1465 	mov	r0,_spx
      000650 05*00            [12] 1466 	inc	_spx
      000652 05*00            [12] 1467 	inc	_spx
      000654 EE               [12] 1468 	mov	a,r6
      000655 F2               [24] 1469 	movx	@r0,a
      000656 08               [12] 1470 	inc	r0
      000657 EC               [12] 1471 	mov	a,r4
      000658 F2               [24] 1472 	movx	@r0,a
      000659 D0 00            [24] 1473 	pop	ar0
      00065B 90 00 00         [24] 1474 	mov	dptr,#0x0000
      00065E 75 F0 20         [24] 1475 	mov	b,#0x20
      000661 74 41            [12] 1476 	mov	a,#0x41
      000663 12r00r00         [24] 1477 	lcall	___fsmul
      000666 A8 82            [24] 1478 	mov	r0,dpl
      000668 A9 83            [24] 1479 	mov	r1,dph
      00066A AA F0            [24] 1480 	mov	r2,b
      00066C FB               [12] 1481 	mov	r3,a
      00066D C0 00            [24] 1482 	push	ar0
      00066F A8*00            [24] 1483 	mov	r0,_spx
      000671 18               [12] 1484 	dec	r0
      000672 E2               [24] 1485 	movx	a,@r0
      000673 FC               [12] 1486 	mov	r4,a
      000674 18               [12] 1487 	dec	r0
      000675 E2               [24] 1488 	movx	a,@r0
      000676 88*00            [24] 1489 	mov	_spx,r0
      000678 D0 00            [24] 1490 	pop	ar0
      00067A 90r00rA4         [24] 1491 	mov	dptr,#_output_float_decimalPart_1_63
      00067D E8               [12] 1492 	mov	a,r0
      00067E F0               [24] 1493 	movx	@dptr,a
      00067F E9               [12] 1494 	mov	a,r1
      000680 A3               [24] 1495 	inc	dptr
      000681 F0               [24] 1496 	movx	@dptr,a
      000682 EA               [12] 1497 	mov	a,r2
      000683 A3               [24] 1498 	inc	dptr
      000684 F0               [24] 1499 	movx	@dptr,a
      000685 EB               [12] 1500 	mov	a,r3
      000686 A3               [24] 1501 	inc	dptr
      000687 F0               [24] 1502 	movx	@dptr,a
                                   1503 ;	printf_large.c:322: integerPart = decimalPart;
      000688 90r00rA4         [24] 1504 	mov	dptr,#_output_float_decimalPart_1_63
      00068B E0               [24] 1505 	movx	a,@dptr
      00068C F5*08            [12] 1506 	mov	_output_float_sloc2_1_0,a
      00068E A3               [24] 1507 	inc	dptr
      00068F E0               [24] 1508 	movx	a,@dptr
      000690 F5*09            [12] 1509 	mov	(_output_float_sloc2_1_0 + 1),a
      000692 A3               [24] 1510 	inc	dptr
      000693 E0               [24] 1511 	movx	a,@dptr
      000694 F5*0A            [12] 1512 	mov	(_output_float_sloc2_1_0 + 2),a
      000696 A3               [24] 1513 	inc	dptr
      000697 E0               [24] 1514 	movx	a,@dptr
      000698 F5*0B            [12] 1515 	mov	(_output_float_sloc2_1_0 + 3),a
      00069A C0 00            [24] 1516 	push	ar0
      00069C EC               [12] 1517 	mov	a,r4
      00069D A8*00            [24] 1518 	mov	r0,_spx
      00069F 05*00            [12] 1519 	inc	_spx
      0006A1 F2               [24] 1520 	movx	@r0,a
      0006A2 D0 00            [24] 1521 	pop	ar0
      0006A4 85*08 82         [24] 1522 	mov	dpl,_output_float_sloc2_1_0
      0006A7 85*09 83         [24] 1523 	mov	dph,(_output_float_sloc2_1_0 + 1)
      0006AA 85*0A F0         [24] 1524 	mov	b,(_output_float_sloc2_1_0 + 2)
      0006AD E5*0B            [12] 1525 	mov	a,(_output_float_sloc2_1_0 + 3)
      0006AF 12r00r00         [24] 1526 	lcall	___fs2ulong
      0006B2 AB 82            [24] 1527 	mov	r3,dpl
      0006B4 AD 83            [24] 1528 	mov	r5,dph
      0006B6 AE F0            [24] 1529 	mov	r6,b
      0006B8 FF               [12] 1530 	mov	r7,a
      0006B9 A8*00            [24] 1531 	mov	r0,_spx
      0006BB 18               [12] 1532 	dec	r0
      0006BC E2               [24] 1533 	movx	a,@r0
      0006BD FC               [12] 1534 	mov	r4,a
      0006BE 15*00            [12] 1535 	dec	_spx
                                   1536 ;	printf_large.c:323: fpBuffer[fpBD++] = '0' + integerPart;
      0006C0 AA*00            [24] 1537 	mov	r2,_output_float_sloc0_1_0
      0006C2 05*00            [12] 1538 	inc	_output_float_sloc0_1_0
      0006C4 EA               [12] 1539 	mov	a,r2
      0006C5 24r1B            [12] 1540 	add	a,#_output_float_fpBuffer_1_63
      0006C7 F5 82            [12] 1541 	mov	dpl,a
      0006C9 E4               [12] 1542 	clr	a
      0006CA 34s00            [12] 1543 	addc	a,#(_output_float_fpBuffer_1_63 >> 8)
      0006CC F5 83            [12] 1544 	mov	dph,a
      0006CE 8B 02            [24] 1545 	mov	ar2,r3
      0006D0 74 30            [12] 1546 	mov	a,#0x30
      0006D2 2A               [12] 1547 	add	a,r2
      0006D3 F0               [24] 1548 	movx	@dptr,a
                                   1549 ;	printf_large.c:324: decimalPart -= integerPart;
      0006D4 C0 00            [24] 1550 	push	ar0
      0006D6 EC               [12] 1551 	mov	a,r4
      0006D7 A8*00            [24] 1552 	mov	r0,_spx
      0006D9 05*00            [12] 1553 	inc	_spx
      0006DB F2               [24] 1554 	movx	@r0,a
      0006DC D0 00            [24] 1555 	pop	ar0
      0006DE 8B 82            [24] 1556 	mov	dpl,r3
      0006E0 8D 83            [24] 1557 	mov	dph,r5
      0006E2 8E F0            [24] 1558 	mov	b,r6
      0006E4 EF               [12] 1559 	mov	a,r7
      0006E5 12r00r00         [24] 1560 	lcall	___ulong2fs
      0006E8 AB 82            [24] 1561 	mov	r3,dpl
      0006EA AD 83            [24] 1562 	mov	r5,dph
      0006EC AE F0            [24] 1563 	mov	r6,b
      0006EE FF               [12] 1564 	mov	r7,a
      0006EF A8*00            [24] 1565 	mov	r0,_spx
      0006F1 18               [12] 1566 	dec	r0
      0006F2 E2               [24] 1567 	movx	a,@r0
      0006F3 FC               [12] 1568 	mov	r4,a
      0006F4 15*00            [12] 1569 	dec	_spx
      0006F6 90r00r00         [24] 1570 	mov	dptr,#___fssub_PARM_2
      0006F9 EB               [12] 1571 	mov	a,r3
      0006FA F0               [24] 1572 	movx	@dptr,a
      0006FB ED               [12] 1573 	mov	a,r5
      0006FC A3               [24] 1574 	inc	dptr
      0006FD F0               [24] 1575 	movx	@dptr,a
      0006FE EE               [12] 1576 	mov	a,r6
      0006FF A3               [24] 1577 	inc	dptr
      000700 F0               [24] 1578 	movx	@dptr,a
      000701 EF               [12] 1579 	mov	a,r7
      000702 A3               [24] 1580 	inc	dptr
      000703 F0               [24] 1581 	movx	@dptr,a
      000704 C0 00            [24] 1582 	push	ar0
      000706 EC               [12] 1583 	mov	a,r4
      000707 A8*00            [24] 1584 	mov	r0,_spx
      000709 05*00            [12] 1585 	inc	_spx
      00070B F2               [24] 1586 	movx	@r0,a
      00070C D0 00            [24] 1587 	pop	ar0
      00070E 85*08 82         [24] 1588 	mov	dpl,_output_float_sloc2_1_0
      000711 85*09 83         [24] 1589 	mov	dph,(_output_float_sloc2_1_0 + 1)
      000714 85*0A F0         [24] 1590 	mov	b,(_output_float_sloc2_1_0 + 2)
      000717 E5*0B            [12] 1591 	mov	a,(_output_float_sloc2_1_0 + 3)
      000719 12r00r00         [24] 1592 	lcall	___fssub
      00071C AB 82            [24] 1593 	mov	r3,dpl
      00071E AD 83            [24] 1594 	mov	r5,dph
      000720 AE F0            [24] 1595 	mov	r6,b
      000722 FF               [12] 1596 	mov	r7,a
      000723 A8*00            [24] 1597 	mov	r0,_spx
      000725 18               [12] 1598 	dec	r0
      000726 E2               [24] 1599 	movx	a,@r0
      000727 FC               [12] 1600 	mov	r4,a
      000728 15*00            [12] 1601 	dec	_spx
      00072A 90r00rA4         [24] 1602 	mov	dptr,#_output_float_decimalPart_1_63
      00072D EB               [12] 1603 	mov	a,r3
      00072E F0               [24] 1604 	movx	@dptr,a
      00072F ED               [12] 1605 	mov	a,r5
      000730 A3               [24] 1606 	inc	dptr
      000731 F0               [24] 1607 	movx	@dptr,a
      000732 EE               [12] 1608 	mov	a,r6
      000733 A3               [24] 1609 	inc	dptr
      000734 F0               [24] 1610 	movx	@dptr,a
      000735 EF               [12] 1611 	mov	a,r7
      000736 A3               [24] 1612 	inc	dptr
      000737 F0               [24] 1613 	movx	@dptr,a
                                   1614 ;	printf_large.c:318: for (i=reqDecimals; i>0; i--)
      000738 1C               [12] 1615 	dec	r4
      000739 D0 06            [24] 1616 	pop	ar6
      00073B 02r06r28         [24] 1617 	ljmp	00190$
      00073E                       1618 00120$:
                                   1619 ;	printf_large.c:328: minWidth+=reqDecimals?reqDecimals+1:0; // maybe these
      00073E EE               [12] 1620 	mov	a,r6
      00073F 60 08            [24] 1621 	jz	00198$
      000741 90r00r12         [24] 1622 	mov	dptr,#_output_float_PARM_3
      000744 E0               [24] 1623 	movx	a,@dptr
      000745 FF               [12] 1624 	mov	r7,a
      000746 0F               [12] 1625 	inc	r7
      000747 80 02            [24] 1626 	sjmp	00199$
      000749                       1627 00198$:
      000749 7F 00            [12] 1628 	mov	r7,#0x00
      00074B                       1629 00199$:
      00074B AE*04            [24] 1630 	mov	r6,_output_float_sloc1_1_0
      00074D EF               [12] 1631 	mov	a,r7
      00074E 2E               [12] 1632 	add	a,r6
      00074F FF               [12] 1633 	mov	r7,a
      000750 90r00rA9         [24] 1634 	mov	dptr,#_output_float_minWidth_1_63
      000753 F0               [24] 1635 	movx	@dptr,a
                                   1636 ;	printf_large.c:329: if (negative || sign || space)
      000754 90r00r9B         [24] 1637 	mov	dptr,#_output_float_negative_1_63
      000757 E0               [24] 1638 	movx	a,@dptr
      000758 FE               [12] 1639 	mov	r6,a
      000759 E0               [24] 1640 	movx	a,@dptr
      00075A 70 0C            [24] 1641 	jnz	00121$
      00075C 90r00r15         [24] 1642 	mov	dptr,#_output_float_PARM_6
      00075F E0               [24] 1643 	movx	a,@dptr
      000760 70 06            [24] 1644 	jnz	00121$
      000762 90r00r16         [24] 1645 	mov	dptr,#_output_float_PARM_7
      000765 E0               [24] 1646 	movx	a,@dptr
      000766 60 06            [24] 1647 	jz	00122$
      000768                       1648 00121$:
                                   1649 ;	printf_large.c:330: minWidth++; // and maybe even this :)
      000768 90r00rA9         [24] 1650 	mov	dptr,#_output_float_minWidth_1_63
      00076B EF               [12] 1651 	mov	a,r7
      00076C 04               [12] 1652 	inc	a
      00076D F0               [24] 1653 	movx	@dptr,a
      00076E                       1654 00122$:
                                   1655 ;	printf_large.c:332: if (!left && reqWidth>i)
      00076E 90r00r13         [24] 1656 	mov	dptr,#_output_float_PARM_4
      000771 E0               [24] 1657 	movx	a,@dptr
      000772 60 03            [24] 1658 	jz	00363$
      000774 02r08r42         [24] 1659 	ljmp	00159$
      000777                       1660 00363$:
      000777 90r00r11         [24] 1661 	mov	dptr,#_output_float_PARM_2
      00077A E0               [24] 1662 	movx	a,@dptr
      00077B FF               [12] 1663 	mov	r7,a
      00077C C3               [12] 1664 	clr	c
      00077D EC               [12] 1665 	mov	a,r4
      00077E 9F               [12] 1666 	subb	a,r7
      00077F 40 03            [24] 1667 	jc	00364$
      000781 02r08r42         [24] 1668 	ljmp	00159$
      000784                       1669 00364$:
                                   1670 ;	printf_large.c:334: if (zero)
      000784 90r00r14         [24] 1671 	mov	dptr,#_output_float_PARM_5
      000787 E0               [24] 1672 	movx	a,@dptr
      000788 60 5B            [24] 1673 	jz	00228$
                                   1674 ;	printf_large.c:336: if (negative)
      00078A EE               [12] 1675 	mov	a,r6
      00078B 60 08            [24] 1676 	jz	00131$
                                   1677 ;	printf_large.c:338: OUTPUT_CHAR('-', p);
      00078D 75 82 2D         [24] 1678 	mov	dpl,#0x2d
      000790 12r00r00         [24] 1679 	lcall	__output_char
      000793 80 1A            [24] 1680 	sjmp	00226$
      000795                       1681 00131$:
                                   1682 ;	printf_large.c:340: else if (sign)
      000795 90r00r15         [24] 1683 	mov	dptr,#_output_float_PARM_6
      000798 E0               [24] 1684 	movx	a,@dptr
      000799 60 08            [24] 1685 	jz	00128$
                                   1686 ;	printf_large.c:342: OUTPUT_CHAR('+', p);
      00079B 75 82 2B         [24] 1687 	mov	dpl,#0x2b
      00079E 12r00r00         [24] 1688 	lcall	__output_char
      0007A1 80 0C            [24] 1689 	sjmp	00226$
      0007A3                       1690 00128$:
                                   1691 ;	printf_large.c:344: else if (space)
      0007A3 90r00r16         [24] 1692 	mov	dptr,#_output_float_PARM_7
      0007A6 E0               [24] 1693 	movx	a,@dptr
      0007A7 60 06            [24] 1694 	jz	00226$
                                   1695 ;	printf_large.c:346: OUTPUT_CHAR(' ', p);
      0007A9 75 82 20         [24] 1696 	mov	dpl,#0x20
      0007AC 12r00r00         [24] 1697 	lcall	__output_char
                                   1698 ;	printf_large.c:348: while (reqWidth-->minWidth)
      0007AF                       1699 00226$:
      0007AF 90r00rA9         [24] 1700 	mov	dptr,#_output_float_minWidth_1_63
      0007B2 E0               [24] 1701 	movx	a,@dptr
      0007B3 FE               [12] 1702 	mov	r6,a
      0007B4 90r00r11         [24] 1703 	mov	dptr,#_output_float_PARM_2
      0007B7 E0               [24] 1704 	movx	a,@dptr
      0007B8 FD               [12] 1705 	mov	r5,a
      0007B9                       1706 00133$:
      0007B9 8D 04            [24] 1707 	mov	ar4,r5
      0007BB 1D               [12] 1708 	dec	r5
      0007BC C3               [12] 1709 	clr	c
      0007BD EE               [12] 1710 	mov	a,r6
      0007BE 9C               [12] 1711 	subb	a,r4
      0007BF 40 03            [24] 1712 	jc	00369$
      0007C1 02r08r6C         [24] 1713 	ljmp	00250$
      0007C4                       1714 00369$:
                                   1715 ;	printf_large.c:350: OUTPUT_CHAR('0', p);
      0007C4 C0 00            [24] 1716 	push	ar0
      0007C6 A8*00            [24] 1717 	mov	r0,_spx
      0007C8 05*00            [12] 1718 	inc	_spx
      0007CA 05*00            [12] 1719 	inc	_spx
      0007CC EE               [12] 1720 	mov	a,r6
      0007CD F2               [24] 1721 	movx	@r0,a
      0007CE 08               [12] 1722 	inc	r0
      0007CF ED               [12] 1723 	mov	a,r5
      0007D0 F2               [24] 1724 	movx	@r0,a
      0007D1 D0 00            [24] 1725 	pop	ar0
      0007D3 75 82 30         [24] 1726 	mov	dpl,#0x30
      0007D6 12r00r00         [24] 1727 	lcall	__output_char
      0007D9 A8*00            [24] 1728 	mov	r0,_spx
      0007DB 18               [12] 1729 	dec	r0
      0007DC E2               [24] 1730 	movx	a,@r0
      0007DD FD               [12] 1731 	mov	r5,a
      0007DE 18               [12] 1732 	dec	r0
      0007DF E2               [24] 1733 	movx	a,@r0
      0007E0 FE               [12] 1734 	mov	r6,a
      0007E1 88*00            [24] 1735 	mov	_spx,r0
                                   1736 ;	printf_large.c:355: while (reqWidth-->minWidth)
      0007E3 80 D4            [24] 1737 	sjmp	00133$
      0007E5                       1738 00228$:
      0007E5 90r00rA9         [24] 1739 	mov	dptr,#_output_float_minWidth_1_63
      0007E8 E0               [24] 1740 	movx	a,@dptr
      0007E9 FE               [12] 1741 	mov	r6,a
      0007EA                       1742 00136$:
      0007EA 8F 04            [24] 1743 	mov	ar4,r7
      0007EC 1F               [12] 1744 	dec	r7
      0007ED C3               [12] 1745 	clr	c
      0007EE EE               [12] 1746 	mov	a,r6
      0007EF 9C               [12] 1747 	subb	a,r4
      0007F0 50 21            [24] 1748 	jnc	00251$
                                   1749 ;	printf_large.c:357: OUTPUT_CHAR(' ', p);
      0007F2 C0 00            [24] 1750 	push	ar0
      0007F4 A8*00            [24] 1751 	mov	r0,_spx
      0007F6 05*00            [12] 1752 	inc	_spx
      0007F8 05*00            [12] 1753 	inc	_spx
      0007FA EF               [12] 1754 	mov	a,r7
      0007FB F2               [24] 1755 	movx	@r0,a
      0007FC 08               [12] 1756 	inc	r0
      0007FD EE               [12] 1757 	mov	a,r6
      0007FE F2               [24] 1758 	movx	@r0,a
      0007FF D0 00            [24] 1759 	pop	ar0
      000801 75 82 20         [24] 1760 	mov	dpl,#0x20
      000804 12r00r00         [24] 1761 	lcall	__output_char
      000807 A8*00            [24] 1762 	mov	r0,_spx
      000809 18               [12] 1763 	dec	r0
      00080A E2               [24] 1764 	movx	a,@r0
      00080B FE               [12] 1765 	mov	r6,a
      00080C 18               [12] 1766 	dec	r0
      00080D E2               [24] 1767 	movx	a,@r0
      00080E FF               [12] 1768 	mov	r7,a
      00080F 88*00            [24] 1769 	mov	_spx,r0
      000811 80 D7            [24] 1770 	sjmp	00136$
      000813                       1771 00251$:
      000813 90r00r11         [24] 1772 	mov	dptr,#_output_float_PARM_2
      000816 EF               [12] 1773 	mov	a,r7
      000817 F0               [24] 1774 	movx	@dptr,a
                                   1775 ;	printf_large.c:359: if (negative)
      000818 90r00r9B         [24] 1776 	mov	dptr,#_output_float_negative_1_63
      00081B E0               [24] 1777 	movx	a,@dptr
      00081C 60 08            [24] 1778 	jz	00145$
                                   1779 ;	printf_large.c:361: OUTPUT_CHAR('-', p);
      00081E 75 82 2D         [24] 1780 	mov	dpl,#0x2d
      000821 12r00r00         [24] 1781 	lcall	__output_char
      000824 80 4B            [24] 1782 	sjmp	00160$
      000826                       1783 00145$:
                                   1784 ;	printf_large.c:363: else if (sign)
      000826 90r00r15         [24] 1785 	mov	dptr,#_output_float_PARM_6
      000829 E0               [24] 1786 	movx	a,@dptr
      00082A 60 08            [24] 1787 	jz	00142$
                                   1788 ;	printf_large.c:365: OUTPUT_CHAR('+', p);
      00082C 75 82 2B         [24] 1789 	mov	dpl,#0x2b
      00082F 12r00r00         [24] 1790 	lcall	__output_char
      000832 80 3D            [24] 1791 	sjmp	00160$
      000834                       1792 00142$:
                                   1793 ;	printf_large.c:367: else if (space)
      000834 90r00r16         [24] 1794 	mov	dptr,#_output_float_PARM_7
      000837 E0               [24] 1795 	movx	a,@dptr
      000838 60 37            [24] 1796 	jz	00160$
                                   1797 ;	printf_large.c:369: OUTPUT_CHAR(' ', p);
      00083A 75 82 20         [24] 1798 	mov	dpl,#0x20
      00083D 12r00r00         [24] 1799 	lcall	__output_char
      000840 80 2F            [24] 1800 	sjmp	00160$
      000842                       1801 00159$:
                                   1802 ;	printf_large.c:375: if (negative)
      000842 90r00r9B         [24] 1803 	mov	dptr,#_output_float_negative_1_63
      000845 E0               [24] 1804 	movx	a,@dptr
      000846 60 08            [24] 1805 	jz	00156$
                                   1806 ;	printf_large.c:377: OUTPUT_CHAR('-', p);
      000848 75 82 2D         [24] 1807 	mov	dpl,#0x2d
      00084B 12r00r00         [24] 1808 	lcall	__output_char
      00084E 80 21            [24] 1809 	sjmp	00160$
      000850                       1810 00156$:
                                   1811 ;	printf_large.c:379: else if (sign)
      000850 90r00r15         [24] 1812 	mov	dptr,#_output_float_PARM_6
      000853 E0               [24] 1813 	movx	a,@dptr
      000854 60 08            [24] 1814 	jz	00153$
                                   1815 ;	printf_large.c:381: OUTPUT_CHAR('+', p);
      000856 75 82 2B         [24] 1816 	mov	dpl,#0x2b
      000859 12r00r00         [24] 1817 	lcall	__output_char
      00085C 80 13            [24] 1818 	sjmp	00160$
      00085E                       1819 00153$:
                                   1820 ;	printf_large.c:383: else if (space)
      00085E 90r00r16         [24] 1821 	mov	dptr,#_output_float_PARM_7
      000861 E0               [24] 1822 	movx	a,@dptr
      000862 60 0D            [24] 1823 	jz	00160$
                                   1824 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      000864 75 82 20         [24] 1825 	mov	dpl,#0x20
      000867 12r00r00         [24] 1826 	lcall	__output_char
                                   1827 ;	printf_large.c:428: return;
                                   1828 ;	printf_large.c:385: OUTPUT_CHAR(' ', p);
      00086A 80 05            [24] 1829 	sjmp	00160$
      00086C                       1830 00250$:
      00086C 90r00r11         [24] 1831 	mov	dptr,#_output_float_PARM_2
      00086F ED               [12] 1832 	mov	a,r5
      000870 F0               [24] 1833 	movx	@dptr,a
      000871                       1834 00160$:
                                   1835 ;	printf_large.c:390: i=fpBI-1;
      000871 90r00rA8         [24] 1836 	mov	dptr,#_output_float_fpBI_1_63
      000874 E0               [24] 1837 	movx	a,@dptr
      000875 FF               [12] 1838 	mov	r7,a
      000876 14               [12] 1839 	dec	a
      000877 FE               [12] 1840 	mov	r6,a
                                   1841 ;	printf_large.c:391: do {
      000878                       1842 00162$:
                                   1843 ;	printf_large.c:392: OUTPUT_CHAR (fpBuffer[i], p);
      000878 EE               [12] 1844 	mov	a,r6
      000879 24r1B            [12] 1845 	add	a,#_output_float_fpBuffer_1_63
      00087B F5 82            [12] 1846 	mov	dpl,a
      00087D E4               [12] 1847 	clr	a
      00087E 34s00            [12] 1848 	addc	a,#(_output_float_fpBuffer_1_63 >> 8)
      000880 F5 83            [12] 1849 	mov	dph,a
      000882 E0               [24] 1850 	movx	a,@dptr
      000883 FD               [12] 1851 	mov	r5,a
      000884 C0 00            [24] 1852 	push	ar0
      000886 A8*00            [24] 1853 	mov	r0,_spx
      000888 05*00            [12] 1854 	inc	_spx
      00088A 05*00            [12] 1855 	inc	_spx
      00088C EF               [12] 1856 	mov	a,r7
      00088D F2               [24] 1857 	movx	@r0,a
      00088E 08               [12] 1858 	inc	r0
      00088F EE               [12] 1859 	mov	a,r6
      000890 F2               [24] 1860 	movx	@r0,a
      000891 D0 00            [24] 1861 	pop	ar0
      000893 8D 82            [24] 1862 	mov	dpl,r5
      000895 12r00r00         [24] 1863 	lcall	__output_char
      000898 A8*00            [24] 1864 	mov	r0,_spx
      00089A 18               [12] 1865 	dec	r0
      00089B E2               [24] 1866 	movx	a,@r0
      00089C FE               [12] 1867 	mov	r6,a
      00089D 18               [12] 1868 	dec	r0
      00089E E2               [24] 1869 	movx	a,@r0
      00089F FF               [12] 1870 	mov	r7,a
      0008A0 88*00            [24] 1871 	mov	_spx,r0
                                   1872 ;	printf_large.c:393: } while (i--);
      0008A2 8E 05            [24] 1873 	mov	ar5,r6
      0008A4 1E               [12] 1874 	dec	r6
      0008A5 ED               [12] 1875 	mov	a,r5
      0008A6 70 D0            [24] 1876 	jnz	00162$
                                   1877 ;	printf_large.c:396: if (reqDecimals)
      0008A8 90r00r12         [24] 1878 	mov	dptr,#_output_float_PARM_3
      0008AB E0               [24] 1879 	movx	a,@dptr
      0008AC FE               [12] 1880 	mov	r6,a
      0008AD E0               [24] 1881 	movx	a,@dptr
      0008AE 60 54            [24] 1882 	jz	00169$
                                   1883 ;	printf_large.c:398: OUTPUT_CHAR ('.', p);
      0008B0 C0 00            [24] 1884 	push	ar0
      0008B2 A8*00            [24] 1885 	mov	r0,_spx
      0008B4 05*00            [12] 1886 	inc	_spx
      0008B6 05*00            [12] 1887 	inc	_spx
      0008B8 EF               [12] 1888 	mov	a,r7
      0008B9 F2               [24] 1889 	movx	@r0,a
      0008BA 08               [12] 1890 	inc	r0
      0008BB EE               [12] 1891 	mov	a,r6
      0008BC F2               [24] 1892 	movx	@r0,a
      0008BD D0 00            [24] 1893 	pop	ar0
      0008BF 75 82 2E         [24] 1894 	mov	dpl,#0x2e
      0008C2 12r00r00         [24] 1895 	lcall	__output_char
      0008C5 A8*00            [24] 1896 	mov	r0,_spx
      0008C7 18               [12] 1897 	dec	r0
      0008C8 E2               [24] 1898 	movx	a,@r0
      0008C9 FE               [12] 1899 	mov	r6,a
      0008CA 18               [12] 1900 	dec	r0
      0008CB E2               [24] 1901 	movx	a,@r0
      0008CC FF               [12] 1902 	mov	r7,a
      0008CD 88*00            [24] 1903 	mov	_spx,r0
                                   1904 ;	printf_large.c:400: while (reqDecimals--)
      0008CF                       1905 00165$:
      0008CF 8E 05            [24] 1906 	mov	ar5,r6
      0008D1 1E               [12] 1907 	dec	r6
      0008D2 ED               [12] 1908 	mov	a,r5
      0008D3 60 2F            [24] 1909 	jz	00169$
                                   1910 ;	printf_large.c:402: OUTPUT_CHAR (fpBuffer[i++], p);
      0008D5 8F 05            [24] 1911 	mov	ar5,r7
      0008D7 0F               [12] 1912 	inc	r7
      0008D8 ED               [12] 1913 	mov	a,r5
      0008D9 24r1B            [12] 1914 	add	a,#_output_float_fpBuffer_1_63
      0008DB F5 82            [12] 1915 	mov	dpl,a
      0008DD E4               [12] 1916 	clr	a
      0008DE 34s00            [12] 1917 	addc	a,#(_output_float_fpBuffer_1_63 >> 8)
      0008E0 F5 83            [12] 1918 	mov	dph,a
      0008E2 E0               [24] 1919 	movx	a,@dptr
      0008E3 FD               [12] 1920 	mov	r5,a
      0008E4 C0 00            [24] 1921 	push	ar0
      0008E6 A8*00            [24] 1922 	mov	r0,_spx
      0008E8 05*00            [12] 1923 	inc	_spx
      0008EA 05*00            [12] 1924 	inc	_spx
      0008EC EF               [12] 1925 	mov	a,r7
      0008ED F2               [24] 1926 	movx	@r0,a
      0008EE 08               [12] 1927 	inc	r0
      0008EF EE               [12] 1928 	mov	a,r6
      0008F0 F2               [24] 1929 	movx	@r0,a
      0008F1 D0 00            [24] 1930 	pop	ar0
      0008F3 8D 82            [24] 1931 	mov	dpl,r5
      0008F5 12r00r00         [24] 1932 	lcall	__output_char
      0008F8 A8*00            [24] 1933 	mov	r0,_spx
      0008FA 18               [12] 1934 	dec	r0
      0008FB E2               [24] 1935 	movx	a,@r0
      0008FC FE               [12] 1936 	mov	r6,a
      0008FD 18               [12] 1937 	dec	r0
      0008FE E2               [24] 1938 	movx	a,@r0
      0008FF FF               [12] 1939 	mov	r7,a
      000900 88*00            [24] 1940 	mov	_spx,r0
      000902 80 CB            [24] 1941 	sjmp	00165$
      000904                       1942 00169$:
                                   1943 ;	printf_large.c:406: if (left && reqWidth>minWidth)
      000904 90r00r13         [24] 1944 	mov	dptr,#_output_float_PARM_4
      000907 E0               [24] 1945 	movx	a,@dptr
      000908 60 37            [24] 1946 	jz	00174$
      00090A 90r00r11         [24] 1947 	mov	dptr,#_output_float_PARM_2
      00090D E0               [24] 1948 	movx	a,@dptr
      00090E FF               [12] 1949 	mov	r7,a
      00090F 90r00rA9         [24] 1950 	mov	dptr,#_output_float_minWidth_1_63
      000912 E0               [24] 1951 	movx	a,@dptr
      000913 FE               [12] 1952 	mov	r6,a
      000914 C3               [12] 1953 	clr	c
      000915 9F               [12] 1954 	subb	a,r7
      000916 50 29            [24] 1955 	jnc	00174$
                                   1956 ;	printf_large.c:408: while (reqWidth-->minWidth)
      000918                       1957 00170$:
      000918 8F 05            [24] 1958 	mov	ar5,r7
      00091A 1F               [12] 1959 	dec	r7
      00091B C3               [12] 1960 	clr	c
      00091C EE               [12] 1961 	mov	a,r6
      00091D 9D               [12] 1962 	subb	a,r5
      00091E 50 21            [24] 1963 	jnc	00174$
                                   1964 ;	printf_large.c:410: OUTPUT_CHAR(' ', p);
      000920 C0 00            [24] 1965 	push	ar0
      000922 A8*00            [24] 1966 	mov	r0,_spx
      000924 05*00            [12] 1967 	inc	_spx
      000926 05*00            [12] 1968 	inc	_spx
      000928 EF               [12] 1969 	mov	a,r7
      000929 F2               [24] 1970 	movx	@r0,a
      00092A 08               [12] 1971 	inc	r0
      00092B EE               [12] 1972 	mov	a,r6
      00092C F2               [24] 1973 	movx	@r0,a
      00092D D0 00            [24] 1974 	pop	ar0
      00092F 75 82 20         [24] 1975 	mov	dpl,#0x20
      000932 12r00r00         [24] 1976 	lcall	__output_char
      000935 A8*00            [24] 1977 	mov	r0,_spx
      000937 18               [12] 1978 	dec	r0
      000938 E2               [24] 1979 	movx	a,@r0
      000939 FE               [12] 1980 	mov	r6,a
      00093A 18               [12] 1981 	dec	r0
      00093B E2               [24] 1982 	movx	a,@r0
      00093C FF               [12] 1983 	mov	r7,a
      00093D 88*00            [24] 1984 	mov	_spx,r0
      00093F 80 D7            [24] 1985 	sjmp	00170$
      000941                       1986 00174$:
                                   1987 ;	printf_large.c:414: if (exp != -128)
      000941 90r00rAA         [24] 1988 	mov	dptr,#_output_float_exp_1_63
      000944 E0               [24] 1989 	movx	a,@dptr
      000945 FF               [12] 1990 	mov	r7,a
      000946 BF 80 01         [24] 1991 	cjne	r7,#0x80,00383$
      000949 22               [24] 1992 	ret
      00094A                       1993 00383$:
                                   1994 ;	printf_large.c:416: OUTPUT_CHAR ('e', p);
      00094A C0 00            [24] 1995 	push	ar0
      00094C EF               [12] 1996 	mov	a,r7
      00094D A8*00            [24] 1997 	mov	r0,_spx
      00094F 05*00            [12] 1998 	inc	_spx
      000951 F2               [24] 1999 	movx	@r0,a
      000952 D0 00            [24] 2000 	pop	ar0
      000954 75 82 65         [24] 2001 	mov	dpl,#0x65
      000957 12r00r00         [24] 2002 	lcall	__output_char
      00095A A8*00            [24] 2003 	mov	r0,_spx
      00095C 18               [12] 2004 	dec	r0
      00095D E2               [24] 2005 	movx	a,@r0
      00095E FF               [12] 2006 	mov	r7,a
      00095F 15*00            [12] 2007 	dec	_spx
                                   2008 ;	printf_large.c:417: if (exp<0)
      000961 EF               [12] 2009 	mov	a,r7
      000962 30 E7 1E         [24] 2010 	jnb	acc.7,00177$
                                   2011 ;	printf_large.c:419: OUTPUT_CHAR ('-', p);
      000965 C0 00            [24] 2012 	push	ar0
      000967 EF               [12] 2013 	mov	a,r7
      000968 A8*00            [24] 2014 	mov	r0,_spx
      00096A 05*00            [12] 2015 	inc	_spx
      00096C F2               [24] 2016 	movx	@r0,a
      00096D D0 00            [24] 2017 	pop	ar0
      00096F 75 82 2D         [24] 2018 	mov	dpl,#0x2d
      000972 12r00r00         [24] 2019 	lcall	__output_char
      000975 A8*00            [24] 2020 	mov	r0,_spx
      000977 18               [12] 2021 	dec	r0
      000978 E2               [24] 2022 	movx	a,@r0
      000979 FF               [12] 2023 	mov	r7,a
      00097A 15*00            [12] 2024 	dec	_spx
                                   2025 ;	printf_large.c:420: exp = -exp;
      00097C 90r00rAA         [24] 2026 	mov	dptr,#_output_float_exp_1_63
      00097F C3               [12] 2027 	clr	c
      000980 E4               [12] 2028 	clr	a
      000981 9F               [12] 2029 	subb	a,r7
      000982 F0               [24] 2030 	movx	@dptr,a
      000983                       2031 00177$:
                                   2032 ;	printf_large.c:422: OUTPUT_CHAR ('0'+exp/10, p);
      000983 90r00rAA         [24] 2033 	mov	dptr,#_output_float_exp_1_63
      000986 E0               [24] 2034 	movx	a,@dptr
      000987 FF               [12] 2035 	mov	r7,a
      000988 C2 D5            [12] 2036 	clr	F0
      00098A 75 F0 0A         [24] 2037 	mov	b,#0x0a
      00098D EF               [12] 2038 	mov	a,r7
      00098E 30 E7 04         [24] 2039 	jnb	acc.7,00385$
      000991 B2 D5            [12] 2040 	cpl	F0
      000993 F4               [12] 2041 	cpl	a
      000994 04               [12] 2042 	inc	a
      000995                       2043 00385$:
      000995 84               [48] 2044 	div	ab
      000996 30 D5 02         [24] 2045 	jnb	F0,00386$
      000999 F4               [12] 2046 	cpl	a
      00099A 04               [12] 2047 	inc	a
      00099B                       2048 00386$:
      00099B 24 30            [12] 2049 	add	a,#0x30
      00099D FE               [12] 2050 	mov	r6,a
      00099E C0 00            [24] 2051 	push	ar0
      0009A0 EF               [12] 2052 	mov	a,r7
      0009A1 A8*00            [24] 2053 	mov	r0,_spx
      0009A3 05*00            [12] 2054 	inc	_spx
      0009A5 F2               [24] 2055 	movx	@r0,a
      0009A6 D0 00            [24] 2056 	pop	ar0
      0009A8 8E 82            [24] 2057 	mov	dpl,r6
      0009AA 12r00r00         [24] 2058 	lcall	__output_char
      0009AD A8*00            [24] 2059 	mov	r0,_spx
      0009AF 18               [12] 2060 	dec	r0
      0009B0 E2               [24] 2061 	movx	a,@r0
      0009B1 FF               [12] 2062 	mov	r7,a
      0009B2 15*00            [12] 2063 	dec	_spx
                                   2064 ;	printf_large.c:423: OUTPUT_CHAR ('0'+exp%10, p);
      0009B4 75 F0 0A         [24] 2065 	mov	b,#0x0a
      0009B7 EF               [12] 2066 	mov	a,r7
      0009B8 C2 D5            [12] 2067 	clr	F0
      0009BA 30 E7 04         [24] 2068 	jnb	acc.7,00387$
      0009BD D2 D5            [12] 2069 	setb	F0
      0009BF F4               [12] 2070 	cpl	a
      0009C0 04               [12] 2071 	inc	a
      0009C1                       2072 00387$:
      0009C1 84               [48] 2073 	div	ab
      0009C2 E5 F0            [12] 2074 	mov	a,b
      0009C4 30 D5 02         [24] 2075 	jnb	F0,00388$
      0009C7 F4               [12] 2076 	cpl	a
      0009C8 04               [12] 2077 	inc	a
      0009C9                       2078 00388$:
      0009C9 24 30            [12] 2079 	add	a,#0x30
      0009CB F5 82            [12] 2080 	mov	dpl,a
      0009CD 12r00r00         [24] 2081 	lcall	__output_char
                                   2082 ;	printf_large.c:428: return;
      0009D0 22               [24] 2083 	ret
                                   2084 ;------------------------------------------------------------
                                   2085 ;Allocation info for local variables in function '_print_format'
                                   2086 ;------------------------------------------------------------
                                   2087 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                                   2088 ;sloc1                     Allocated with name '__print_format_sloc1_1_0'
                                   2089 ;sloc2                     Allocated with name '__print_format_sloc2_1_0'
                                   2090 ;sloc3                     Allocated with name '__print_format_sloc3_1_0'
                                   2091 ;sloc4                     Allocated with name '__print_format_sloc4_1_0'
                                   2092 ;sloc5                     Allocated with name '__print_format_sloc5_1_0'
                                   2093 ;pvoid                     Allocated with name '__print_format_PARM_2'
                                   2094 ;format                    Allocated with name '__print_format_PARM_3'
                                   2095 ;ap                        Allocated with name '__print_format_PARM_4'
                                   2096 ;pfn                       Allocated with name '__print_format_pfn_1_99'
                                   2097 ;left_justify              Allocated with name '__print_format_left_justify_1_100'
                                   2098 ;zero_padding              Allocated with name '__print_format_zero_padding_1_100'
                                   2099 ;prefix_sign               Allocated with name '__print_format_prefix_sign_1_100'
                                   2100 ;prefix_space              Allocated with name '__print_format_prefix_space_1_100'
                                   2101 ;signed_argument           Allocated with name '__print_format_signed_argument_1_100'
                                   2102 ;char_argument             Allocated with name '__print_format_char_argument_1_100'
                                   2103 ;long_argument             Allocated with name '__print_format_long_argument_1_100'
                                   2104 ;float_argument            Allocated with name '__print_format_float_argument_1_100'
                                   2105 ;lsd                       Allocated with name '__print_format_lsd_1_100'
                                   2106 ;radix                     Allocated with name '__print_format_radix_1_100'
                                   2107 ;width                     Allocated with name '__print_format_width_1_100'
                                   2108 ;decimals                  Allocated with name '__print_format_decimals_1_100'
                                   2109 ;length                    Allocated with name '__print_format_length_1_100'
                                   2110 ;c                         Allocated with name '__print_format_c_1_100'
                                   2111 ;memtype                   Allocated with name '__print_format_memtype_5_117'
                                   2112 ;store                     Allocated with name '__print_format_store_4_120'
                                   2113 ;pstore                    Allocated with name '__print_format_pstore_4_120'
                                   2114 ;------------------------------------------------------------
                                   2115 ;	printf_large.c:434: _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                                   2116 ;	-----------------------------------------
                                   2117 ;	 function _print_format
                                   2118 ;	-----------------------------------------
      0009D1                       2119 __print_format:
      0009D1 AF 83            [24] 2120 	mov	r7,dph
      0009D3 E5 82            [12] 2121 	mov	a,dpl
      0009D5 90r00rB2         [24] 2122 	mov	dptr,#__print_format_pfn_1_99
      0009D8 F0               [24] 2123 	movx	@dptr,a
      0009D9 EF               [12] 2124 	mov	a,r7
      0009DA A3               [24] 2125 	inc	dptr
      0009DB F0               [24] 2126 	movx	@dptr,a
                                   2127 ;	printf_large.c:461: output_char = pfn;
      0009DC 90r00rB2         [24] 2128 	mov	dptr,#__print_format_pfn_1_99
      0009DF E0               [24] 2129 	movx	a,@dptr
      0009E0 FE               [12] 2130 	mov	r6,a
      0009E1 A3               [24] 2131 	inc	dptr
      0009E2 E0               [24] 2132 	movx	a,@dptr
      0009E3 FF               [12] 2133 	mov	r7,a
      0009E4 90r00r01         [24] 2134 	mov	dptr,#_output_char
      0009E7 EE               [12] 2135 	mov	a,r6
      0009E8 F0               [24] 2136 	movx	@dptr,a
      0009E9 EF               [12] 2137 	mov	a,r7
      0009EA A3               [24] 2138 	inc	dptr
      0009EB F0               [24] 2139 	movx	@dptr,a
                                   2140 ;	printf_large.c:462: p = pvoid;
      0009EC 90r00rAB         [24] 2141 	mov	dptr,#__print_format_PARM_2
      0009EF E0               [24] 2142 	movx	a,@dptr
      0009F0 FD               [12] 2143 	mov	r5,a
      0009F1 A3               [24] 2144 	inc	dptr
      0009F2 E0               [24] 2145 	movx	a,@dptr
      0009F3 FE               [12] 2146 	mov	r6,a
      0009F4 A3               [24] 2147 	inc	dptr
      0009F5 E0               [24] 2148 	movx	a,@dptr
      0009F6 FF               [12] 2149 	mov	r7,a
      0009F7 90r00r03         [24] 2150 	mov	dptr,#_p
      0009FA ED               [12] 2151 	mov	a,r5
      0009FB F0               [24] 2152 	movx	@dptr,a
      0009FC EE               [12] 2153 	mov	a,r6
      0009FD A3               [24] 2154 	inc	dptr
      0009FE F0               [24] 2155 	movx	@dptr,a
      0009FF EF               [12] 2156 	mov	a,r7
      000A00 A3               [24] 2157 	inc	dptr
      000A01 F0               [24] 2158 	movx	@dptr,a
                                   2159 ;	printf_large.c:466: charsOutputted = 0;
      000A02 90r00r0B         [24] 2160 	mov	dptr,#_charsOutputted
      000A05 E4               [12] 2161 	clr	a
      000A06 F0               [24] 2162 	movx	@dptr,a
      000A07 A3               [24] 2163 	inc	dptr
      000A08 F0               [24] 2164 	movx	@dptr,a
                                   2165 ;	printf_large.c:475: while( c=*format++ )
      000A09                       2166 00240$:
      000A09 90r00rAE         [24] 2167 	mov	dptr,#__print_format_PARM_3
      000A0C E0               [24] 2168 	movx	a,@dptr
      000A0D FD               [12] 2169 	mov	r5,a
      000A0E A3               [24] 2170 	inc	dptr
      000A0F E0               [24] 2171 	movx	a,@dptr
      000A10 FE               [12] 2172 	mov	r6,a
      000A11 A3               [24] 2173 	inc	dptr
      000A12 E0               [24] 2174 	movx	a,@dptr
      000A13 FF               [12] 2175 	mov	r7,a
      000A14 8D 82            [24] 2176 	mov	dpl,r5
      000A16 8E 83            [24] 2177 	mov	dph,r6
      000A18 8F F0            [24] 2178 	mov	b,r7
      000A1A 12r00r00         [24] 2179 	lcall	__gptrget
      000A1D FC               [12] 2180 	mov	r4,a
      000A1E 90r00rAE         [24] 2181 	mov	dptr,#__print_format_PARM_3
      000A21 74 01            [12] 2182 	mov	a,#0x01
      000A23 2D               [12] 2183 	add	a,r5
      000A24 F0               [24] 2184 	movx	@dptr,a
      000A25 E4               [12] 2185 	clr	a
      000A26 3E               [12] 2186 	addc	a,r6
      000A27 A3               [24] 2187 	inc	dptr
      000A28 F0               [24] 2188 	movx	@dptr,a
      000A29 EF               [12] 2189 	mov	a,r7
      000A2A A3               [24] 2190 	inc	dptr
      000A2B F0               [24] 2191 	movx	@dptr,a
      000A2C EC               [12] 2192 	mov	a,r4
      000A2D 70 03            [24] 2193 	jnz	00491$
      000A2F 02r12r3E         [24] 2194 	ljmp	00242$
      000A32                       2195 00491$:
                                   2196 ;	printf_large.c:477: if ( c=='%' )
      000A32 BC 25 02         [24] 2197 	cjne	r4,#0x25,00492$
      000A35 80 03            [24] 2198 	sjmp	00493$
      000A37                       2199 00492$:
      000A37 02r12r36         [24] 2200 	ljmp	00238$
      000A3A                       2201 00493$:
                                   2202 ;	printf_large.c:479: left_justify    = 0;
      000A3A 90r00rB4         [24] 2203 	mov	dptr,#__print_format_left_justify_1_100
      000A3D E4               [12] 2204 	clr	a
      000A3E F0               [24] 2205 	movx	@dptr,a
                                   2206 ;	printf_large.c:480: zero_padding    = 0;
      000A3F 90r00rB5         [24] 2207 	mov	dptr,#__print_format_zero_padding_1_100
      000A42 F0               [24] 2208 	movx	@dptr,a
                                   2209 ;	printf_large.c:481: prefix_sign     = 0;
      000A43 90r00rB6         [24] 2210 	mov	dptr,#__print_format_prefix_sign_1_100
      000A46 F0               [24] 2211 	movx	@dptr,a
                                   2212 ;	printf_large.c:482: prefix_space    = 0;
      000A47 90r00rB7         [24] 2213 	mov	dptr,#__print_format_prefix_space_1_100
      000A4A F0               [24] 2214 	movx	@dptr,a
                                   2215 ;	printf_large.c:483: signed_argument = 0;
      000A4B 90r00rB8         [24] 2216 	mov	dptr,#__print_format_signed_argument_1_100
      000A4E F0               [24] 2217 	movx	@dptr,a
                                   2218 ;	printf_large.c:484: char_argument   = 0;
      000A4F 90r00rB9         [24] 2219 	mov	dptr,#__print_format_char_argument_1_100
      000A52 F0               [24] 2220 	movx	@dptr,a
                                   2221 ;	printf_large.c:485: long_argument   = 0;
      000A53 90r00rBA         [24] 2222 	mov	dptr,#__print_format_long_argument_1_100
      000A56 F0               [24] 2223 	movx	@dptr,a
                                   2224 ;	printf_large.c:486: float_argument  = 0;
      000A57 90r00rBB         [24] 2225 	mov	dptr,#__print_format_float_argument_1_100
      000A5A F0               [24] 2226 	movx	@dptr,a
                                   2227 ;	printf_large.c:487: radix           = 0;
      000A5B 90r00rBD         [24] 2228 	mov	dptr,#__print_format_radix_1_100
      000A5E F0               [24] 2229 	movx	@dptr,a
                                   2230 ;	printf_large.c:488: width           = 0;
      000A5F 90r00rBE         [24] 2231 	mov	dptr,#__print_format_width_1_100
      000A62 F0               [24] 2232 	movx	@dptr,a
                                   2233 ;	printf_large.c:489: decimals        = -1;
      000A63 90r00rBF         [24] 2234 	mov	dptr,#__print_format_decimals_1_100
      000A66 14               [12] 2235 	dec	a
      000A67 F0               [24] 2236 	movx	@dptr,a
                                   2237 ;	printf_large.c:491: get_conversion_spec:
      000A68 90r00rAE         [24] 2238 	mov	dptr,#__print_format_PARM_3
      000A6B E0               [24] 2239 	movx	a,@dptr
      000A6C FD               [12] 2240 	mov	r5,a
      000A6D A3               [24] 2241 	inc	dptr
      000A6E E0               [24] 2242 	movx	a,@dptr
      000A6F FE               [12] 2243 	mov	r6,a
      000A70 A3               [24] 2244 	inc	dptr
      000A71 E0               [24] 2245 	movx	a,@dptr
      000A72 FF               [12] 2246 	mov	r7,a
      000A73                       2247 00101$:
                                   2248 ;	printf_large.c:493: c = *format++;
      000A73 8D 82            [24] 2249 	mov	dpl,r5
      000A75 8E 83            [24] 2250 	mov	dph,r6
      000A77 8F F0            [24] 2251 	mov	b,r7
      000A79 12r00r00         [24] 2252 	lcall	__gptrget
      000A7C FB               [12] 2253 	mov	r3,a
      000A7D A3               [24] 2254 	inc	dptr
      000A7E AD 82            [24] 2255 	mov	r5,dpl
      000A80 AE 83            [24] 2256 	mov	r6,dph
      000A82 90r00rAE         [24] 2257 	mov	dptr,#__print_format_PARM_3
      000A85 ED               [12] 2258 	mov	a,r5
      000A86 F0               [24] 2259 	movx	@dptr,a
      000A87 EE               [12] 2260 	mov	a,r6
      000A88 A3               [24] 2261 	inc	dptr
      000A89 F0               [24] 2262 	movx	@dptr,a
      000A8A EF               [12] 2263 	mov	a,r7
      000A8B A3               [24] 2264 	inc	dptr
      000A8C F0               [24] 2265 	movx	@dptr,a
      000A8D 90r00rC1         [24] 2266 	mov	dptr,#__print_format_c_1_100
      000A90 EB               [12] 2267 	mov	a,r3
      000A91 F0               [24] 2268 	movx	@dptr,a
                                   2269 ;	printf_large.c:495: if (c=='%')
      000A92 BB 25 08         [24] 2270 	cjne	r3,#0x25,00103$
                                   2271 ;	printf_large.c:497: OUTPUT_CHAR(c, p);
      000A95 8B 82            [24] 2272 	mov	dpl,r3
      000A97 12r00r00         [24] 2273 	lcall	__output_char
                                   2274 ;	printf_large.c:498: continue;
      000A9A 02r0Ar09         [24] 2275 	ljmp	00240$
      000A9D                       2276 00103$:
                                   2277 ;	printf_large.c:501: if (isdigit(c))
      000A9D BB 30 00         [24] 2278 	cjne	r3,#0x30,00496$
      000AA0                       2279 00496$:
      000AA0 40 3F            [24] 2280 	jc	00110$
      000AA2 EB               [12] 2281 	mov	a,r3
      000AA3 24 C6            [12] 2282 	add	a,#0xff - 0x39
      000AA5 40 3A            [24] 2283 	jc	00110$
                                   2284 ;	printf_large.c:503: if (decimals==-1)
      000AA7 90r00rBF         [24] 2285 	mov	dptr,#__print_format_decimals_1_100
      000AAA E0               [24] 2286 	movx	a,@dptr
      000AAB FA               [12] 2287 	mov	r2,a
      000AAC BA FF 23         [24] 2288 	cjne	r2,#0xff,00107$
                                   2289 ;	printf_large.c:505: width = 10*width + c - '0';
      000AAF C0 05            [24] 2290 	push	ar5
      000AB1 C0 06            [24] 2291 	push	ar6
      000AB3 C0 07            [24] 2292 	push	ar7
      000AB5 90r00rBE         [24] 2293 	mov	dptr,#__print_format_width_1_100
      000AB8 E0               [24] 2294 	movx	a,@dptr
      000AB9 75 F0 0A         [24] 2295 	mov	b,#0x0a
      000ABC A4               [48] 2296 	mul	ab
      000ABD 2B               [12] 2297 	add	a,r3
      000ABE 24 D0            [12] 2298 	add	a,#0xd0
      000AC0 F0               [24] 2299 	movx	@dptr,a
                                   2300 ;	printf_large.c:506: if (width == 0)
      000AC1 D0 07            [24] 2301 	pop	ar7
      000AC3 D0 06            [24] 2302 	pop	ar6
      000AC5 D0 05            [24] 2303 	pop	ar5
      000AC7 E0               [24] 2304 	movx	a,@dptr
      000AC8 70 A9            [24] 2305 	jnz	00101$
                                   2306 ;	printf_large.c:509: zero_padding = 1;
      000ACA 90r00rB5         [24] 2307 	mov	dptr,#__print_format_zero_padding_1_100
      000ACD 74 01            [12] 2308 	mov	a,#0x01
      000ACF F0               [24] 2309 	movx	@dptr,a
      000AD0 80 A1            [24] 2310 	sjmp	00101$
      000AD2                       2311 00107$:
                                   2312 ;	printf_large.c:514: decimals = 10*decimals + c - '0';
      000AD2 EA               [12] 2313 	mov	a,r2
      000AD3 75 F0 0A         [24] 2314 	mov	b,#0x0a
      000AD6 A4               [48] 2315 	mul	ab
      000AD7 FA               [12] 2316 	mov	r2,a
      000AD8 2B               [12] 2317 	add	a,r3
      000AD9 24 D0            [12] 2318 	add	a,#0xd0
      000ADB 90r00rBF         [24] 2319 	mov	dptr,#__print_format_decimals_1_100
      000ADE F0               [24] 2320 	movx	@dptr,a
                                   2321 ;	printf_large.c:516: goto get_conversion_spec;
      000ADF 80 92            [24] 2322 	sjmp	00101$
      000AE1                       2323 00110$:
                                   2324 ;	printf_large.c:519: if (c=='.')
      000AE1 90r00rC1         [24] 2325 	mov	dptr,#__print_format_c_1_100
      000AE4 E0               [24] 2326 	movx	a,@dptr
      000AE5 FB               [12] 2327 	mov	r3,a
      000AE6 BB 2E 15         [24] 2328 	cjne	r3,#0x2e,00115$
                                   2329 ;	printf_large.c:521: if (decimals==-1)
      000AE9 90r00rBF         [24] 2330 	mov	dptr,#__print_format_decimals_1_100
      000AEC E0               [24] 2331 	movx	a,@dptr
      000AED FA               [12] 2332 	mov	r2,a
      000AEE BA FF 02         [24] 2333 	cjne	r2,#0xff,00504$
      000AF1 80 03            [24] 2334 	sjmp	00505$
      000AF3                       2335 00504$:
      000AF3 02r0Ar73         [24] 2336 	ljmp	00101$
      000AF6                       2337 00505$:
                                   2338 ;	printf_large.c:522: decimals=0;
      000AF6 90r00rBF         [24] 2339 	mov	dptr,#__print_format_decimals_1_100
      000AF9 E4               [12] 2340 	clr	a
      000AFA F0               [24] 2341 	movx	@dptr,a
                                   2342 ;	printf_large.c:525: goto get_conversion_spec;
      000AFB 02r0Ar73         [24] 2343 	ljmp	00101$
      000AFE                       2344 00115$:
                                   2345 ;	printf_large.c:528: if (islower(c))
      000AFE BB 61 00         [24] 2346 	cjne	r3,#0x61,00506$
      000B01                       2347 00506$:
      000B01 40 14            [24] 2348 	jc	00117$
      000B03 EB               [12] 2349 	mov	a,r3
      000B04 24 85            [12] 2350 	add	a,#0xff - 0x7a
      000B06 40 0F            [24] 2351 	jc	00117$
                                   2352 ;	printf_large.c:530: c = toupper(c);
      000B08 90r00rC1         [24] 2353 	mov	dptr,#__print_format_c_1_100
      000B0B 74 DF            [12] 2354 	mov	a,#0xdf
      000B0D 5B               [12] 2355 	anl	a,r3
      000B0E F0               [24] 2356 	movx	@dptr,a
                                   2357 ;	printf_large.c:531: lower_case = 1;
      000B0F 90r00r00         [24] 2358 	mov	dptr,#_lower_case
      000B12 74 01            [12] 2359 	mov	a,#0x01
      000B14 F0               [24] 2360 	movx	@dptr,a
      000B15 80 05            [24] 2361 	sjmp	00118$
      000B17                       2362 00117$:
                                   2363 ;	printf_large.c:534: lower_case = 0;
      000B17 90r00r00         [24] 2364 	mov	dptr,#_lower_case
      000B1A E4               [12] 2365 	clr	a
      000B1B F0               [24] 2366 	movx	@dptr,a
      000B1C                       2367 00118$:
                                   2368 ;	printf_large.c:536: switch( c )
      000B1C 90r00rC1         [24] 2369 	mov	dptr,#__print_format_c_1_100
      000B1F E0               [24] 2370 	movx	a,@dptr
      000B20 FB               [12] 2371 	mov	r3,a
      000B21 BB 20 02         [24] 2372 	cjne	r3,#0x20,00509$
      000B24 80 77            [24] 2373 	sjmp	00122$
      000B26                       2374 00509$:
      000B26 BB 2B 02         [24] 2375 	cjne	r3,#0x2b,00510$
      000B29 80 69            [24] 2376 	sjmp	00121$
      000B2B                       2377 00510$:
      000B2B BB 2D 02         [24] 2378 	cjne	r3,#0x2d,00511$
      000B2E 80 5B            [24] 2379 	sjmp	00120$
      000B30                       2380 00511$:
      000B30 BB 42 02         [24] 2381 	cjne	r3,#0x42,00512$
      000B33 80 71            [24] 2382 	sjmp	00123$
      000B35                       2383 00512$:
      000B35 BB 43 03         [24] 2384 	cjne	r3,#0x43,00513$
      000B38 02r0BrB8         [24] 2385 	ljmp	00129$
      000B3B                       2386 00513$:
      000B3B BB 44 03         [24] 2387 	cjne	r3,#0x44,00514$
      000B3E 02r0DrF5         [24] 2388 	ljmp	00166$
      000B41                       2389 00514$:
      000B41 BB 46 03         [24] 2390 	cjne	r3,#0x46,00515$
      000B44 02r0Er1B         [24] 2391 	ljmp	00170$
      000B47                       2392 00515$:
      000B47 BB 48 03         [24] 2393 	cjne	r3,#0x48,00516$
      000B4A 02r0Ar73         [24] 2394 	ljmp	00101$
      000B4D                       2395 00516$:
      000B4D BB 49 03         [24] 2396 	cjne	r3,#0x49,00517$
      000B50 02r0DrF5         [24] 2397 	ljmp	00166$
      000B53                       2398 00517$:
      000B53 BB 4A 03         [24] 2399 	cjne	r3,#0x4a,00518$
      000B56 02r0Ar73         [24] 2400 	ljmp	00101$
      000B59                       2401 00518$:
      000B59 BB 4C 02         [24] 2402 	cjne	r3,#0x4c,00519$
      000B5C 80 51            [24] 2403 	sjmp	00128$
      000B5E                       2404 00519$:
      000B5E BB 4F 03         [24] 2405 	cjne	r3,#0x4f,00520$
      000B61 02r0Er03         [24] 2406 	ljmp	00167$
      000B64                       2407 00520$:
      000B64 BB 50 03         [24] 2408 	cjne	r3,#0x50,00521$
      000B67 02r0Dr24         [24] 2409 	ljmp	00152$
      000B6A                       2410 00521$:
      000B6A BB 53 03         [24] 2411 	cjne	r3,#0x53,00522$
      000B6D 02r0BrEF         [24] 2412 	ljmp	00133$
      000B70                       2413 00522$:
      000B70 BB 54 03         [24] 2414 	cjne	r3,#0x54,00523$
      000B73 02r0Ar73         [24] 2415 	ljmp	00101$
      000B76                       2416 00523$:
      000B76 BB 55 03         [24] 2417 	cjne	r3,#0x55,00524$
      000B79 02r0Er0B         [24] 2418 	ljmp	00168$
      000B7C                       2419 00524$:
      000B7C BB 58 03         [24] 2420 	cjne	r3,#0x58,00525$
      000B7F 02r0Er13         [24] 2421 	ljmp	00169$
      000B82                       2422 00525$:
      000B82 BB 5A 03         [24] 2423 	cjne	r3,#0x5a,00526$
      000B85 02r0Ar73         [24] 2424 	ljmp	00101$
      000B88                       2425 00526$:
      000B88 02r0Er23         [24] 2426 	ljmp	00171$
                                   2427 ;	printf_large.c:538: case '-':
      000B8B                       2428 00120$:
                                   2429 ;	printf_large.c:539: left_justify = 1;
      000B8B 90r00rB4         [24] 2430 	mov	dptr,#__print_format_left_justify_1_100
      000B8E 74 01            [12] 2431 	mov	a,#0x01
      000B90 F0               [24] 2432 	movx	@dptr,a
                                   2433 ;	printf_large.c:540: goto get_conversion_spec;
      000B91 02r0Ar73         [24] 2434 	ljmp	00101$
                                   2435 ;	printf_large.c:541: case '+':
      000B94                       2436 00121$:
                                   2437 ;	printf_large.c:542: prefix_sign = 1;
      000B94 90r00rB6         [24] 2438 	mov	dptr,#__print_format_prefix_sign_1_100
      000B97 74 01            [12] 2439 	mov	a,#0x01
      000B99 F0               [24] 2440 	movx	@dptr,a
                                   2441 ;	printf_large.c:543: goto get_conversion_spec;
      000B9A 02r0Ar73         [24] 2442 	ljmp	00101$
                                   2443 ;	printf_large.c:544: case ' ':
      000B9D                       2444 00122$:
                                   2445 ;	printf_large.c:545: prefix_space = 1;
      000B9D 90r00rB7         [24] 2446 	mov	dptr,#__print_format_prefix_space_1_100
      000BA0 74 01            [12] 2447 	mov	a,#0x01
      000BA2 F0               [24] 2448 	movx	@dptr,a
                                   2449 ;	printf_large.c:546: goto get_conversion_spec;
      000BA3 02r0Ar73         [24] 2450 	ljmp	00101$
                                   2451 ;	printf_large.c:547: case 'B': /* byte */
      000BA6                       2452 00123$:
                                   2453 ;	printf_large.c:548: char_argument = 1;
      000BA6 90r00rB9         [24] 2454 	mov	dptr,#__print_format_char_argument_1_100
      000BA9 74 01            [12] 2455 	mov	a,#0x01
      000BAB F0               [24] 2456 	movx	@dptr,a
                                   2457 ;	printf_large.c:549: goto get_conversion_spec;
      000BAC 02r0Ar73         [24] 2458 	ljmp	00101$
                                   2459 ;	printf_large.c:556: case 'L': /* long */
      000BAF                       2460 00128$:
                                   2461 ;	printf_large.c:557: long_argument = 1;
      000BAF 90r00rBA         [24] 2462 	mov	dptr,#__print_format_long_argument_1_100
      000BB2 74 01            [12] 2463 	mov	a,#0x01
      000BB4 F0               [24] 2464 	movx	@dptr,a
                                   2465 ;	printf_large.c:558: goto get_conversion_spec;
      000BB5 02r0Ar73         [24] 2466 	ljmp	00101$
                                   2467 ;	printf_large.c:560: case 'C':
      000BB8                       2468 00129$:
                                   2469 ;	printf_large.c:561: if( char_argument )
      000BB8 90r00rB9         [24] 2470 	mov	dptr,#__print_format_char_argument_1_100
      000BBB E0               [24] 2471 	movx	a,@dptr
      000BBC 60 0F            [24] 2472 	jz	00131$
                                   2473 ;	printf_large.c:562: c = va_arg(ap,char);
      000BBE 90r00rB1         [24] 2474 	mov	dptr,#__print_format_PARM_4
      000BC1 E0               [24] 2475 	movx	a,@dptr
      000BC2 FF               [12] 2476 	mov	r7,a
      000BC3 14               [12] 2477 	dec	a
      000BC4 F9               [12] 2478 	mov	r1,a
      000BC5 F0               [24] 2479 	movx	@dptr,a
      000BC6 90r00rC1         [24] 2480 	mov	dptr,#__print_format_c_1_100
      000BC9 E3               [24] 2481 	movx	a,@r1
      000BCA F0               [24] 2482 	movx	@dptr,a
      000BCB 80 16            [24] 2483 	sjmp	00132$
      000BCD                       2484 00131$:
                                   2485 ;	printf_large.c:564: c = va_arg(ap,int);
      000BCD 90r00rB1         [24] 2486 	mov	dptr,#__print_format_PARM_4
      000BD0 E0               [24] 2487 	movx	a,@dptr
      000BD1 FF               [12] 2488 	mov	r7,a
      000BD2 1F               [12] 2489 	dec	r7
      000BD3 1F               [12] 2490 	dec	r7
      000BD4 EF               [12] 2491 	mov	a,r7
      000BD5 F0               [24] 2492 	movx	@dptr,a
      000BD6 8F 01            [24] 2493 	mov	ar1,r7
      000BD8 E3               [24] 2494 	movx	a,@r1
      000BD9 FE               [12] 2495 	mov	r6,a
      000BDA 09               [12] 2496 	inc	r1
      000BDB E3               [24] 2497 	movx	a,@r1
      000BDC FF               [12] 2498 	mov	r7,a
      000BDD 19               [12] 2499 	dec	r1
      000BDE 90r00rC1         [24] 2500 	mov	dptr,#__print_format_c_1_100
      000BE1 EE               [12] 2501 	mov	a,r6
      000BE2 F0               [24] 2502 	movx	@dptr,a
      000BE3                       2503 00132$:
                                   2504 ;	printf_large.c:565: OUTPUT_CHAR( c, p );
      000BE3 90r00rC1         [24] 2505 	mov	dptr,#__print_format_c_1_100
      000BE6 E0               [24] 2506 	movx	a,@dptr
      000BE7 F5 82            [12] 2507 	mov	dpl,a
      000BE9 12r00r00         [24] 2508 	lcall	__output_char
                                   2509 ;	printf_large.c:566: break;
      000BEC 02r0Er2F         [24] 2510 	ljmp	00172$
                                   2511 ;	printf_large.c:568: case 'S':
      000BEF                       2512 00133$:
                                   2513 ;	printf_large.c:569: PTR = va_arg(ap,ptr_t);
      000BEF 90r00rB1         [24] 2514 	mov	dptr,#__print_format_PARM_4
      000BF2 E0               [24] 2515 	movx	a,@dptr
      000BF3 FF               [12] 2516 	mov	r7,a
      000BF4 1F               [12] 2517 	dec	r7
      000BF5 1F               [12] 2518 	dec	r7
      000BF6 1F               [12] 2519 	dec	r7
      000BF7 EF               [12] 2520 	mov	a,r7
      000BF8 F0               [24] 2521 	movx	@dptr,a
      000BF9 8F 01            [24] 2522 	mov	ar1,r7
      000BFB E3               [24] 2523 	movx	a,@r1
      000BFC FD               [12] 2524 	mov	r5,a
      000BFD 09               [12] 2525 	inc	r1
      000BFE E3               [24] 2526 	movx	a,@r1
      000BFF FE               [12] 2527 	mov	r6,a
      000C00 09               [12] 2528 	inc	r1
      000C01 E3               [24] 2529 	movx	a,@r1
      000C02 FF               [12] 2530 	mov	r7,a
      000C03 19               [12] 2531 	dec	r1
      000C04 19               [12] 2532 	dec	r1
      000C05 90r00r06         [24] 2533 	mov	dptr,#_value
      000C08 ED               [12] 2534 	mov	a,r5
      000C09 F0               [24] 2535 	movx	@dptr,a
      000C0A EE               [12] 2536 	mov	a,r6
      000C0B A3               [24] 2537 	inc	dptr
      000C0C F0               [24] 2538 	movx	@dptr,a
      000C0D EF               [12] 2539 	mov	a,r7
      000C0E A3               [24] 2540 	inc	dptr
      000C0F F0               [24] 2541 	movx	@dptr,a
                                   2542 ;	printf_large.c:582: length = strlen(PTR);
      000C10 8D 82            [24] 2543 	mov	dpl,r5
      000C12 8E 83            [24] 2544 	mov	dph,r6
      000C14 8F F0            [24] 2545 	mov	b,r7
      000C16 12r00r00         [24] 2546 	lcall	_strlen
      000C19 AE 82            [24] 2547 	mov	r6,dpl
                                   2548 ;	printf_large.c:584: if ( decimals == -1 )
      000C1B 90r00rBF         [24] 2549 	mov	dptr,#__print_format_decimals_1_100
      000C1E E0               [24] 2550 	movx	a,@dptr
      000C1F FF               [12] 2551 	mov	r7,a
      000C20 BF FF 05         [24] 2552 	cjne	r7,#0xff,00135$
                                   2553 ;	printf_large.c:586: decimals = length;
      000C23 90r00rBF         [24] 2554 	mov	dptr,#__print_format_decimals_1_100
      000C26 EE               [12] 2555 	mov	a,r6
      000C27 F0               [24] 2556 	movx	@dptr,a
      000C28                       2557 00135$:
                                   2558 ;	printf_large.c:588: if ( ( !left_justify ) && (length < width) )
      000C28 90r00rB4         [24] 2559 	mov	dptr,#__print_format_left_justify_1_100
      000C2B E0               [24] 2560 	movx	a,@dptr
      000C2C 70 3F            [24] 2561 	jnz	00286$
      000C2E 90r00rBE         [24] 2562 	mov	dptr,#__print_format_width_1_100
      000C31 E0               [24] 2563 	movx	a,@dptr
      000C32 FF               [12] 2564 	mov	r7,a
      000C33 C3               [12] 2565 	clr	c
      000C34 EE               [12] 2566 	mov	a,r6
      000C35 9F               [12] 2567 	subb	a,r7
      000C36 50 35            [24] 2568 	jnc	00286$
                                   2569 ;	printf_large.c:590: width -= length;
      000C38 90r00rBE         [24] 2570 	mov	dptr,#__print_format_width_1_100
      000C3B EF               [12] 2571 	mov	a,r7
      000C3C C3               [12] 2572 	clr	c
      000C3D 9E               [12] 2573 	subb	a,r6
      000C3E F0               [24] 2574 	movx	@dptr,a
                                   2575 ;	printf_large.c:591: while( width-- != 0 )
      000C3F E0               [24] 2576 	movx	a,@dptr
      000C40 FF               [12] 2577 	mov	r7,a
      000C41                       2578 00136$:
      000C41 8F 05            [24] 2579 	mov	ar5,r7
      000C43 1F               [12] 2580 	dec	r7
      000C44 ED               [12] 2581 	mov	a,r5
      000C45 60 21            [24] 2582 	jz	00324$
                                   2583 ;	printf_large.c:593: OUTPUT_CHAR( ' ', p );
      000C47 C0 00            [24] 2584 	push	ar0
      000C49 A8*00            [24] 2585 	mov	r0,_spx
      000C4B 05*00            [12] 2586 	inc	_spx
      000C4D 05*00            [12] 2587 	inc	_spx
      000C4F EF               [12] 2588 	mov	a,r7
      000C50 F2               [24] 2589 	movx	@r0,a
      000C51 08               [12] 2590 	inc	r0
      000C52 EE               [12] 2591 	mov	a,r6
      000C53 F2               [24] 2592 	movx	@r0,a
      000C54 D0 00            [24] 2593 	pop	ar0
      000C56 75 82 20         [24] 2594 	mov	dpl,#0x20
      000C59 12r00r00         [24] 2595 	lcall	__output_char
      000C5C A8*00            [24] 2596 	mov	r0,_spx
      000C5E 18               [12] 2597 	dec	r0
      000C5F E2               [24] 2598 	movx	a,@r0
      000C60 FE               [12] 2599 	mov	r6,a
      000C61 18               [12] 2600 	dec	r0
      000C62 E2               [24] 2601 	movx	a,@r0
      000C63 FF               [12] 2602 	mov	r7,a
      000C64 88*00            [24] 2603 	mov	_spx,r0
                                   2604 ;	printf_large.c:597: while ( (c = *PTR)  && (decimals-- > 0))
      000C66 80 D9            [24] 2605 	sjmp	00136$
      000C68                       2606 00324$:
      000C68 90r00rBE         [24] 2607 	mov	dptr,#__print_format_width_1_100
      000C6B EF               [12] 2608 	mov	a,r7
      000C6C F0               [24] 2609 	movx	@dptr,a
      000C6D                       2610 00286$:
      000C6D 90r00rBF         [24] 2611 	mov	dptr,#__print_format_decimals_1_100
      000C70 E0               [24] 2612 	movx	a,@dptr
      000C71 FF               [12] 2613 	mov	r7,a
      000C72                       2614 00143$:
      000C72 C0 06            [24] 2615 	push	ar6
      000C74 90r00r06         [24] 2616 	mov	dptr,#_value
      000C77 E0               [24] 2617 	movx	a,@dptr
      000C78 FA               [12] 2618 	mov	r2,a
      000C79 A3               [24] 2619 	inc	dptr
      000C7A E0               [24] 2620 	movx	a,@dptr
      000C7B FD               [12] 2621 	mov	r5,a
      000C7C A3               [24] 2622 	inc	dptr
      000C7D E0               [24] 2623 	movx	a,@dptr
      000C7E FE               [12] 2624 	mov	r6,a
      000C7F 8A 82            [24] 2625 	mov	dpl,r2
      000C81 8D 83            [24] 2626 	mov	dph,r5
      000C83 8E F0            [24] 2627 	mov	b,r6
      000C85 12r00r00         [24] 2628 	lcall	__gptrget
      000C88 F5*0C            [12] 2629 	mov	__print_format_sloc0_1_0,a
      000C8A D0 06            [24] 2630 	pop	ar6
      000C8C E5*0C            [12] 2631 	mov	a,__print_format_sloc0_1_0
      000C8E 60 4E            [24] 2632 	jz	00325$
      000C90 8F 05            [24] 2633 	mov	ar5,r7
      000C92 1F               [12] 2634 	dec	r7
      000C93 C3               [12] 2635 	clr	c
      000C94 74 80            [12] 2636 	mov	a,#(0x00 ^ 0x80)
      000C96 8D F0            [24] 2637 	mov	b,r5
      000C98 63 F0 80         [24] 2638 	xrl	b,#0x80
      000C9B 95 F0            [12] 2639 	subb	a,b
      000C9D 50 3F            [24] 2640 	jnc	00325$
                                   2641 ;	printf_large.c:599: OUTPUT_CHAR( c, p );
      000C9F C0 06            [24] 2642 	push	ar6
      000CA1 C0 00            [24] 2643 	push	ar0
      000CA3 A8*00            [24] 2644 	mov	r0,_spx
      000CA5 05*00            [12] 2645 	inc	_spx
      000CA7 05*00            [12] 2646 	inc	_spx
      000CA9 EF               [12] 2647 	mov	a,r7
      000CAA F2               [24] 2648 	movx	@r0,a
      000CAB 08               [12] 2649 	inc	r0
      000CAC EE               [12] 2650 	mov	a,r6
      000CAD F2               [24] 2651 	movx	@r0,a
      000CAE D0 00            [24] 2652 	pop	ar0
      000CB0 85*0C 82         [24] 2653 	mov	dpl,__print_format_sloc0_1_0
      000CB3 12r00r00         [24] 2654 	lcall	__output_char
      000CB6 A8*00            [24] 2655 	mov	r0,_spx
      000CB8 18               [12] 2656 	dec	r0
      000CB9 E2               [24] 2657 	movx	a,@r0
      000CBA 18               [12] 2658 	dec	r0
      000CBB E2               [24] 2659 	movx	a,@r0
      000CBC FF               [12] 2660 	mov	r7,a
      000CBD 88*00            [24] 2661 	mov	_spx,r0
                                   2662 ;	printf_large.c:600: PTR++;
      000CBF 90r00r06         [24] 2663 	mov	dptr,#_value
      000CC2 E0               [24] 2664 	movx	a,@dptr
      000CC3 FA               [12] 2665 	mov	r2,a
      000CC4 A3               [24] 2666 	inc	dptr
      000CC5 E0               [24] 2667 	movx	a,@dptr
      000CC6 FD               [12] 2668 	mov	r5,a
      000CC7 A3               [24] 2669 	inc	dptr
      000CC8 E0               [24] 2670 	movx	a,@dptr
      000CC9 FE               [12] 2671 	mov	r6,a
      000CCA 0A               [12] 2672 	inc	r2
      000CCB BA 00 01         [24] 2673 	cjne	r2,#0x00,00535$
      000CCE 0D               [12] 2674 	inc	r5
      000CCF                       2675 00535$:
      000CCF 90r00r06         [24] 2676 	mov	dptr,#_value
      000CD2 EA               [12] 2677 	mov	a,r2
      000CD3 F0               [24] 2678 	movx	@dptr,a
      000CD4 ED               [12] 2679 	mov	a,r5
      000CD5 A3               [24] 2680 	inc	dptr
      000CD6 F0               [24] 2681 	movx	@dptr,a
      000CD7 EE               [12] 2682 	mov	a,r6
      000CD8 A3               [24] 2683 	inc	dptr
      000CD9 F0               [24] 2684 	movx	@dptr,a
      000CDA D0 06            [24] 2685 	pop	ar6
      000CDC 80 94            [24] 2686 	sjmp	00143$
      000CDE                       2687 00325$:
      000CDE 90r00rBF         [24] 2688 	mov	dptr,#__print_format_decimals_1_100
      000CE1 EF               [12] 2689 	mov	a,r7
      000CE2 F0               [24] 2690 	movx	@dptr,a
                                   2691 ;	printf_large.c:603: if ( left_justify && (length < width))
      000CE3 90r00rB4         [24] 2692 	mov	dptr,#__print_format_left_justify_1_100
      000CE6 E0               [24] 2693 	movx	a,@dptr
      000CE7 70 03            [24] 2694 	jnz	00536$
      000CE9 02r0Er2F         [24] 2695 	ljmp	00172$
      000CEC                       2696 00536$:
      000CEC 90r00rBE         [24] 2697 	mov	dptr,#__print_format_width_1_100
      000CEF E0               [24] 2698 	movx	a,@dptr
      000CF0 FF               [12] 2699 	mov	r7,a
      000CF1 C3               [12] 2700 	clr	c
      000CF2 EE               [12] 2701 	mov	a,r6
      000CF3 9F               [12] 2702 	subb	a,r7
      000CF4 40 03            [24] 2703 	jc	00537$
      000CF6 02r0Er2F         [24] 2704 	ljmp	00172$
      000CF9                       2705 00537$:
                                   2706 ;	printf_large.c:605: width -= length;
      000CF9 90r00rBE         [24] 2707 	mov	dptr,#__print_format_width_1_100
      000CFC EF               [12] 2708 	mov	a,r7
      000CFD C3               [12] 2709 	clr	c
      000CFE 9E               [12] 2710 	subb	a,r6
      000CFF F0               [24] 2711 	movx	@dptr,a
                                   2712 ;	printf_large.c:606: while( width-- != 0 )
      000D00 E0               [24] 2713 	movx	a,@dptr
      000D01 FF               [12] 2714 	mov	r7,a
      000D02                       2715 00146$:
      000D02 8F 06            [24] 2716 	mov	ar6,r7
      000D04 1F               [12] 2717 	dec	r7
      000D05 EE               [12] 2718 	mov	a,r6
      000D06 70 03            [24] 2719 	jnz	00538$
      000D08 02r0Er2A         [24] 2720 	ljmp	00326$
      000D0B                       2721 00538$:
                                   2722 ;	printf_large.c:608: OUTPUT_CHAR( ' ', p );
      000D0B C0 00            [24] 2723 	push	ar0
      000D0D EF               [12] 2724 	mov	a,r7
      000D0E A8*00            [24] 2725 	mov	r0,_spx
      000D10 05*00            [12] 2726 	inc	_spx
      000D12 F2               [24] 2727 	movx	@r0,a
      000D13 D0 00            [24] 2728 	pop	ar0
      000D15 75 82 20         [24] 2729 	mov	dpl,#0x20
      000D18 12r00r00         [24] 2730 	lcall	__output_char
      000D1B A8*00            [24] 2731 	mov	r0,_spx
      000D1D 18               [12] 2732 	dec	r0
      000D1E E2               [24] 2733 	movx	a,@r0
      000D1F FF               [12] 2734 	mov	r7,a
      000D20 15*00            [12] 2735 	dec	_spx
                                   2736 ;	printf_large.c:613: case 'P':
      000D22 80 DE            [24] 2737 	sjmp	00146$
      000D24                       2738 00152$:
                                   2739 ;	printf_large.c:614: PTR = va_arg(ap,ptr_t);
      000D24 90r00rB1         [24] 2740 	mov	dptr,#__print_format_PARM_4
      000D27 E0               [24] 2741 	movx	a,@dptr
      000D28 FE               [12] 2742 	mov	r6,a
      000D29 1E               [12] 2743 	dec	r6
      000D2A 1E               [12] 2744 	dec	r6
      000D2B 1E               [12] 2745 	dec	r6
      000D2C EE               [12] 2746 	mov	a,r6
      000D2D F0               [24] 2747 	movx	@dptr,a
      000D2E 8E 01            [24] 2748 	mov	ar1,r6
      000D30 E3               [24] 2749 	movx	a,@r1
      000D31 FA               [12] 2750 	mov	r2,a
      000D32 09               [12] 2751 	inc	r1
      000D33 E3               [24] 2752 	movx	a,@r1
      000D34 FD               [12] 2753 	mov	r5,a
      000D35 09               [12] 2754 	inc	r1
      000D36 E3               [24] 2755 	movx	a,@r1
      000D37 FE               [12] 2756 	mov	r6,a
      000D38 19               [12] 2757 	dec	r1
      000D39 19               [12] 2758 	dec	r1
      000D3A 90r00r06         [24] 2759 	mov	dptr,#_value
      000D3D EA               [12] 2760 	mov	a,r2
      000D3E F0               [24] 2761 	movx	@dptr,a
      000D3F ED               [12] 2762 	mov	a,r5
      000D40 A3               [24] 2763 	inc	dptr
      000D41 F0               [24] 2764 	movx	@dptr,a
      000D42 EE               [12] 2765 	mov	a,r6
      000D43 A3               [24] 2766 	inc	dptr
      000D44 F0               [24] 2767 	movx	@dptr,a
                                   2768 ;	printf_large.c:637: unsigned char memtype = value.byte[2];
      000D45 90r00r08         [24] 2769 	mov	dptr,#(_value + 0x0002)
      000D48 E0               [24] 2770 	movx	a,@dptr
      000D49 FE               [12] 2771 	mov	r6,a
                                   2772 ;	printf_large.c:638: if (memtype >= 0x80)
      000D4A BE 80 00         [24] 2773 	cjne	r6,#0x80,00539$
      000D4D                       2774 00539$:
      000D4D 40 08            [24] 2775 	jc	00160$
                                   2776 ;	printf_large.c:639: c = 'C';
      000D4F 90r00rC1         [24] 2777 	mov	dptr,#__print_format_c_1_100
      000D52 74 43            [12] 2778 	mov	a,#0x43
      000D54 F0               [24] 2779 	movx	@dptr,a
      000D55 80 20            [24] 2780 	sjmp	00161$
      000D57                       2781 00160$:
                                   2782 ;	printf_large.c:640: else if (memtype >= 0x60)
      000D57 BE 60 00         [24] 2783 	cjne	r6,#0x60,00541$
      000D5A                       2784 00541$:
      000D5A 40 08            [24] 2785 	jc	00157$
                                   2786 ;	printf_large.c:641: c = 'P';
      000D5C 90r00rC1         [24] 2787 	mov	dptr,#__print_format_c_1_100
      000D5F 74 50            [12] 2788 	mov	a,#0x50
      000D61 F0               [24] 2789 	movx	@dptr,a
      000D62 80 13            [24] 2790 	sjmp	00161$
      000D64                       2791 00157$:
                                   2792 ;	printf_large.c:642: else if (memtype >= 0x40)
      000D64 BE 40 00         [24] 2793 	cjne	r6,#0x40,00543$
      000D67                       2794 00543$:
      000D67 40 08            [24] 2795 	jc	00154$
                                   2796 ;	printf_large.c:643: c = 'I';
      000D69 90r00rC1         [24] 2797 	mov	dptr,#__print_format_c_1_100
      000D6C 74 49            [12] 2798 	mov	a,#0x49
      000D6E F0               [24] 2799 	movx	@dptr,a
      000D6F 80 06            [24] 2800 	sjmp	00161$
      000D71                       2801 00154$:
                                   2802 ;	printf_large.c:645: c = 'X';
      000D71 90r00rC1         [24] 2803 	mov	dptr,#__print_format_c_1_100
      000D74 74 58            [12] 2804 	mov	a,#0x58
      000D76 F0               [24] 2805 	movx	@dptr,a
      000D77                       2806 00161$:
                                   2807 ;	printf_large.c:647: OUTPUT_CHAR(c, p);
      000D77 90r00rC1         [24] 2808 	mov	dptr,#__print_format_c_1_100
      000D7A E0               [24] 2809 	movx	a,@dptr
      000D7B FE               [12] 2810 	mov	r6,a
      000D7C C0 00            [24] 2811 	push	ar0
      000D7E EE               [12] 2812 	mov	a,r6
      000D7F A8*00            [24] 2813 	mov	r0,_spx
      000D81 05*00            [12] 2814 	inc	_spx
      000D83 F2               [24] 2815 	movx	@r0,a
      000D84 D0 00            [24] 2816 	pop	ar0
      000D86 8E 82            [24] 2817 	mov	dpl,r6
      000D88 12r00r00         [24] 2818 	lcall	__output_char
      000D8B A8*00            [24] 2819 	mov	r0,_spx
      000D8D 18               [12] 2820 	dec	r0
      000D8E E2               [24] 2821 	movx	a,@r0
      000D8F FE               [12] 2822 	mov	r6,a
      000D90 15*00            [12] 2823 	dec	_spx
                                   2824 ;	printf_large.c:648: OUTPUT_CHAR(':', p);
      000D92 C0 00            [24] 2825 	push	ar0
      000D94 EE               [12] 2826 	mov	a,r6
      000D95 A8*00            [24] 2827 	mov	r0,_spx
      000D97 05*00            [12] 2828 	inc	_spx
      000D99 F2               [24] 2829 	movx	@r0,a
      000D9A D0 00            [24] 2830 	pop	ar0
      000D9C 75 82 3A         [24] 2831 	mov	dpl,#0x3a
      000D9F 12r00r00         [24] 2832 	lcall	__output_char
      000DA2 A8*00            [24] 2833 	mov	r0,_spx
      000DA4 18               [12] 2834 	dec	r0
      000DA5 E2               [24] 2835 	movx	a,@r0
      000DA6 FE               [12] 2836 	mov	r6,a
      000DA7 15*00            [12] 2837 	dec	_spx
                                   2838 ;	printf_large.c:649: OUTPUT_CHAR('0', p);
      000DA9 C0 00            [24] 2839 	push	ar0
      000DAB EE               [12] 2840 	mov	a,r6
      000DAC A8*00            [24] 2841 	mov	r0,_spx
      000DAE 05*00            [12] 2842 	inc	_spx
      000DB0 F2               [24] 2843 	movx	@r0,a
      000DB1 D0 00            [24] 2844 	pop	ar0
      000DB3 75 82 30         [24] 2845 	mov	dpl,#0x30
      000DB6 12r00r00         [24] 2846 	lcall	__output_char
      000DB9 A8*00            [24] 2847 	mov	r0,_spx
      000DBB 18               [12] 2848 	dec	r0
      000DBC E2               [24] 2849 	movx	a,@r0
      000DBD FE               [12] 2850 	mov	r6,a
      000DBE 15*00            [12] 2851 	dec	_spx
                                   2852 ;	printf_large.c:650: OUTPUT_CHAR('x', p);
      000DC0 C0 00            [24] 2853 	push	ar0
      000DC2 EE               [12] 2854 	mov	a,r6
      000DC3 A8*00            [24] 2855 	mov	r0,_spx
      000DC5 05*00            [12] 2856 	inc	_spx
      000DC7 F2               [24] 2857 	movx	@r0,a
      000DC8 D0 00            [24] 2858 	pop	ar0
      000DCA 75 82 78         [24] 2859 	mov	dpl,#0x78
      000DCD 12r00r00         [24] 2860 	lcall	__output_char
      000DD0 A8*00            [24] 2861 	mov	r0,_spx
      000DD2 18               [12] 2862 	dec	r0
      000DD3 E2               [24] 2863 	movx	a,@r0
      000DD4 FE               [12] 2864 	mov	r6,a
      000DD5 15*00            [12] 2865 	dec	_spx
                                   2866 ;	printf_large.c:651: if ((c != 'I' /* idata */) &&
      000DD7 BE 49 02         [24] 2867 	cjne	r6,#0x49,00545$
      000DDA 80 0E            [24] 2868 	sjmp	00163$
      000DDC                       2869 00545$:
                                   2870 ;	printf_large.c:652: (c != 'P' /* pdata */))
      000DDC BE 50 02         [24] 2871 	cjne	r6,#0x50,00546$
      000DDF 80 09            [24] 2872 	sjmp	00163$
      000DE1                       2873 00546$:
                                   2874 ;	printf_large.c:654: OUTPUT_2DIGITS( value.byte[1] );
      000DE1 90r00r07         [24] 2875 	mov	dptr,#(_value + 0x0001)
      000DE4 E0               [24] 2876 	movx	a,@dptr
      000DE5 F5 82            [12] 2877 	mov	dpl,a
      000DE7 12r00r63         [24] 2878 	lcall	_output_2digits
      000DEA                       2879 00163$:
                                   2880 ;	printf_large.c:656: OUTPUT_2DIGITS( value.byte[0] );
      000DEA 90r00r06         [24] 2881 	mov	dptr,#_value
      000DED E0               [24] 2882 	movx	a,@dptr
      000DEE F5 82            [12] 2883 	mov	dpl,a
      000DF0 12r00r63         [24] 2884 	lcall	_output_2digits
                                   2885 ;	printf_large.c:663: break;
                                   2886 ;	printf_large.c:666: case 'I':
      000DF3 80 3A            [24] 2887 	sjmp	00172$
      000DF5                       2888 00166$:
                                   2889 ;	printf_large.c:667: signed_argument = 1;
      000DF5 90r00rB8         [24] 2890 	mov	dptr,#__print_format_signed_argument_1_100
      000DF8 74 01            [12] 2891 	mov	a,#0x01
      000DFA F0               [24] 2892 	movx	@dptr,a
                                   2893 ;	printf_large.c:668: radix = 10;
      000DFB 90r00rBD         [24] 2894 	mov	dptr,#__print_format_radix_1_100
      000DFE 74 0A            [12] 2895 	mov	a,#0x0a
      000E00 F0               [24] 2896 	movx	@dptr,a
                                   2897 ;	printf_large.c:669: break;
                                   2898 ;	printf_large.c:671: case 'O':
      000E01 80 2C            [24] 2899 	sjmp	00172$
      000E03                       2900 00167$:
                                   2901 ;	printf_large.c:672: radix = 8;
      000E03 90r00rBD         [24] 2902 	mov	dptr,#__print_format_radix_1_100
      000E06 74 08            [12] 2903 	mov	a,#0x08
      000E08 F0               [24] 2904 	movx	@dptr,a
                                   2905 ;	printf_large.c:673: break;
                                   2906 ;	printf_large.c:675: case 'U':
      000E09 80 24            [24] 2907 	sjmp	00172$
      000E0B                       2908 00168$:
                                   2909 ;	printf_large.c:676: radix = 10;
      000E0B 90r00rBD         [24] 2910 	mov	dptr,#__print_format_radix_1_100
      000E0E 74 0A            [12] 2911 	mov	a,#0x0a
      000E10 F0               [24] 2912 	movx	@dptr,a
                                   2913 ;	printf_large.c:677: break;
                                   2914 ;	printf_large.c:679: case 'X':
      000E11 80 1C            [24] 2915 	sjmp	00172$
      000E13                       2916 00169$:
                                   2917 ;	printf_large.c:680: radix = 16;
      000E13 90r00rBD         [24] 2918 	mov	dptr,#__print_format_radix_1_100
      000E16 74 10            [12] 2919 	mov	a,#0x10
      000E18 F0               [24] 2920 	movx	@dptr,a
                                   2921 ;	printf_large.c:681: break;
                                   2922 ;	printf_large.c:683: case 'F':
      000E19 80 14            [24] 2923 	sjmp	00172$
      000E1B                       2924 00170$:
                                   2925 ;	printf_large.c:684: float_argument=1;
      000E1B 90r00rBB         [24] 2926 	mov	dptr,#__print_format_float_argument_1_100
      000E1E 74 01            [12] 2927 	mov	a,#0x01
      000E20 F0               [24] 2928 	movx	@dptr,a
                                   2929 ;	printf_large.c:685: break;
                                   2930 ;	printf_large.c:687: default:
      000E21 80 0C            [24] 2931 	sjmp	00172$
      000E23                       2932 00171$:
                                   2933 ;	printf_large.c:689: OUTPUT_CHAR( c, p );
      000E23 8B 82            [24] 2934 	mov	dpl,r3
      000E25 12r00r00         [24] 2935 	lcall	__output_char
                                   2936 ;	printf_large.c:872: return charsOutputted;
                                   2937 ;	printf_large.c:691: }
      000E28 80 05            [24] 2938 	sjmp	00172$
      000E2A                       2939 00326$:
      000E2A 90r00rBE         [24] 2940 	mov	dptr,#__print_format_width_1_100
      000E2D EF               [12] 2941 	mov	a,r7
      000E2E F0               [24] 2942 	movx	@dptr,a
      000E2F                       2943 00172$:
                                   2944 ;	printf_large.c:693: if (float_argument)
      000E2F 90r00rBB         [24] 2945 	mov	dptr,#__print_format_float_argument_1_100
      000E32 E0               [24] 2946 	movx	a,@dptr
      000E33 70 03            [24] 2947 	jnz	00547$
      000E35 02r0ErBE         [24] 2948 	ljmp	00235$
      000E38                       2949 00547$:
                                   2950 ;	printf_large.c:695: value.f = va_arg(ap, float);
      000E38 90r00rB1         [24] 2951 	mov	dptr,#__print_format_PARM_4
      000E3B E0               [24] 2952 	movx	a,@dptr
      000E3C FF               [12] 2953 	mov	r7,a
      000E3D 1F               [12] 2954 	dec	r7
      000E3E 1F               [12] 2955 	dec	r7
      000E3F 1F               [12] 2956 	dec	r7
      000E40 1F               [12] 2957 	dec	r7
      000E41 EF               [12] 2958 	mov	a,r7
      000E42 F0               [24] 2959 	movx	@dptr,a
      000E43 8F 01            [24] 2960 	mov	ar1,r7
      000E45 E3               [24] 2961 	movx	a,@r1
      000E46 FB               [12] 2962 	mov	r3,a
      000E47 09               [12] 2963 	inc	r1
      000E48 E3               [24] 2964 	movx	a,@r1
      000E49 FD               [12] 2965 	mov	r5,a
      000E4A 09               [12] 2966 	inc	r1
      000E4B E3               [24] 2967 	movx	a,@r1
      000E4C FE               [12] 2968 	mov	r6,a
      000E4D 09               [12] 2969 	inc	r1
      000E4E E3               [24] 2970 	movx	a,@r1
      000E4F FF               [12] 2971 	mov	r7,a
      000E50 19               [12] 2972 	dec	r1
      000E51 19               [12] 2973 	dec	r1
      000E52 19               [12] 2974 	dec	r1
      000E53 90r00r06         [24] 2975 	mov	dptr,#_value
      000E56 EB               [12] 2976 	mov	a,r3
      000E57 F0               [24] 2977 	movx	@dptr,a
      000E58 ED               [12] 2978 	mov	a,r5
      000E59 A3               [24] 2979 	inc	dptr
      000E5A F0               [24] 2980 	movx	@dptr,a
      000E5B EE               [12] 2981 	mov	a,r6
      000E5C A3               [24] 2982 	inc	dptr
      000E5D F0               [24] 2983 	movx	@dptr,a
      000E5E EF               [12] 2984 	mov	a,r7
      000E5F A3               [24] 2985 	inc	dptr
      000E60 F0               [24] 2986 	movx	@dptr,a
                                   2987 ;	printf_large.c:713: OUTPUT_FLOAT(value.f, width, decimals, left_justify,
      000E61 90r00r06         [24] 2988 	mov	dptr,#_value
      000E64 E0               [24] 2989 	movx	a,@dptr
      000E65 A3               [24] 2990 	inc	dptr
      000E66 E0               [24] 2991 	movx	a,@dptr
      000E67 A3               [24] 2992 	inc	dptr
      000E68 E0               [24] 2993 	movx	a,@dptr
      000E69 A3               [24] 2994 	inc	dptr
      000E6A E0               [24] 2995 	movx	a,@dptr
      000E6B 90r00rBE         [24] 2996 	mov	dptr,#__print_format_width_1_100
      000E6E E0               [24] 2997 	movx	a,@dptr
      000E6F F5*0C            [12] 2998 	mov	__print_format_sloc0_1_0,a
      000E71 90r00rBF         [24] 2999 	mov	dptr,#__print_format_decimals_1_100
      000E74 E0               [24] 3000 	movx	a,@dptr
      000E75 F5*0D            [12] 3001 	mov	__print_format_sloc1_1_0,a
      000E77 90r00rB4         [24] 3002 	mov	dptr,#__print_format_left_justify_1_100
      000E7A E0               [24] 3003 	movx	a,@dptr
      000E7B F5*0E            [12] 3004 	mov	__print_format_sloc2_1_0,a
      000E7D 90r00rB5         [24] 3005 	mov	dptr,#__print_format_zero_padding_1_100
      000E80 E0               [24] 3006 	movx	a,@dptr
      000E81 F5*0F            [12] 3007 	mov	__print_format_sloc3_1_0,a
      000E83 90r00rB6         [24] 3008 	mov	dptr,#__print_format_prefix_sign_1_100
      000E86 E0               [24] 3009 	movx	a,@dptr
      000E87 F5*10            [12] 3010 	mov	__print_format_sloc4_1_0,a
      000E89 90r00rB7         [24] 3011 	mov	dptr,#__print_format_prefix_space_1_100
      000E8C E0               [24] 3012 	movx	a,@dptr
      000E8D FA               [12] 3013 	mov	r2,a
      000E8E 90r00r11         [24] 3014 	mov	dptr,#_output_float_PARM_2
      000E91 E5*0C            [12] 3015 	mov	a,__print_format_sloc0_1_0
      000E93 F0               [24] 3016 	movx	@dptr,a
      000E94 90r00r12         [24] 3017 	mov	dptr,#_output_float_PARM_3
      000E97 E5*0D            [12] 3018 	mov	a,__print_format_sloc1_1_0
      000E99 F0               [24] 3019 	movx	@dptr,a
      000E9A 90r00r13         [24] 3020 	mov	dptr,#_output_float_PARM_4
      000E9D E5*0E            [12] 3021 	mov	a,__print_format_sloc2_1_0
      000E9F F0               [24] 3022 	movx	@dptr,a
      000EA0 90r00r14         [24] 3023 	mov	dptr,#_output_float_PARM_5
      000EA3 E5*0F            [12] 3024 	mov	a,__print_format_sloc3_1_0
      000EA5 F0               [24] 3025 	movx	@dptr,a
      000EA6 90r00r15         [24] 3026 	mov	dptr,#_output_float_PARM_6
      000EA9 E5*10            [12] 3027 	mov	a,__print_format_sloc4_1_0
      000EAB F0               [24] 3028 	movx	@dptr,a
      000EAC 90r00r16         [24] 3029 	mov	dptr,#_output_float_PARM_7
      000EAF EA               [12] 3030 	mov	a,r2
      000EB0 F0               [24] 3031 	movx	@dptr,a
      000EB1 8B 82            [24] 3032 	mov	dpl,r3
      000EB3 8D 83            [24] 3033 	mov	dph,r5
      000EB5 8E F0            [24] 3034 	mov	b,r6
      000EB7 EF               [12] 3035 	mov	a,r7
      000EB8 12r00rE9         [24] 3036 	lcall	_output_float
      000EBB 02r0Ar09         [24] 3037 	ljmp	00240$
      000EBE                       3038 00235$:
                                   3039 ;	printf_large.c:718: else if (radix != 0)
      000EBE 90r00rBD         [24] 3040 	mov	dptr,#__print_format_radix_1_100
      000EC1 E0               [24] 3041 	movx	a,@dptr
      000EC2 70 03            [24] 3042 	jnz	00548$
      000EC4 02r0Ar09         [24] 3043 	ljmp	00240$
      000EC7                       3044 00548$:
                                   3045 ;	printf_large.c:726: if (char_argument)
      000EC7 90r00rB9         [24] 3046 	mov	dptr,#__print_format_char_argument_1_100
      000ECA E0               [24] 3047 	movx	a,@dptr
      000ECB 60 48            [24] 3048 	jz	00181$
                                   3049 ;	printf_large.c:728: value.l = va_arg(ap, char);
      000ECD 90r00rB1         [24] 3050 	mov	dptr,#__print_format_PARM_4
      000ED0 E0               [24] 3051 	movx	a,@dptr
      000ED1 14               [12] 3052 	dec	a
      000ED2 F9               [12] 3053 	mov	r1,a
      000ED3 F0               [24] 3054 	movx	@dptr,a
      000ED4 E3               [24] 3055 	movx	a,@r1
      000ED5 FF               [12] 3056 	mov	r7,a
      000ED6 7E 00            [12] 3057 	mov	r6,#0x00
      000ED8 7D 00            [12] 3058 	mov	r5,#0x00
      000EDA 7B 00            [12] 3059 	mov	r3,#0x00
      000EDC 90r00r06         [24] 3060 	mov	dptr,#_value
      000EDF EF               [12] 3061 	mov	a,r7
      000EE0 F0               [24] 3062 	movx	@dptr,a
      000EE1 EE               [12] 3063 	mov	a,r6
      000EE2 A3               [24] 3064 	inc	dptr
      000EE3 F0               [24] 3065 	movx	@dptr,a
      000EE4 ED               [12] 3066 	mov	a,r5
      000EE5 A3               [24] 3067 	inc	dptr
      000EE6 F0               [24] 3068 	movx	@dptr,a
      000EE7 EB               [12] 3069 	mov	a,r3
      000EE8 A3               [24] 3070 	inc	dptr
      000EE9 F0               [24] 3071 	movx	@dptr,a
                                   3072 ;	printf_large.c:729: if (!signed_argument)
      000EEA 90r00rB8         [24] 3073 	mov	dptr,#__print_format_signed_argument_1_100
      000EED E0               [24] 3074 	movx	a,@dptr
      000EEE 60 03            [24] 3075 	jz	00550$
      000EF0 02r0Fr8F         [24] 3076 	ljmp	00182$
      000EF3                       3077 00550$:
                                   3078 ;	printf_large.c:731: value.l &= 0xFF;
      000EF3 90r00r06         [24] 3079 	mov	dptr,#_value
      000EF6 E0               [24] 3080 	movx	a,@dptr
      000EF7 FB               [12] 3081 	mov	r3,a
      000EF8 A3               [24] 3082 	inc	dptr
      000EF9 E0               [24] 3083 	movx	a,@dptr
      000EFA A3               [24] 3084 	inc	dptr
      000EFB E0               [24] 3085 	movx	a,@dptr
      000EFC A3               [24] 3086 	inc	dptr
      000EFD E0               [24] 3087 	movx	a,@dptr
      000EFE 7D 00            [12] 3088 	mov	r5,#0x00
      000F00 7E 00            [12] 3089 	mov	r6,#0x00
      000F02 7F 00            [12] 3090 	mov	r7,#0x00
      000F04 90r00r06         [24] 3091 	mov	dptr,#_value
      000F07 EB               [12] 3092 	mov	a,r3
      000F08 F0               [24] 3093 	movx	@dptr,a
      000F09 ED               [12] 3094 	mov	a,r5
      000F0A A3               [24] 3095 	inc	dptr
      000F0B F0               [24] 3096 	movx	@dptr,a
      000F0C EE               [12] 3097 	mov	a,r6
      000F0D A3               [24] 3098 	inc	dptr
      000F0E F0               [24] 3099 	movx	@dptr,a
      000F0F EF               [12] 3100 	mov	a,r7
      000F10 A3               [24] 3101 	inc	dptr
      000F11 F0               [24] 3102 	movx	@dptr,a
      000F12 02r0Fr8F         [24] 3103 	ljmp	00182$
      000F15                       3104 00181$:
                                   3105 ;	printf_large.c:734: else if (long_argument)
      000F15 90r00rBA         [24] 3106 	mov	dptr,#__print_format_long_argument_1_100
      000F18 E0               [24] 3107 	movx	a,@dptr
      000F19 60 2B            [24] 3108 	jz	00178$
                                   3109 ;	printf_large.c:736: value.l = va_arg(ap, long);
      000F1B 90r00rB1         [24] 3110 	mov	dptr,#__print_format_PARM_4
      000F1E E0               [24] 3111 	movx	a,@dptr
      000F1F FF               [12] 3112 	mov	r7,a
      000F20 1F               [12] 3113 	dec	r7
      000F21 1F               [12] 3114 	dec	r7
      000F22 1F               [12] 3115 	dec	r7
      000F23 1F               [12] 3116 	dec	r7
      000F24 EF               [12] 3117 	mov	a,r7
      000F25 F0               [24] 3118 	movx	@dptr,a
      000F26 8F 01            [24] 3119 	mov	ar1,r7
      000F28 E3               [24] 3120 	movx	a,@r1
      000F29 FB               [12] 3121 	mov	r3,a
      000F2A 09               [12] 3122 	inc	r1
      000F2B E3               [24] 3123 	movx	a,@r1
      000F2C FD               [12] 3124 	mov	r5,a
      000F2D 09               [12] 3125 	inc	r1
      000F2E E3               [24] 3126 	movx	a,@r1
      000F2F FE               [12] 3127 	mov	r6,a
      000F30 09               [12] 3128 	inc	r1
      000F31 E3               [24] 3129 	movx	a,@r1
      000F32 FF               [12] 3130 	mov	r7,a
      000F33 19               [12] 3131 	dec	r1
      000F34 19               [12] 3132 	dec	r1
      000F35 19               [12] 3133 	dec	r1
      000F36 90r00r06         [24] 3134 	mov	dptr,#_value
      000F39 EB               [12] 3135 	mov	a,r3
      000F3A F0               [24] 3136 	movx	@dptr,a
      000F3B ED               [12] 3137 	mov	a,r5
      000F3C A3               [24] 3138 	inc	dptr
      000F3D F0               [24] 3139 	movx	@dptr,a
      000F3E EE               [12] 3140 	mov	a,r6
      000F3F A3               [24] 3141 	inc	dptr
      000F40 F0               [24] 3142 	movx	@dptr,a
      000F41 EF               [12] 3143 	mov	a,r7
      000F42 A3               [24] 3144 	inc	dptr
      000F43 F0               [24] 3145 	movx	@dptr,a
      000F44 80 49            [24] 3146 	sjmp	00182$
      000F46                       3147 00178$:
                                   3148 ;	printf_large.c:740: value.l = va_arg(ap, int);
      000F46 90r00rB1         [24] 3149 	mov	dptr,#__print_format_PARM_4
      000F49 E0               [24] 3150 	movx	a,@dptr
      000F4A FF               [12] 3151 	mov	r7,a
      000F4B 1F               [12] 3152 	dec	r7
      000F4C 1F               [12] 3153 	dec	r7
      000F4D EF               [12] 3154 	mov	a,r7
      000F4E F0               [24] 3155 	movx	@dptr,a
      000F4F 8F 01            [24] 3156 	mov	ar1,r7
      000F51 E3               [24] 3157 	movx	a,@r1
      000F52 FE               [12] 3158 	mov	r6,a
      000F53 09               [12] 3159 	inc	r1
      000F54 E3               [24] 3160 	movx	a,@r1
      000F55 FF               [12] 3161 	mov	r7,a
      000F56 19               [12] 3162 	dec	r1
      000F57 EF               [12] 3163 	mov	a,r7
      000F58 33               [12] 3164 	rlc	a
      000F59 95 E0            [12] 3165 	subb	a,acc
      000F5B FD               [12] 3166 	mov	r5,a
      000F5C FB               [12] 3167 	mov	r3,a
      000F5D 90r00r06         [24] 3168 	mov	dptr,#_value
      000F60 EE               [12] 3169 	mov	a,r6
      000F61 F0               [24] 3170 	movx	@dptr,a
      000F62 EF               [12] 3171 	mov	a,r7
      000F63 A3               [24] 3172 	inc	dptr
      000F64 F0               [24] 3173 	movx	@dptr,a
      000F65 ED               [12] 3174 	mov	a,r5
      000F66 A3               [24] 3175 	inc	dptr
      000F67 F0               [24] 3176 	movx	@dptr,a
      000F68 EB               [12] 3177 	mov	a,r3
      000F69 A3               [24] 3178 	inc	dptr
      000F6A F0               [24] 3179 	movx	@dptr,a
                                   3180 ;	printf_large.c:741: if (!signed_argument)
      000F6B 90r00rB8         [24] 3181 	mov	dptr,#__print_format_signed_argument_1_100
      000F6E E0               [24] 3182 	movx	a,@dptr
      000F6F 70 1E            [24] 3183 	jnz	00182$
                                   3184 ;	printf_large.c:743: value.l &= 0xFFFF;
      000F71 90r00r06         [24] 3185 	mov	dptr,#_value
      000F74 E0               [24] 3186 	movx	a,@dptr
      000F75 FB               [12] 3187 	mov	r3,a
      000F76 A3               [24] 3188 	inc	dptr
      000F77 E0               [24] 3189 	movx	a,@dptr
      000F78 FD               [12] 3190 	mov	r5,a
      000F79 A3               [24] 3191 	inc	dptr
      000F7A E0               [24] 3192 	movx	a,@dptr
      000F7B A3               [24] 3193 	inc	dptr
      000F7C E0               [24] 3194 	movx	a,@dptr
      000F7D 7E 00            [12] 3195 	mov	r6,#0x00
      000F7F 7F 00            [12] 3196 	mov	r7,#0x00
      000F81 90r00r06         [24] 3197 	mov	dptr,#_value
      000F84 EB               [12] 3198 	mov	a,r3
      000F85 F0               [24] 3199 	movx	@dptr,a
      000F86 ED               [12] 3200 	mov	a,r5
      000F87 A3               [24] 3201 	inc	dptr
      000F88 F0               [24] 3202 	movx	@dptr,a
      000F89 EE               [12] 3203 	mov	a,r6
      000F8A A3               [24] 3204 	inc	dptr
      000F8B F0               [24] 3205 	movx	@dptr,a
      000F8C EF               [12] 3206 	mov	a,r7
      000F8D A3               [24] 3207 	inc	dptr
      000F8E F0               [24] 3208 	movx	@dptr,a
      000F8F                       3209 00182$:
                                   3210 ;	printf_large.c:747: if ( signed_argument )
      000F8F 90r00rB8         [24] 3211 	mov	dptr,#__print_format_signed_argument_1_100
      000F92 E0               [24] 3212 	movx	a,@dptr
      000F93 60 41            [24] 3213 	jz	00187$
                                   3214 ;	printf_large.c:749: if (value.l < 0)
      000F95 90r00r06         [24] 3215 	mov	dptr,#_value
      000F98 E0               [24] 3216 	movx	a,@dptr
      000F99 FB               [12] 3217 	mov	r3,a
      000F9A A3               [24] 3218 	inc	dptr
      000F9B E0               [24] 3219 	movx	a,@dptr
      000F9C FD               [12] 3220 	mov	r5,a
      000F9D A3               [24] 3221 	inc	dptr
      000F9E E0               [24] 3222 	movx	a,@dptr
      000F9F FE               [12] 3223 	mov	r6,a
      000FA0 A3               [24] 3224 	inc	dptr
      000FA1 E0               [24] 3225 	movx	a,@dptr
      000FA2 FF               [12] 3226 	mov	r7,a
      000FA3 30 E7 2B         [24] 3227 	jnb	acc.7,00184$
                                   3228 ;	printf_large.c:750: value.l = -value.l;
      000FA6 90r00r06         [24] 3229 	mov	dptr,#_value
      000FA9 E0               [24] 3230 	movx	a,@dptr
      000FAA FB               [12] 3231 	mov	r3,a
      000FAB A3               [24] 3232 	inc	dptr
      000FAC E0               [24] 3233 	movx	a,@dptr
      000FAD FD               [12] 3234 	mov	r5,a
      000FAE A3               [24] 3235 	inc	dptr
      000FAF E0               [24] 3236 	movx	a,@dptr
      000FB0 FE               [12] 3237 	mov	r6,a
      000FB1 A3               [24] 3238 	inc	dptr
      000FB2 E0               [24] 3239 	movx	a,@dptr
      000FB3 FF               [12] 3240 	mov	r7,a
      000FB4 C3               [12] 3241 	clr	c
      000FB5 E4               [12] 3242 	clr	a
      000FB6 9B               [12] 3243 	subb	a,r3
      000FB7 FB               [12] 3244 	mov	r3,a
      000FB8 E4               [12] 3245 	clr	a
      000FB9 9D               [12] 3246 	subb	a,r5
      000FBA FD               [12] 3247 	mov	r5,a
      000FBB E4               [12] 3248 	clr	a
      000FBC 9E               [12] 3249 	subb	a,r6
      000FBD FE               [12] 3250 	mov	r6,a
      000FBE E4               [12] 3251 	clr	a
      000FBF 9F               [12] 3252 	subb	a,r7
      000FC0 FF               [12] 3253 	mov	r7,a
      000FC1 90r00r06         [24] 3254 	mov	dptr,#_value
      000FC4 EB               [12] 3255 	mov	a,r3
      000FC5 F0               [24] 3256 	movx	@dptr,a
      000FC6 ED               [12] 3257 	mov	a,r5
      000FC7 A3               [24] 3258 	inc	dptr
      000FC8 F0               [24] 3259 	movx	@dptr,a
      000FC9 EE               [12] 3260 	mov	a,r6
      000FCA A3               [24] 3261 	inc	dptr
      000FCB F0               [24] 3262 	movx	@dptr,a
      000FCC EF               [12] 3263 	mov	a,r7
      000FCD A3               [24] 3264 	inc	dptr
      000FCE F0               [24] 3265 	movx	@dptr,a
      000FCF 80 05            [24] 3266 	sjmp	00187$
      000FD1                       3267 00184$:
                                   3268 ;	printf_large.c:752: signed_argument = 0;
      000FD1 90r00rB8         [24] 3269 	mov	dptr,#__print_format_signed_argument_1_100
      000FD4 E4               [12] 3270 	clr	a
      000FD5 F0               [24] 3271 	movx	@dptr,a
      000FD6                       3272 00187$:
                                   3273 ;	printf_large.c:756: lsd = 1;
      000FD6 90r00rBC         [24] 3274 	mov	dptr,#__print_format_lsd_1_100
      000FD9 74 01            [12] 3275 	mov	a,#0x01
      000FDB F0               [24] 3276 	movx	@dptr,a
                                   3277 ;	printf_large.c:758: do {
      000FDC 90r00rBD         [24] 3278 	mov	dptr,#__print_format_radix_1_100
      000FDF E0               [24] 3279 	movx	a,@dptr
      000FE0 F5*10            [12] 3280 	mov	__print_format_sloc4_1_0,a
      000FE2 75*11rC7         [24] 3281 	mov	__print_format_sloc5_1_0,#(__print_format_store_4_120 + 0x0005)
      000FE5 75*12s00         [24] 3282 	mov	(__print_format_sloc5_1_0 + 1),#((__print_format_store_4_120 + 0x0005) >> 8)
      000FE8 75*0F 00         [24] 3283 	mov	__print_format_sloc3_1_0,#0x00
      000FEB                       3284 00191$:
                                   3285 ;	printf_large.c:759: value.byte[4] = 0;
      000FEB 90r00r0A         [24] 3286 	mov	dptr,#(_value + 0x0004)
      000FEE E4               [12] 3287 	clr	a
      000FEF F0               [24] 3288 	movx	@dptr,a
                                   3289 ;	printf_large.c:763: calculate_digit(radix);
      000FF0 85*10 82         [24] 3290 	mov	dpl,__print_format_sloc4_1_0
      000FF3 12r00r8D         [24] 3291 	lcall	_calculate_digit
                                   3292 ;	printf_large.c:765: if (!lsd)
      000FF6 90r00rBC         [24] 3293 	mov	dptr,#__print_format_lsd_1_100
      000FF9 E0               [24] 3294 	movx	a,@dptr
      000FFA 70 23            [24] 3295 	jnz	00189$
                                   3296 ;	printf_large.c:767: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
      000FFC 90r00r0A         [24] 3297 	mov	dptr,#(_value + 0x0004)
      000FFF E0               [24] 3298 	movx	a,@dptr
      001000 C4               [12] 3299 	swap	a
      001001 FA               [12] 3300 	mov	r2,a
      001002 85*11 82         [24] 3301 	mov	dpl,__print_format_sloc5_1_0
      001005 85*12 83         [24] 3302 	mov	dph,(__print_format_sloc5_1_0 + 1)
      001008 E0               [24] 3303 	movx	a,@dptr
      001009 FF               [12] 3304 	mov	r7,a
      00100A 42 02            [12] 3305 	orl	ar2,a
      00100C 85*11 82         [24] 3306 	mov	dpl,__print_format_sloc5_1_0
      00100F 85*12 83         [24] 3307 	mov	dph,(__print_format_sloc5_1_0 + 1)
      001012 EA               [12] 3308 	mov	a,r2
      001013 F0               [24] 3309 	movx	@dptr,a
                                   3310 ;	printf_large.c:768: pstore--;
      001014 15*11            [12] 3311 	dec	__print_format_sloc5_1_0
      001016 74 FF            [12] 3312 	mov	a,#0xff
      001018 B5*11 02         [24] 3313 	cjne	a,__print_format_sloc5_1_0,00556$
      00101B 15*12            [12] 3314 	dec	(__print_format_sloc5_1_0 + 1)
      00101D                       3315 00556$:
      00101D 80 0C            [24] 3316 	sjmp	00190$
      00101F                       3317 00189$:
                                   3318 ;	printf_large.c:772: *pstore = value.byte[4];
      00101F 90r00r0A         [24] 3319 	mov	dptr,#(_value + 0x0004)
      001022 E0               [24] 3320 	movx	a,@dptr
      001023 FA               [12] 3321 	mov	r2,a
      001024 85*11 82         [24] 3322 	mov	dpl,__print_format_sloc5_1_0
      001027 85*12 83         [24] 3323 	mov	dph,(__print_format_sloc5_1_0 + 1)
      00102A F0               [24] 3324 	movx	@dptr,a
      00102B                       3325 00190$:
                                   3326 ;	printf_large.c:774: length++;
      00102B 05*0F            [12] 3327 	inc	__print_format_sloc3_1_0
                                   3328 ;	printf_large.c:775: lsd = !lsd;
      00102D 90r00rBC         [24] 3329 	mov	dptr,#__print_format_lsd_1_100
      001030 E0               [24] 3330 	movx	a,@dptr
      001031 FA               [12] 3331 	mov	r2,a
      001032 B4 01 00         [24] 3332 	cjne	a,#0x01,00557$
      001035                       3333 00557$:
      001035 E4               [12] 3334 	clr	a
      001036 33               [12] 3335 	rlc	a
      001037 F0               [24] 3336 	movx	@dptr,a
                                   3337 ;	printf_large.c:776: } while( value.ul );
      001038 90r00r06         [24] 3338 	mov	dptr,#_value
      00103B E0               [24] 3339 	movx	a,@dptr
      00103C FA               [12] 3340 	mov	r2,a
      00103D A3               [24] 3341 	inc	dptr
      00103E E0               [24] 3342 	movx	a,@dptr
      00103F FB               [12] 3343 	mov	r3,a
      001040 A3               [24] 3344 	inc	dptr
      001041 E0               [24] 3345 	movx	a,@dptr
      001042 FE               [12] 3346 	mov	r6,a
      001043 A3               [24] 3347 	inc	dptr
      001044 E0               [24] 3348 	movx	a,@dptr
      001045 FF               [12] 3349 	mov	r7,a
      001046 EA               [12] 3350 	mov	a,r2
      001047 4B               [12] 3351 	orl	a,r3
      001048 4E               [12] 3352 	orl	a,r6
      001049 4F               [12] 3353 	orl	a,r7
      00104A 70 9F            [24] 3354 	jnz	00191$
                                   3355 ;	printf_large.c:778: if (width == 0)
      00104C 90r00rC8         [24] 3356 	mov	dptr,#__print_format_pstore_4_120
      00104F E5*11            [12] 3357 	mov	a,__print_format_sloc5_1_0
      001051 F0               [24] 3358 	movx	@dptr,a
      001052 E5*12            [12] 3359 	mov	a,(__print_format_sloc5_1_0 + 1)
      001054 A3               [24] 3360 	inc	dptr
      001055 F0               [24] 3361 	movx	@dptr,a
      001056 90r00rC0         [24] 3362 	mov	dptr,#__print_format_length_1_100
      001059 E5*0F            [12] 3363 	mov	a,__print_format_sloc3_1_0
      00105B F0               [24] 3364 	movx	@dptr,a
      00105C 90r00rBE         [24] 3365 	mov	dptr,#__print_format_width_1_100
      00105F E0               [24] 3366 	movx	a,@dptr
      001060 70 06            [24] 3367 	jnz	00195$
                                   3368 ;	printf_large.c:783: width = 1;
      001062 90r00rBE         [24] 3369 	mov	dptr,#__print_format_width_1_100
      001065 74 01            [12] 3370 	mov	a,#0x01
      001067 F0               [24] 3371 	movx	@dptr,a
      001068                       3372 00195$:
                                   3373 ;	printf_large.c:787: if (!zero_padding && !left_justify)
      001068 90r00rB5         [24] 3374 	mov	dptr,#__print_format_zero_padding_1_100
      00106B E0               [24] 3375 	movx	a,@dptr
      00106C FF               [12] 3376 	mov	r7,a
      00106D E0               [24] 3377 	movx	a,@dptr
      00106E 70 42            [24] 3378 	jnz	00200$
      001070 90r00rB4         [24] 3379 	mov	dptr,#__print_format_left_justify_1_100
      001073 E0               [24] 3380 	movx	a,@dptr
      001074 70 3C            [24] 3381 	jnz	00200$
                                   3382 ;	printf_large.c:789: while ( width > (unsigned char) (length+1) )
      001076 E5*0F            [12] 3383 	mov	a,__print_format_sloc3_1_0
      001078 04               [12] 3384 	inc	a
      001079 FE               [12] 3385 	mov	r6,a
      00107A 90r00rBE         [24] 3386 	mov	dptr,#__print_format_width_1_100
      00107D E0               [24] 3387 	movx	a,@dptr
      00107E FD               [12] 3388 	mov	r5,a
      00107F                       3389 00196$:
      00107F C3               [12] 3390 	clr	c
      001080 EE               [12] 3391 	mov	a,r6
      001081 9D               [12] 3392 	subb	a,r5
      001082 50 29            [24] 3393 	jnc	00328$
                                   3394 ;	printf_large.c:791: OUTPUT_CHAR( ' ', p );
      001084 C0 00            [24] 3395 	push	ar0
      001086 E5*00            [12] 3396 	mov	a,_spx
      001088 F8               [12] 3397 	mov	r0,a
      001089 24 03            [12] 3398 	add	a,#0x03
      00108B F5*00            [12] 3399 	mov	_spx,a
      00108D EF               [12] 3400 	mov	a,r7
      00108E F2               [24] 3401 	movx	@r0,a
      00108F 08               [12] 3402 	inc	r0
      001090 EE               [12] 3403 	mov	a,r6
      001091 F2               [24] 3404 	movx	@r0,a
      001092 08               [12] 3405 	inc	r0
      001093 ED               [12] 3406 	mov	a,r5
      001094 F2               [24] 3407 	movx	@r0,a
      001095 D0 00            [24] 3408 	pop	ar0
      001097 75 82 20         [24] 3409 	mov	dpl,#0x20
      00109A 12r00r00         [24] 3410 	lcall	__output_char
      00109D A8*00            [24] 3411 	mov	r0,_spx
      00109F 18               [12] 3412 	dec	r0
      0010A0 E2               [24] 3413 	movx	a,@r0
      0010A1 FD               [12] 3414 	mov	r5,a
      0010A2 18               [12] 3415 	dec	r0
      0010A3 E2               [24] 3416 	movx	a,@r0
      0010A4 FE               [12] 3417 	mov	r6,a
      0010A5 18               [12] 3418 	dec	r0
      0010A6 E2               [24] 3419 	movx	a,@r0
      0010A7 FF               [12] 3420 	mov	r7,a
      0010A8 88*00            [24] 3421 	mov	_spx,r0
                                   3422 ;	printf_large.c:792: width--;
      0010AA 1D               [12] 3423 	dec	r5
      0010AB 80 D2            [24] 3424 	sjmp	00196$
      0010AD                       3425 00328$:
      0010AD 90r00rBE         [24] 3426 	mov	dptr,#__print_format_width_1_100
      0010B0 ED               [12] 3427 	mov	a,r5
      0010B1 F0               [24] 3428 	movx	@dptr,a
      0010B2                       3429 00200$:
                                   3430 ;	printf_large.c:796: if (signed_argument) // this now means the original value was negative
      0010B2 90r00rB8         [24] 3431 	mov	dptr,#__print_format_signed_argument_1_100
      0010B5 E0               [24] 3432 	movx	a,@dptr
      0010B6 60 1F            [24] 3433 	jz	00210$
                                   3434 ;	printf_large.c:798: OUTPUT_CHAR( '-', p );
      0010B8 C0 00            [24] 3435 	push	ar0
      0010BA EF               [12] 3436 	mov	a,r7
      0010BB A8*00            [24] 3437 	mov	r0,_spx
      0010BD 05*00            [12] 3438 	inc	_spx
      0010BF F2               [24] 3439 	movx	@r0,a
      0010C0 D0 00            [24] 3440 	pop	ar0
      0010C2 75 82 2D         [24] 3441 	mov	dpl,#0x2d
      0010C5 12r00r00         [24] 3442 	lcall	__output_char
      0010C8 A8*00            [24] 3443 	mov	r0,_spx
      0010CA 18               [12] 3444 	dec	r0
      0010CB E2               [24] 3445 	movx	a,@r0
      0010CC FF               [12] 3446 	mov	r7,a
      0010CD 15*00            [12] 3447 	dec	_spx
                                   3448 ;	printf_large.c:800: width--;
      0010CF 90r00rBE         [24] 3449 	mov	dptr,#__print_format_width_1_100
      0010D2 E0               [24] 3450 	movx	a,@dptr
      0010D3 14               [12] 3451 	dec	a
      0010D4 F0               [24] 3452 	movx	@dptr,a
      0010D5 80 4E            [24] 3453 	sjmp	00211$
      0010D7                       3454 00210$:
                                   3455 ;	printf_large.c:802: else if (length != 0)
      0010D7 90r00rC0         [24] 3456 	mov	dptr,#__print_format_length_1_100
      0010DA E0               [24] 3457 	movx	a,@dptr
      0010DB 60 48            [24] 3458 	jz	00211$
                                   3459 ;	printf_large.c:805: if (prefix_sign)
      0010DD 90r00rB6         [24] 3460 	mov	dptr,#__print_format_prefix_sign_1_100
      0010E0 E0               [24] 3461 	movx	a,@dptr
      0010E1 60 1F            [24] 3462 	jz	00205$
                                   3463 ;	printf_large.c:807: OUTPUT_CHAR( '+', p );
      0010E3 C0 00            [24] 3464 	push	ar0
      0010E5 EF               [12] 3465 	mov	a,r7
      0010E6 A8*00            [24] 3466 	mov	r0,_spx
      0010E8 05*00            [12] 3467 	inc	_spx
      0010EA F2               [24] 3468 	movx	@r0,a
      0010EB D0 00            [24] 3469 	pop	ar0
      0010ED 75 82 2B         [24] 3470 	mov	dpl,#0x2b
      0010F0 12r00r00         [24] 3471 	lcall	__output_char
      0010F3 A8*00            [24] 3472 	mov	r0,_spx
      0010F5 18               [12] 3473 	dec	r0
      0010F6 E2               [24] 3474 	movx	a,@r0
      0010F7 FF               [12] 3475 	mov	r7,a
      0010F8 15*00            [12] 3476 	dec	_spx
                                   3477 ;	printf_large.c:809: width--;
      0010FA 90r00rBE         [24] 3478 	mov	dptr,#__print_format_width_1_100
      0010FD E0               [24] 3479 	movx	a,@dptr
      0010FE 14               [12] 3480 	dec	a
      0010FF F0               [24] 3481 	movx	@dptr,a
      001100 80 23            [24] 3482 	sjmp	00211$
      001102                       3483 00205$:
                                   3484 ;	printf_large.c:811: else if (prefix_space)
      001102 90r00rB7         [24] 3485 	mov	dptr,#__print_format_prefix_space_1_100
      001105 E0               [24] 3486 	movx	a,@dptr
      001106 60 1D            [24] 3487 	jz	00211$
                                   3488 ;	printf_large.c:813: OUTPUT_CHAR( ' ', p );
      001108 C0 00            [24] 3489 	push	ar0
      00110A EF               [12] 3490 	mov	a,r7
      00110B A8*00            [24] 3491 	mov	r0,_spx
      00110D 05*00            [12] 3492 	inc	_spx
      00110F F2               [24] 3493 	movx	@r0,a
      001110 D0 00            [24] 3494 	pop	ar0
      001112 75 82 20         [24] 3495 	mov	dpl,#0x20
      001115 12r00r00         [24] 3496 	lcall	__output_char
      001118 A8*00            [24] 3497 	mov	r0,_spx
      00111A 18               [12] 3498 	dec	r0
      00111B E2               [24] 3499 	movx	a,@r0
      00111C FF               [12] 3500 	mov	r7,a
      00111D 15*00            [12] 3501 	dec	_spx
                                   3502 ;	printf_large.c:815: width--;
      00111F 90r00rBE         [24] 3503 	mov	dptr,#__print_format_width_1_100
      001122 E0               [24] 3504 	movx	a,@dptr
      001123 14               [12] 3505 	dec	a
      001124 F0               [24] 3506 	movx	@dptr,a
      001125                       3507 00211$:
                                   3508 ;	printf_large.c:820: if (!left_justify)
      001125 90r00rB4         [24] 3509 	mov	dptr,#__print_format_left_justify_1_100
      001128 E0               [24] 3510 	movx	a,@dptr
      001129 70 46            [24] 3511 	jnz	00219$
                                   3512 ;	printf_large.c:822: while ( width-- > length )
      00112B 90r00rC0         [24] 3513 	mov	dptr,#__print_format_length_1_100
      00112E E0               [24] 3514 	movx	a,@dptr
      00112F FE               [12] 3515 	mov	r6,a
      001130 90r00rBE         [24] 3516 	mov	dptr,#__print_format_width_1_100
      001133 E0               [24] 3517 	movx	a,@dptr
      001134 FD               [12] 3518 	mov	r5,a
      001135                       3519 00212$:
      001135 8D 03            [24] 3520 	mov	ar3,r5
      001137 1D               [12] 3521 	dec	r5
      001138 C3               [12] 3522 	clr	c
      001139 EE               [12] 3523 	mov	a,r6
      00113A 9B               [12] 3524 	subb	a,r3
      00113B 50 52            [24] 3525 	jnc	00329$
                                   3526 ;	printf_large.c:824: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
      00113D EF               [12] 3527 	mov	a,r7
      00113E 60 06            [24] 3528 	jz	00245$
      001140 7A 30            [12] 3529 	mov	r2,#0x30
      001142 7B 00            [12] 3530 	mov	r3,#0x00
      001144 80 04            [24] 3531 	sjmp	00246$
      001146                       3532 00245$:
      001146 7A 20            [12] 3533 	mov	r2,#0x20
      001148 7B 00            [12] 3534 	mov	r3,#0x00
      00114A                       3535 00246$:
      00114A C0 00            [24] 3536 	push	ar0
      00114C E5*00            [12] 3537 	mov	a,_spx
      00114E F8               [12] 3538 	mov	r0,a
      00114F 24 03            [12] 3539 	add	a,#0x03
      001151 F5*00            [12] 3540 	mov	_spx,a
      001153 EF               [12] 3541 	mov	a,r7
      001154 F2               [24] 3542 	movx	@r0,a
      001155 08               [12] 3543 	inc	r0
      001156 EE               [12] 3544 	mov	a,r6
      001157 F2               [24] 3545 	movx	@r0,a
      001158 08               [12] 3546 	inc	r0
      001159 ED               [12] 3547 	mov	a,r5
      00115A F2               [24] 3548 	movx	@r0,a
      00115B D0 00            [24] 3549 	pop	ar0
      00115D 8A 82            [24] 3550 	mov	dpl,r2
      00115F 12r00r00         [24] 3551 	lcall	__output_char
      001162 A8*00            [24] 3552 	mov	r0,_spx
      001164 18               [12] 3553 	dec	r0
      001165 E2               [24] 3554 	movx	a,@r0
      001166 FD               [12] 3555 	mov	r5,a
      001167 18               [12] 3556 	dec	r0
      001168 E2               [24] 3557 	movx	a,@r0
      001169 FE               [12] 3558 	mov	r6,a
      00116A 18               [12] 3559 	dec	r0
      00116B E2               [24] 3560 	movx	a,@r0
      00116C FF               [12] 3561 	mov	r7,a
      00116D 88*00            [24] 3562 	mov	_spx,r0
      00116F 80 C4            [24] 3563 	sjmp	00212$
      001171                       3564 00219$:
                                   3565 ;	printf_large.c:830: if (width > length)
      001171 90r00rBE         [24] 3566 	mov	dptr,#__print_format_width_1_100
      001174 E0               [24] 3567 	movx	a,@dptr
      001175 FF               [12] 3568 	mov	r7,a
      001176 90r00rC0         [24] 3569 	mov	dptr,#__print_format_length_1_100
      001179 E0               [24] 3570 	movx	a,@dptr
      00117A FE               [12] 3571 	mov	r6,a
      00117B C3               [12] 3572 	clr	c
      00117C 9F               [12] 3573 	subb	a,r7
      00117D 50 09            [24] 3574 	jnc	00216$
                                   3575 ;	printf_large.c:831: width -= length;
      00117F 90r00rBE         [24] 3576 	mov	dptr,#__print_format_width_1_100
      001182 EF               [12] 3577 	mov	a,r7
      001183 C3               [12] 3578 	clr	c
      001184 9E               [12] 3579 	subb	a,r6
      001185 F0               [24] 3580 	movx	@dptr,a
      001186 80 0C            [24] 3581 	sjmp	00321$
      001188                       3582 00216$:
                                   3583 ;	printf_large.c:833: width = 0;
      001188 90r00rBE         [24] 3584 	mov	dptr,#__print_format_width_1_100
      00118B E4               [12] 3585 	clr	a
      00118C F0               [24] 3586 	movx	@dptr,a
                                   3587 ;	printf_large.c:872: return charsOutputted;
                                   3588 ;	printf_large.c:837: while( length-- )
      00118D 80 05            [24] 3589 	sjmp	00321$
      00118F                       3590 00329$:
      00118F 90r00rBE         [24] 3591 	mov	dptr,#__print_format_width_1_100
      001192 ED               [12] 3592 	mov	a,r5
      001193 F0               [24] 3593 	movx	@dptr,a
      001194                       3594 00321$:
      001194 90r00rC8         [24] 3595 	mov	dptr,#__print_format_pstore_4_120
      001197 E0               [24] 3596 	movx	a,@dptr
      001198 FE               [12] 3597 	mov	r6,a
      001199 A3               [24] 3598 	inc	dptr
      00119A E0               [24] 3599 	movx	a,@dptr
      00119B FF               [12] 3600 	mov	r7,a
      00119C 90r00rC0         [24] 3601 	mov	dptr,#__print_format_length_1_100
      00119F E0               [24] 3602 	movx	a,@dptr
      0011A0 FD               [12] 3603 	mov	r5,a
      0011A1                       3604 00224$:
      0011A1 8D 03            [24] 3605 	mov	ar3,r5
      0011A3 1D               [12] 3606 	dec	r5
      0011A4 EB               [12] 3607 	mov	a,r3
      0011A5 60 5F            [24] 3608 	jz	00226$
                                   3609 ;	printf_large.c:839: lsd = !lsd;
      0011A7 90r00rBC         [24] 3610 	mov	dptr,#__print_format_lsd_1_100
      0011AA E0               [24] 3611 	movx	a,@dptr
      0011AB FB               [12] 3612 	mov	r3,a
      0011AC B4 01 00         [24] 3613 	cjne	a,#0x01,00572$
      0011AF                       3614 00572$:
      0011AF E4               [12] 3615 	clr	a
      0011B0 33               [12] 3616 	rlc	a
      0011B1 F0               [24] 3617 	movx	@dptr,a
                                   3618 ;	printf_large.c:840: if (!lsd)
      0011B2 90r00rBC         [24] 3619 	mov	dptr,#__print_format_lsd_1_100
      0011B5 E0               [24] 3620 	movx	a,@dptr
      0011B6 70 14            [24] 3621 	jnz	00222$
                                   3622 ;	printf_large.c:842: pstore++;
      0011B8 0E               [12] 3623 	inc	r6
      0011B9 BE 00 01         [24] 3624 	cjne	r6,#0x00,00574$
      0011BC 0F               [12] 3625 	inc	r7
      0011BD                       3626 00574$:
                                   3627 ;	printf_large.c:843: value.byte[4] = *pstore >> 4;
      0011BD 8E 82            [24] 3628 	mov	dpl,r6
      0011BF 8F 83            [24] 3629 	mov	dph,r7
      0011C1 E0               [24] 3630 	movx	a,@dptr
      0011C2 C4               [12] 3631 	swap	a
      0011C3 54 0F            [12] 3632 	anl	a,#0x0f
      0011C5 FB               [12] 3633 	mov	r3,a
      0011C6 90r00r0A         [24] 3634 	mov	dptr,#(_value + 0x0004)
      0011C9 F0               [24] 3635 	movx	@dptr,a
      0011CA 80 0E            [24] 3636 	sjmp	00223$
      0011CC                       3637 00222$:
                                   3638 ;	printf_large.c:847: value.byte[4] = *pstore & 0x0F;
      0011CC 8E 82            [24] 3639 	mov	dpl,r6
      0011CE 8F 83            [24] 3640 	mov	dph,r7
      0011D0 E0               [24] 3641 	movx	a,@dptr
      0011D1 FB               [12] 3642 	mov	r3,a
      0011D2 53 03 0F         [24] 3643 	anl	ar3,#0x0f
      0011D5 90r00r0A         [24] 3644 	mov	dptr,#(_value + 0x0004)
      0011D8 EB               [12] 3645 	mov	a,r3
      0011D9 F0               [24] 3646 	movx	@dptr,a
      0011DA                       3647 00223$:
                                   3648 ;	printf_large.c:853: output_digit( value.byte[4] );
      0011DA 90r00r0A         [24] 3649 	mov	dptr,#(_value + 0x0004)
      0011DD E0               [24] 3650 	movx	a,@dptr
      0011DE FB               [12] 3651 	mov	r3,a
      0011DF C0 00            [24] 3652 	push	ar0
      0011E1 E5*00            [12] 3653 	mov	a,_spx
      0011E3 F8               [12] 3654 	mov	r0,a
      0011E4 24 03            [12] 3655 	add	a,#0x03
      0011E6 F5*00            [12] 3656 	mov	_spx,a
      0011E8 EF               [12] 3657 	mov	a,r7
      0011E9 F2               [24] 3658 	movx	@r0,a
      0011EA 08               [12] 3659 	inc	r0
      0011EB EE               [12] 3660 	mov	a,r6
      0011EC F2               [24] 3661 	movx	@r0,a
      0011ED 08               [12] 3662 	inc	r0
      0011EE ED               [12] 3663 	mov	a,r5
      0011EF F2               [24] 3664 	movx	@r0,a
      0011F0 D0 00            [24] 3665 	pop	ar0
      0011F2 8B 82            [24] 3666 	mov	dpl,r3
      0011F4 12r00r42         [24] 3667 	lcall	_output_digit
      0011F7 A8*00            [24] 3668 	mov	r0,_spx
      0011F9 18               [12] 3669 	dec	r0
      0011FA E2               [24] 3670 	movx	a,@r0
      0011FB FD               [12] 3671 	mov	r5,a
      0011FC 18               [12] 3672 	dec	r0
      0011FD E2               [24] 3673 	movx	a,@r0
      0011FE FE               [12] 3674 	mov	r6,a
      0011FF 18               [12] 3675 	dec	r0
      001200 E2               [24] 3676 	movx	a,@r0
      001201 FF               [12] 3677 	mov	r7,a
      001202 88*00            [24] 3678 	mov	_spx,r0
      001204 80 9B            [24] 3679 	sjmp	00224$
      001206                       3680 00226$:
                                   3681 ;	printf_large.c:856: if (left_justify)
      001206 90r00rB4         [24] 3682 	mov	dptr,#__print_format_left_justify_1_100
      001209 E0               [24] 3683 	movx	a,@dptr
      00120A 70 03            [24] 3684 	jnz	00575$
      00120C 02r0Ar09         [24] 3685 	ljmp	00240$
      00120F                       3686 00575$:
                                   3687 ;	printf_large.c:858: while (width-- > 0)
      00120F 90r00rBE         [24] 3688 	mov	dptr,#__print_format_width_1_100
      001212 E0               [24] 3689 	movx	a,@dptr
      001213 FF               [12] 3690 	mov	r7,a
      001214                       3691 00227$:
      001214 8F 06            [24] 3692 	mov	ar6,r7
      001216 1F               [12] 3693 	dec	r7
      001217 EE               [12] 3694 	mov	a,r6
      001218 70 03            [24] 3695 	jnz	00576$
      00121A 02r0Ar09         [24] 3696 	ljmp	00240$
      00121D                       3697 00576$:
                                   3698 ;	printf_large.c:860: OUTPUT_CHAR(' ', p);
      00121D C0 00            [24] 3699 	push	ar0
      00121F EF               [12] 3700 	mov	a,r7
      001220 A8*00            [24] 3701 	mov	r0,_spx
      001222 05*00            [12] 3702 	inc	_spx
      001224 F2               [24] 3703 	movx	@r0,a
      001225 D0 00            [24] 3704 	pop	ar0
      001227 75 82 20         [24] 3705 	mov	dpl,#0x20
      00122A 12r00r00         [24] 3706 	lcall	__output_char
      00122D A8*00            [24] 3707 	mov	r0,_spx
      00122F 18               [12] 3708 	dec	r0
      001230 E2               [24] 3709 	movx	a,@r0
      001231 FF               [12] 3710 	mov	r7,a
      001232 15*00            [12] 3711 	dec	_spx
      001234 80 DE            [24] 3712 	sjmp	00227$
      001236                       3713 00238$:
                                   3714 ;	printf_large.c:868: OUTPUT_CHAR( c, p );
      001236 8C 82            [24] 3715 	mov	dpl,r4
      001238 12r00r00         [24] 3716 	lcall	__output_char
      00123B 02r0Ar09         [24] 3717 	ljmp	00240$
      00123E                       3718 00242$:
                                   3719 ;	printf_large.c:872: return charsOutputted;
      00123E 90r00r0B         [24] 3720 	mov	dptr,#_charsOutputted
      001241 E0               [24] 3721 	movx	a,@dptr
      001242 FE               [12] 3722 	mov	r6,a
      001243 A3               [24] 3723 	inc	dptr
      001244 E0               [24] 3724 	movx	a,@dptr
      001245 8E 82            [24] 3725 	mov	dpl,r6
      001247 F5 83            [12] 3726 	mov	dph,a
      001249 22               [24] 3727 	ret
                                   3728 	.area CSEG    (CODE)
                                   3729 	.area CONST   (CODE)
                                   3730 	.area XINIT   (CODE)
                                   3731 	.area CABS    (ABS,CODE)
