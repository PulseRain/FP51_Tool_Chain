                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.3 #9771 (MSVC)
                                      4 ;--------------------------------------------------------
                                      5 	.module sprintf
                                      6 	.optsdcc -mmcs51 --model-large --xstack
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl __print_format
                                     12 	.globl _vsprintf_PARM_3
                                     13 	.globl _vsprintf_PARM_2
                                     14 	.globl _vsprintf
                                     15 	.globl _sprintf
                                     16 ;--------------------------------------------------------
                                     17 ; special function registers
                                     18 ;--------------------------------------------------------
                                     19 	.area RSEG    (ABS,DATA)
      000000                         20 	.org 0x0000
                                     21 ;--------------------------------------------------------
                                     22 ; special function bits
                                     23 ;--------------------------------------------------------
                                     24 	.area RSEG    (ABS,DATA)
      000000                         25 	.org 0x0000
                                     26 ;--------------------------------------------------------
                                     27 ; overlayable register banks
                                     28 ;--------------------------------------------------------
                                     29 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         30 	.ds 8
                                     31 ;--------------------------------------------------------
                                     32 ; internal ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DSEG    (DATA)
                                     35 ;--------------------------------------------------------
                                     36 ; overlayable items in internal ram 
                                     37 ;--------------------------------------------------------
                                     38 ;--------------------------------------------------------
                                     39 ; indirectly addressable internal ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area ISEG    (DATA)
                                     42 ;--------------------------------------------------------
                                     43 ; absolute internal ram data
                                     44 ;--------------------------------------------------------
                                     45 	.area IABS    (ABS,DATA)
                                     46 	.area IABS    (ABS,DATA)
                                     47 ;--------------------------------------------------------
                                     48 ; bit data
                                     49 ;--------------------------------------------------------
                                     50 	.area BSEG    (BIT)
                                     51 ;--------------------------------------------------------
                                     52 ; paged external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area PSEG    (PAG,XDATA)
                                     55 ;--------------------------------------------------------
                                     56 ; external ram data
                                     57 ;--------------------------------------------------------
                                     58 	.area XSEG    (XDATA)
      000000                         59 _vsprintf_PARM_2:
      000000                         60 	.ds 3
      000003                         61 _vsprintf_PARM_3:
      000003                         62 	.ds 1
      000004                         63 _vsprintf_buf_1_13:
      000004                         64 	.ds 3
                                     65 ;--------------------------------------------------------
                                     66 ; absolute external ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area XABS    (ABS,XDATA)
                                     69 ;--------------------------------------------------------
                                     70 ; external initialized ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area XISEG   (XDATA)
                                     73 	.area HOME    (CODE)
                                     74 	.area GSINIT0 (CODE)
                                     75 	.area GSINIT1 (CODE)
                                     76 	.area GSINIT2 (CODE)
                                     77 	.area GSINIT3 (CODE)
                                     78 	.area GSINIT4 (CODE)
                                     79 	.area GSINIT5 (CODE)
                                     80 	.area GSINIT  (CODE)
                                     81 	.area GSFINAL (CODE)
                                     82 	.area CSEG    (CODE)
                                     83 ;--------------------------------------------------------
                                     84 ; global & static initialisations
                                     85 ;--------------------------------------------------------
                                     86 	.area HOME    (CODE)
                                     87 	.area GSINIT  (CODE)
                                     88 	.area GSFINAL (CODE)
                                     89 	.area GSINIT  (CODE)
                                     90 ;--------------------------------------------------------
                                     91 ; Home
                                     92 ;--------------------------------------------------------
                                     93 	.area HOME    (CODE)
                                     94 	.area HOME    (CODE)
                                     95 ;--------------------------------------------------------
                                     96 ; code
                                     97 ;--------------------------------------------------------
                                     98 	.area CSEG    (CODE)
                                     99 ;------------------------------------------------------------
                                    100 ;Allocation info for local variables in function 'put_char_to_string'
                                    101 ;------------------------------------------------------------
                                    102 ;p                         Allocated to stack - _bpx -4
                                    103 ;c                         Allocated to stack - _bpx +0
                                    104 ;buf                       Allocated to stack - _bpx +1
                                    105 ;sloc0                     Allocated to stack - _bp +1
                                    106 ;------------------------------------------------------------
                                    107 ;	sprintf.c:34: put_char_to_string (char c, void* p) _REENTRANT
                                    108 ;	-----------------------------------------
                                    109 ;	 function put_char_to_string
                                    110 ;	-----------------------------------------
      000000                        111 _put_char_to_string:
                           000007   112 	ar7 = 0x07
                           000006   113 	ar6 = 0x06
                           000005   114 	ar5 = 0x05
                           000004   115 	ar4 = 0x04
                           000003   116 	ar3 = 0x03
                           000002   117 	ar2 = 0x02
                           000001   118 	ar1 = 0x01
                           000000   119 	ar0 = 0x00
      000000 A8*00            [24]  120 	mov	r0,_spx
      000002 05*00            [12]  121 	inc	_spx
      000004 C5*00            [12]  122 	xch	a,_bpx
      000006 F2               [24]  123 	movx	@r0,a
      000007 08               [12]  124 	inc	r0
      000008 E8               [12]  125 	mov	a,r0
      000009 C5*00            [12]  126 	xch	a,_bpx
      00000B C0*00            [24]  127 	push	_bp
      00000D 85 81*00         [24]  128 	mov	_bp,sp
      000010 05 81            [12]  129 	inc	sp
      000012 05 81            [12]  130 	inc	sp
      000014 05 81            [12]  131 	inc	sp
      000016 05*00            [12]  132 	inc	_spx
      000018 E5 82            [12]  133 	mov	a,dpl
      00001A A8*00            [24]  134 	mov	r0,_bpx
      00001C F2               [24]  135 	movx	@r0,a
                                    136 ;	sprintf.c:36: char **buf = (char **)p;
      00001D E5*00            [12]  137 	mov	a,_bpx
      00001F 24 FC            [12]  138 	add	a,#0xfc
      000021 F8               [12]  139 	mov	r0,a
      000022 E2               [24]  140 	movx	a,@r0
      000023 FD               [12]  141 	mov	r5,a
      000024 08               [12]  142 	inc	r0
      000025 E2               [24]  143 	movx	a,@r0
      000026 FE               [12]  144 	mov	r6,a
      000027 08               [12]  145 	inc	r0
      000028 E2               [24]  146 	movx	a,@r0
      000029 FF               [12]  147 	mov	r7,a
                                    148 ;	sprintf.c:37: *(*buf)++ = c;
      00002A 8D 82            [24]  149 	mov	dpl,r5
      00002C 8E 83            [24]  150 	mov	dph,r6
      00002E 8F F0            [24]  151 	mov	b,r7
      000030 A8*00            [24]  152 	mov	r0,_bp
      000032 08               [12]  153 	inc	r0
      000033 12r00r00         [24]  154 	lcall	__gptrget
      000036 F6               [12]  155 	mov	@r0,a
      000037 A3               [24]  156 	inc	dptr
      000038 12r00r00         [24]  157 	lcall	__gptrget
      00003B 08               [12]  158 	inc	r0
      00003C F6               [12]  159 	mov	@r0,a
      00003D A3               [24]  160 	inc	dptr
      00003E 12r00r00         [24]  161 	lcall	__gptrget
      000041 08               [12]  162 	inc	r0
      000042 F6               [12]  163 	mov	@r0,a
      000043 A8*00            [24]  164 	mov	r0,_bp
      000045 08               [12]  165 	inc	r0
      000046 74 01            [12]  166 	mov	a,#0x01
      000048 26               [12]  167 	add	a,@r0
      000049 FA               [12]  168 	mov	r2,a
      00004A E4               [12]  169 	clr	a
      00004B 08               [12]  170 	inc	r0
      00004C 36               [12]  171 	addc	a,@r0
      00004D FB               [12]  172 	mov	r3,a
      00004E 08               [12]  173 	inc	r0
      00004F 86 04            [24]  174 	mov	ar4,@r0
      000051 8D 82            [24]  175 	mov	dpl,r5
      000053 8E 83            [24]  176 	mov	dph,r6
      000055 8F F0            [24]  177 	mov	b,r7
      000057 EA               [12]  178 	mov	a,r2
      000058 12r00r00         [24]  179 	lcall	__gptrput
      00005B A3               [24]  180 	inc	dptr
      00005C EB               [12]  181 	mov	a,r3
      00005D 12r00r00         [24]  182 	lcall	__gptrput
      000060 A3               [24]  183 	inc	dptr
      000061 EC               [12]  184 	mov	a,r4
      000062 12r00r00         [24]  185 	lcall	__gptrput
      000065 A8*00            [24]  186 	mov	r0,_bpx
      000067 E2               [24]  187 	movx	a,@r0
      000068 FF               [12]  188 	mov	r7,a
      000069 A8*00            [24]  189 	mov	r0,_bp
      00006B 08               [12]  190 	inc	r0
      00006C 86 82            [24]  191 	mov	dpl,@r0
      00006E 08               [12]  192 	inc	r0
      00006F 86 83            [24]  193 	mov	dph,@r0
      000071 08               [12]  194 	inc	r0
      000072 86 F0            [24]  195 	mov	b,@r0
      000074 EF               [12]  196 	mov	a,r7
      000075 12r00r00         [24]  197 	lcall	__gptrput
      000078 85*00 81         [24]  198 	mov	sp,_bp
      00007B D0*00            [24]  199 	pop	_bp
      00007D C5*00            [12]  200 	xch	a,_bpx
      00007F F8               [12]  201 	mov	r0,a
      000080 18               [12]  202 	dec	r0
      000081 E2               [24]  203 	movx	a,@r0
      000082 C5*00            [12]  204 	xch	a,_bpx
      000084 88*00            [24]  205 	mov	_spx,r0
      000086 22               [24]  206 	ret
                                    207 ;------------------------------------------------------------
                                    208 ;Allocation info for local variables in function 'vsprintf'
                                    209 ;------------------------------------------------------------
                                    210 ;format                    Allocated with name '_vsprintf_PARM_2'
                                    211 ;ap                        Allocated with name '_vsprintf_PARM_3'
                                    212 ;buf                       Allocated with name '_vsprintf_buf_1_13'
                                    213 ;i                         Allocated with name '_vsprintf_i_1_14'
                                    214 ;------------------------------------------------------------
                                    215 ;	sprintf.c:41: vsprintf (char *buf, const char *format, va_list ap)
                                    216 ;	-----------------------------------------
                                    217 ;	 function vsprintf
                                    218 ;	-----------------------------------------
      000087                        219 _vsprintf:
      000087 AF F0            [24]  220 	mov	r7,b
      000089 AE 83            [24]  221 	mov	r6,dph
      00008B E5 82            [12]  222 	mov	a,dpl
      00008D 90r00r04         [24]  223 	mov	dptr,#_vsprintf_buf_1_13
      000090 F0               [24]  224 	movx	@dptr,a
      000091 EE               [12]  225 	mov	a,r6
      000092 A3               [24]  226 	inc	dptr
      000093 F0               [24]  227 	movx	@dptr,a
      000094 EF               [12]  228 	mov	a,r7
      000095 A3               [24]  229 	inc	dptr
      000096 F0               [24]  230 	movx	@dptr,a
                                    231 ;	sprintf.c:44: i = _print_format (put_char_to_string, &buf, format, ap);
      000097 90r00r00         [24]  232 	mov	dptr,#_vsprintf_PARM_2
      00009A E0               [24]  233 	movx	a,@dptr
      00009B FD               [12]  234 	mov	r5,a
      00009C A3               [24]  235 	inc	dptr
      00009D E0               [24]  236 	movx	a,@dptr
      00009E FE               [12]  237 	mov	r6,a
      00009F A3               [24]  238 	inc	dptr
      0000A0 E0               [24]  239 	movx	a,@dptr
      0000A1 FF               [12]  240 	mov	r7,a
      0000A2 90r00r03         [24]  241 	mov	dptr,#_vsprintf_PARM_3
      0000A5 E0               [24]  242 	movx	a,@dptr
      0000A6 FC               [12]  243 	mov	r4,a
      0000A7 90r00r00         [24]  244 	mov	dptr,#__print_format_PARM_2
      0000AA 74r04            [12]  245 	mov	a,#_vsprintf_buf_1_13
      0000AC F0               [24]  246 	movx	@dptr,a
      0000AD 74s00            [12]  247 	mov	a,#(_vsprintf_buf_1_13 >> 8)
      0000AF A3               [24]  248 	inc	dptr
      0000B0 F0               [24]  249 	movx	@dptr,a
      0000B1 E4               [12]  250 	clr	a
      0000B2 A3               [24]  251 	inc	dptr
      0000B3 F0               [24]  252 	movx	@dptr,a
      0000B4 90r00r00         [24]  253 	mov	dptr,#__print_format_PARM_3
      0000B7 ED               [12]  254 	mov	a,r5
      0000B8 F0               [24]  255 	movx	@dptr,a
      0000B9 EE               [12]  256 	mov	a,r6
      0000BA A3               [24]  257 	inc	dptr
      0000BB F0               [24]  258 	movx	@dptr,a
      0000BC EF               [12]  259 	mov	a,r7
      0000BD A3               [24]  260 	inc	dptr
      0000BE F0               [24]  261 	movx	@dptr,a
      0000BF 90r00r00         [24]  262 	mov	dptr,#__print_format_PARM_4
      0000C2 EC               [12]  263 	mov	a,r4
      0000C3 F0               [24]  264 	movx	@dptr,a
      0000C4 90r00r00         [24]  265 	mov	dptr,#_put_char_to_string
      0000C7 12r00r00         [24]  266 	lcall	__print_format
      0000CA AE 82            [24]  267 	mov	r6,dpl
      0000CC AF 83            [24]  268 	mov	r7,dph
                                    269 ;	sprintf.c:45: *buf = 0;
      0000CE 90r00r04         [24]  270 	mov	dptr,#_vsprintf_buf_1_13
      0000D1 E0               [24]  271 	movx	a,@dptr
      0000D2 FB               [12]  272 	mov	r3,a
      0000D3 A3               [24]  273 	inc	dptr
      0000D4 E0               [24]  274 	movx	a,@dptr
      0000D5 FC               [12]  275 	mov	r4,a
      0000D6 A3               [24]  276 	inc	dptr
      0000D7 E0               [24]  277 	movx	a,@dptr
      0000D8 FD               [12]  278 	mov	r5,a
      0000D9 8B 82            [24]  279 	mov	dpl,r3
      0000DB 8C 83            [24]  280 	mov	dph,r4
      0000DD 8D F0            [24]  281 	mov	b,r5
      0000DF E4               [12]  282 	clr	a
      0000E0 12r00r00         [24]  283 	lcall	__gptrput
                                    284 ;	sprintf.c:46: return i;
      0000E3 8E 82            [24]  285 	mov	dpl,r6
      0000E5 8F 83            [24]  286 	mov	dph,r7
      0000E7 22               [24]  287 	ret
                                    288 ;------------------------------------------------------------
                                    289 ;Allocation info for local variables in function 'sprintf'
                                    290 ;------------------------------------------------------------
                                    291 ;buf                       Allocated to stack - _bpx -4
                                    292 ;format                    Allocated to stack - _bpx -7
                                    293 ;arg                       Allocated to stack - _bpx +0
                                    294 ;i                         Allocated to stack - _bpx +1
                                    295 ;sloc0                     Allocated to stack - _bp +1
                                    296 ;------------------------------------------------------------
                                    297 ;	sprintf.c:50: sprintf (char *buf, const char *format, ...)
                                    298 ;	-----------------------------------------
                                    299 ;	 function sprintf
                                    300 ;	-----------------------------------------
      0000E8                        301 _sprintf:
      0000E8 A8*00            [24]  302 	mov	r0,_spx
      0000EA 05*00            [12]  303 	inc	_spx
      0000EC C5*00            [12]  304 	xch	a,_bpx
      0000EE F2               [24]  305 	movx	@r0,a
      0000EF 08               [12]  306 	inc	r0
      0000F0 E8               [12]  307 	mov	a,r0
      0000F1 C5*00            [12]  308 	xch	a,_bpx
      0000F3 C0*00            [24]  309 	push	_bp
      0000F5 85 81*00         [24]  310 	mov	_bp,sp
      0000F8 05 81            [12]  311 	inc	sp
                                    312 ;	sprintf.c:55: va_start (arg, format);
      0000FA E5*00            [12]  313 	mov	a,_bpx
      0000FC 24 F9            [12]  314 	add	a,#0xf9
      0000FE FF               [12]  315 	mov	r7,a
      0000FF A8*00            [24]  316 	mov	r0,_bp
      000101 08               [12]  317 	inc	r0
      000102 A6 07            [24]  318 	mov	@r0,ar7
                                    319 ;	sprintf.c:56: i = _print_format (put_char_to_string, &buf, format, arg);
      000104 E5*00            [12]  320 	mov	a,_bpx
      000106 24 FC            [12]  321 	add	a,#0xfc
      000108 FE               [12]  322 	mov	r6,a
      000109 7D 00            [12]  323 	mov	r5,#0x00
      00010B 7C 60            [12]  324 	mov	r4,#0x60
      00010D E5*00            [12]  325 	mov	a,_bpx
      00010F 24 F9            [12]  326 	add	a,#0xf9
      000111 F8               [12]  327 	mov	r0,a
      000112 E2               [24]  328 	movx	a,@r0
      000113 FA               [12]  329 	mov	r2,a
      000114 08               [12]  330 	inc	r0
      000115 E2               [24]  331 	movx	a,@r0
      000116 FB               [12]  332 	mov	r3,a
      000117 08               [12]  333 	inc	r0
      000118 E2               [24]  334 	movx	a,@r0
      000119 FF               [12]  335 	mov	r7,a
      00011A 90r00r00         [24]  336 	mov	dptr,#__print_format_PARM_2
      00011D EE               [12]  337 	mov	a,r6
      00011E F0               [24]  338 	movx	@dptr,a
      00011F ED               [12]  339 	mov	a,r5
      000120 A3               [24]  340 	inc	dptr
      000121 F0               [24]  341 	movx	@dptr,a
      000122 EC               [12]  342 	mov	a,r4
      000123 A3               [24]  343 	inc	dptr
      000124 F0               [24]  344 	movx	@dptr,a
      000125 90r00r00         [24]  345 	mov	dptr,#__print_format_PARM_3
      000128 EA               [12]  346 	mov	a,r2
      000129 F0               [24]  347 	movx	@dptr,a
      00012A EB               [12]  348 	mov	a,r3
      00012B A3               [24]  349 	inc	dptr
      00012C F0               [24]  350 	movx	@dptr,a
      00012D EF               [12]  351 	mov	a,r7
      00012E A3               [24]  352 	inc	dptr
      00012F F0               [24]  353 	movx	@dptr,a
      000130 A8*00            [24]  354 	mov	r0,_bp
      000132 08               [12]  355 	inc	r0
      000133 90r00r00         [24]  356 	mov	dptr,#__print_format_PARM_4
      000136 E6               [12]  357 	mov	a,@r0
      000137 F0               [24]  358 	movx	@dptr,a
      000138 90r00r00         [24]  359 	mov	dptr,#_put_char_to_string
      00013B 12r00r00         [24]  360 	lcall	__print_format
      00013E AE 82            [24]  361 	mov	r6,dpl
      000140 AF 83            [24]  362 	mov	r7,dph
                                    363 ;	sprintf.c:57: *buf = 0;
      000142 E5*00            [12]  364 	mov	a,_bpx
      000144 24 FC            [12]  365 	add	a,#0xfc
      000146 F8               [12]  366 	mov	r0,a
      000147 E2               [24]  367 	movx	a,@r0
      000148 FB               [12]  368 	mov	r3,a
      000149 08               [12]  369 	inc	r0
      00014A E2               [24]  370 	movx	a,@r0
      00014B FC               [12]  371 	mov	r4,a
      00014C 08               [12]  372 	inc	r0
      00014D E2               [24]  373 	movx	a,@r0
      00014E FD               [12]  374 	mov	r5,a
      00014F 8B 82            [24]  375 	mov	dpl,r3
      000151 8C 83            [24]  376 	mov	dph,r4
      000153 8D F0            [24]  377 	mov	b,r5
      000155 E4               [12]  378 	clr	a
      000156 12r00r00         [24]  379 	lcall	__gptrput
                                    380 ;	sprintf.c:60: return i;
      000159 8E 82            [24]  381 	mov	dpl,r6
      00015B 8F 83            [24]  382 	mov	dph,r7
      00015D 15 81            [12]  383 	dec	sp
      00015F D0*00            [24]  384 	pop	_bp
      000161 C5*00            [12]  385 	xch	a,_bpx
      000163 F8               [12]  386 	mov	r0,a
      000164 18               [12]  387 	dec	r0
      000165 E2               [24]  388 	movx	a,@r0
      000166 C5*00            [12]  389 	xch	a,_bpx
      000168 88*00            [24]  390 	mov	_spx,r0
      00016A 22               [24]  391 	ret
                                    392 	.area CSEG    (CODE)
                                    393 	.area CONST   (CODE)
                                    394 	.area XINIT   (CODE)
                                    395 	.area CABS    (ABS,CODE)
