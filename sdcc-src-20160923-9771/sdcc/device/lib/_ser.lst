                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.3 #9771 (MSVC)
                                      4 ;--------------------------------------------------------
                                      5 	.module _ser
                                      6 	.optsdcc -mmcs51 --model-large --xstack
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _TF2
                                     12 	.globl _EXF2
                                     13 	.globl _RCLK
                                     14 	.globl _TCLK
                                     15 	.globl _EXEN2
                                     16 	.globl _TR2
                                     17 	.globl _C_T2
                                     18 	.globl _CP_RL2
                                     19 	.globl _T2CON_7
                                     20 	.globl _T2CON_6
                                     21 	.globl _T2CON_5
                                     22 	.globl _T2CON_4
                                     23 	.globl _T2CON_3
                                     24 	.globl _T2CON_2
                                     25 	.globl _T2CON_1
                                     26 	.globl _T2CON_0
                                     27 	.globl _PT2
                                     28 	.globl _ET2
                                     29 	.globl _CY
                                     30 	.globl _AC
                                     31 	.globl _F0
                                     32 	.globl _RS1
                                     33 	.globl _RS0
                                     34 	.globl _OV
                                     35 	.globl _F1
                                     36 	.globl _P
                                     37 	.globl _PS
                                     38 	.globl _PT1
                                     39 	.globl _PX1
                                     40 	.globl _PT0
                                     41 	.globl _PX0
                                     42 	.globl _RD
                                     43 	.globl _WR
                                     44 	.globl _T1
                                     45 	.globl _T0
                                     46 	.globl _INT1
                                     47 	.globl _INT0
                                     48 	.globl _TXD
                                     49 	.globl _RXD
                                     50 	.globl _P3_7
                                     51 	.globl _P3_6
                                     52 	.globl _P3_5
                                     53 	.globl _P3_4
                                     54 	.globl _P3_3
                                     55 	.globl _P3_2
                                     56 	.globl _P3_1
                                     57 	.globl _P3_0
                                     58 	.globl _EA
                                     59 	.globl _ES
                                     60 	.globl _ET1
                                     61 	.globl _EX1
                                     62 	.globl _ET0
                                     63 	.globl _EX0
                                     64 	.globl _P2_7
                                     65 	.globl _P2_6
                                     66 	.globl _P2_5
                                     67 	.globl _P2_4
                                     68 	.globl _P2_3
                                     69 	.globl _P2_2
                                     70 	.globl _P2_1
                                     71 	.globl _P2_0
                                     72 	.globl _SM0
                                     73 	.globl _SM1
                                     74 	.globl _SM2
                                     75 	.globl _REN
                                     76 	.globl _TB8
                                     77 	.globl _RB8
                                     78 	.globl _TI
                                     79 	.globl _RI
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _TF1
                                     89 	.globl _TR1
                                     90 	.globl _TF0
                                     91 	.globl _TR0
                                     92 	.globl _IE1
                                     93 	.globl _IT1
                                     94 	.globl _IE0
                                     95 	.globl _IT0
                                     96 	.globl _P0_7
                                     97 	.globl _P0_6
                                     98 	.globl _P0_5
                                     99 	.globl _P0_4
                                    100 	.globl _P0_3
                                    101 	.globl _P0_2
                                    102 	.globl _P0_1
                                    103 	.globl _P0_0
                                    104 	.globl _TH2
                                    105 	.globl _TL2
                                    106 	.globl _RCAP2H
                                    107 	.globl _RCAP2L
                                    108 	.globl _T2CON
                                    109 	.globl __XPAGE
                                    110 	.globl _B
                                    111 	.globl _ACC
                                    112 	.globl _PSW
                                    113 	.globl _IP
                                    114 	.globl _P3
                                    115 	.globl _IE
                                    116 	.globl _P2
                                    117 	.globl _SBUF
                                    118 	.globl _SCON
                                    119 	.globl _P1
                                    120 	.globl _TH1
                                    121 	.globl _TH0
                                    122 	.globl _TL1
                                    123 	.globl _TL0
                                    124 	.globl _TMOD
                                    125 	.globl _TCON
                                    126 	.globl _PCON
                                    127 	.globl _DPH
                                    128 	.globl _DPL
                                    129 	.globl _SP
                                    130 	.globl _P0
                                    131 	.globl _ser_rxBuffer
                                    132 	.globl _ser_txBuffer
                                    133 	.globl _ser_rxIndexOut
                                    134 	.globl _ser_rxIndexIn
                                    135 	.globl _ser_txIndexOut
                                    136 	.globl _ser_txIndexIn
                                    137 	.globl _ser_init
                                    138 	.globl _ser_interrupt_handler
                                    139 	.globl _ser_putc
                                    140 	.globl _ser_getc
                                    141 	.globl _ser_printString
                                    142 	.globl _ser_charAvail
                                    143 ;--------------------------------------------------------
                                    144 ; special function registers
                                    145 ;--------------------------------------------------------
                                    146 	.area RSEG    (ABS,DATA)
      000000                        147 	.org 0x0000
                           000080   148 _P0	=	0x0080
                           000081   149 _SP	=	0x0081
                           000082   150 _DPL	=	0x0082
                           000083   151 _DPH	=	0x0083
                           000087   152 _PCON	=	0x0087
                           000088   153 _TCON	=	0x0088
                           000089   154 _TMOD	=	0x0089
                           00008A   155 _TL0	=	0x008a
                           00008B   156 _TL1	=	0x008b
                           00008C   157 _TH0	=	0x008c
                           00008D   158 _TH1	=	0x008d
                           000090   159 _P1	=	0x0090
                           000098   160 _SCON	=	0x0098
                           000099   161 _SBUF	=	0x0099
                           0000A0   162 _P2	=	0x00a0
                           0000A8   163 _IE	=	0x00a8
                           0000B0   164 _P3	=	0x00b0
                           0000B8   165 _IP	=	0x00b8
                           0000D0   166 _PSW	=	0x00d0
                           0000E0   167 _ACC	=	0x00e0
                           0000F0   168 _B	=	0x00f0
                           0000E7   169 __XPAGE	=	0x00e7
                           0000C8   170 _T2CON	=	0x00c8
                           0000CA   171 _RCAP2L	=	0x00ca
                           0000CB   172 _RCAP2H	=	0x00cb
                           0000CC   173 _TL2	=	0x00cc
                           0000CD   174 _TH2	=	0x00cd
                                    175 ;--------------------------------------------------------
                                    176 ; special function bits
                                    177 ;--------------------------------------------------------
                                    178 	.area RSEG    (ABS,DATA)
      000000                        179 	.org 0x0000
                           000080   180 _P0_0	=	0x0080
                           000081   181 _P0_1	=	0x0081
                           000082   182 _P0_2	=	0x0082
                           000083   183 _P0_3	=	0x0083
                           000084   184 _P0_4	=	0x0084
                           000085   185 _P0_5	=	0x0085
                           000086   186 _P0_6	=	0x0086
                           000087   187 _P0_7	=	0x0087
                           000088   188 _IT0	=	0x0088
                           000089   189 _IE0	=	0x0089
                           00008A   190 _IT1	=	0x008a
                           00008B   191 _IE1	=	0x008b
                           00008C   192 _TR0	=	0x008c
                           00008D   193 _TF0	=	0x008d
                           00008E   194 _TR1	=	0x008e
                           00008F   195 _TF1	=	0x008f
                           000090   196 _P1_0	=	0x0090
                           000091   197 _P1_1	=	0x0091
                           000092   198 _P1_2	=	0x0092
                           000093   199 _P1_3	=	0x0093
                           000094   200 _P1_4	=	0x0094
                           000095   201 _P1_5	=	0x0095
                           000096   202 _P1_6	=	0x0096
                           000097   203 _P1_7	=	0x0097
                           000098   204 _RI	=	0x0098
                           000099   205 _TI	=	0x0099
                           00009A   206 _RB8	=	0x009a
                           00009B   207 _TB8	=	0x009b
                           00009C   208 _REN	=	0x009c
                           00009D   209 _SM2	=	0x009d
                           00009E   210 _SM1	=	0x009e
                           00009F   211 _SM0	=	0x009f
                           0000A0   212 _P2_0	=	0x00a0
                           0000A1   213 _P2_1	=	0x00a1
                           0000A2   214 _P2_2	=	0x00a2
                           0000A3   215 _P2_3	=	0x00a3
                           0000A4   216 _P2_4	=	0x00a4
                           0000A5   217 _P2_5	=	0x00a5
                           0000A6   218 _P2_6	=	0x00a6
                           0000A7   219 _P2_7	=	0x00a7
                           0000A8   220 _EX0	=	0x00a8
                           0000A9   221 _ET0	=	0x00a9
                           0000AA   222 _EX1	=	0x00aa
                           0000AB   223 _ET1	=	0x00ab
                           0000AC   224 _ES	=	0x00ac
                           0000AF   225 _EA	=	0x00af
                           0000B0   226 _P3_0	=	0x00b0
                           0000B1   227 _P3_1	=	0x00b1
                           0000B2   228 _P3_2	=	0x00b2
                           0000B3   229 _P3_3	=	0x00b3
                           0000B4   230 _P3_4	=	0x00b4
                           0000B5   231 _P3_5	=	0x00b5
                           0000B6   232 _P3_6	=	0x00b6
                           0000B7   233 _P3_7	=	0x00b7
                           0000B0   234 _RXD	=	0x00b0
                           0000B1   235 _TXD	=	0x00b1
                           0000B2   236 _INT0	=	0x00b2
                           0000B3   237 _INT1	=	0x00b3
                           0000B4   238 _T0	=	0x00b4
                           0000B5   239 _T1	=	0x00b5
                           0000B6   240 _WR	=	0x00b6
                           0000B7   241 _RD	=	0x00b7
                           0000B8   242 _PX0	=	0x00b8
                           0000B9   243 _PT0	=	0x00b9
                           0000BA   244 _PX1	=	0x00ba
                           0000BB   245 _PT1	=	0x00bb
                           0000BC   246 _PS	=	0x00bc
                           0000D0   247 _P	=	0x00d0
                           0000D1   248 _F1	=	0x00d1
                           0000D2   249 _OV	=	0x00d2
                           0000D3   250 _RS0	=	0x00d3
                           0000D4   251 _RS1	=	0x00d4
                           0000D5   252 _F0	=	0x00d5
                           0000D6   253 _AC	=	0x00d6
                           0000D7   254 _CY	=	0x00d7
                           0000AD   255 _ET2	=	0x00ad
                           0000BD   256 _PT2	=	0x00bd
                           0000C8   257 _T2CON_0	=	0x00c8
                           0000C9   258 _T2CON_1	=	0x00c9
                           0000CA   259 _T2CON_2	=	0x00ca
                           0000CB   260 _T2CON_3	=	0x00cb
                           0000CC   261 _T2CON_4	=	0x00cc
                           0000CD   262 _T2CON_5	=	0x00cd
                           0000CE   263 _T2CON_6	=	0x00ce
                           0000CF   264 _T2CON_7	=	0x00cf
                           0000C8   265 _CP_RL2	=	0x00c8
                           0000C9   266 _C_T2	=	0x00c9
                           0000CA   267 _TR2	=	0x00ca
                           0000CB   268 _EXEN2	=	0x00cb
                           0000CC   269 _TCLK	=	0x00cc
                           0000CD   270 _RCLK	=	0x00cd
                           0000CE   271 _EXF2	=	0x00ce
                           0000CF   272 _TF2	=	0x00cf
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable register banks
                                    275 ;--------------------------------------------------------
                                    276 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        277 	.ds 8
                                    278 	.area REG_BANK_1	(REL,OVR,DATA)
      000000                        279 	.ds 8
                                    280 ;--------------------------------------------------------
                                    281 ; internal ram data
                                    282 ;--------------------------------------------------------
                                    283 	.area DSEG    (DATA)
                                    284 ;--------------------------------------------------------
                                    285 ; overlayable items in internal ram 
                                    286 ;--------------------------------------------------------
                                    287 ;--------------------------------------------------------
                                    288 ; indirectly addressable internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area ISEG    (DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; absolute internal ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area IABS    (ABS,DATA)
                                    295 	.area IABS    (ABS,DATA)
                                    296 ;--------------------------------------------------------
                                    297 ; bit data
                                    298 ;--------------------------------------------------------
                                    299 	.area BSEG    (BIT)
      000000                        300 _ser_txBusy:
      000000                        301 	.ds 1
                                    302 ;--------------------------------------------------------
                                    303 ; paged external ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area PSEG    (PAG,XDATA)
                                    306 ;--------------------------------------------------------
                                    307 ; external ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area XSEG    (XDATA)
      000000                        310 _ser_txIndexIn::
      000000                        311 	.ds 1
      000001                        312 _ser_txIndexOut::
      000001                        313 	.ds 1
      000002                        314 _ser_rxIndexIn::
      000002                        315 	.ds 1
      000003                        316 _ser_rxIndexOut::
      000003                        317 	.ds 1
      000004                        318 _ser_txBuffer::
      000004                        319 	.ds 256
      000104                        320 _ser_rxBuffer::
      000104                        321 	.ds 256
      000204                        322 _ser_putc_c_1_17:
      000204                        323 	.ds 1
      000205                        324 _ser_getc_tmp_1_22:
      000205                        325 	.ds 1
      000206                        326 _ser_printString_String_1_25:
      000206                        327 	.ds 3
      000209                        328 _ser_charAvail_ret_1_29:
      000209                        329 	.ds 1
                                    330 ;--------------------------------------------------------
                                    331 ; absolute external ram data
                                    332 ;--------------------------------------------------------
                                    333 	.area XABS    (ABS,XDATA)
                                    334 ;--------------------------------------------------------
                                    335 ; external initialized ram data
                                    336 ;--------------------------------------------------------
                                    337 	.area XISEG   (XDATA)
                                    338 	.area HOME    (CODE)
                                    339 	.area GSINIT0 (CODE)
                                    340 	.area GSINIT1 (CODE)
                                    341 	.area GSINIT2 (CODE)
                                    342 	.area GSINIT3 (CODE)
                                    343 	.area GSINIT4 (CODE)
                                    344 	.area GSINIT5 (CODE)
                                    345 	.area GSINIT  (CODE)
                                    346 	.area GSFINAL (CODE)
                                    347 	.area CSEG    (CODE)
                                    348 ;--------------------------------------------------------
                                    349 ; global & static initialisations
                                    350 ;--------------------------------------------------------
                                    351 	.area HOME    (CODE)
                                    352 	.area GSINIT  (CODE)
                                    353 	.area GSFINAL (CODE)
                                    354 	.area GSINIT  (CODE)
                                    355 ;--------------------------------------------------------
                                    356 ; Home
                                    357 ;--------------------------------------------------------
                                    358 	.area HOME    (CODE)
                                    359 	.area HOME    (CODE)
                                    360 ;--------------------------------------------------------
                                    361 ; code
                                    362 ;--------------------------------------------------------
                                    363 	.area CSEG    (CODE)
                                    364 ;------------------------------------------------------------
                                    365 ;Allocation info for local variables in function 'ser_init'
                                    366 ;------------------------------------------------------------
                                    367 ;	_ser.c:76: ser_init(void)
                                    368 ;	-----------------------------------------
                                    369 ;	 function ser_init
                                    370 ;	-----------------------------------------
      000000                        371 _ser_init:
                           000007   372 	ar7 = 0x07
                           000006   373 	ar6 = 0x06
                           000005   374 	ar5 = 0x05
                           000004   375 	ar4 = 0x04
                           000003   376 	ar3 = 0x03
                           000002   377 	ar2 = 0x02
                           000001   378 	ar1 = 0x01
                           000000   379 	ar0 = 0x00
                                    380 ;	_ser.c:78: ES = 0;
      000000 C2 AC            [12]  381 	clr	_ES
                                    382 ;	_ser.c:80: ser_txBusy     = 0;
      000002 C2*00            [12]  383 	clr	_ser_txBusy
                                    384 ;	_ser.c:82: ser_txIndexIn  = 0;
      000004 90r00r00         [24]  385 	mov	dptr,#_ser_txIndexIn
      000007 E4               [12]  386 	clr	a
      000008 F0               [24]  387 	movx	@dptr,a
                                    388 ;	_ser.c:83: ser_txIndexOut = 0;
      000009 90r00r01         [24]  389 	mov	dptr,#_ser_txIndexOut
      00000C F0               [24]  390 	movx	@dptr,a
                                    391 ;	_ser.c:84: ser_rxIndexIn  = 0;
      00000D 90r00r02         [24]  392 	mov	dptr,#_ser_rxIndexIn
      000010 F0               [24]  393 	movx	@dptr,a
                                    394 ;	_ser.c:85: ser_rxIndexOut = 0;
      000011 90r00r03         [24]  395 	mov	dptr,#_ser_rxIndexOut
      000014 F0               [24]  396 	movx	@dptr,a
                                    397 ;	_ser.c:87: T2CON = 0x30;
      000015 75 C8 30         [24]  398 	mov	_T2CON,#0x30
                                    399 ;	_ser.c:90: RCAP2H = 0xFF;
      000018 75 CB FF         [24]  400 	mov	_RCAP2H,#0xff
                                    401 ;	_ser.c:91: RCAP2L = 0xDD;
      00001B 75 CA DD         [24]  402 	mov	_RCAP2L,#0xdd
                                    403 ;	_ser.c:94: T2CON = 0x34;
      00001E 75 C8 34         [24]  404 	mov	_T2CON,#0x34
                                    405 ;	_ser.c:96: SCON = 0x50;
      000021 75 98 50         [24]  406 	mov	_SCON,#0x50
                                    407 ;	_ser.c:98: if (TI) {
                                    408 ;	_ser.c:99: TI = 0;
      000024 10 99 02         [24]  409 	jbc	_TI,00113$
      000027 80 00            [24]  410 	sjmp	00102$
      000029                        411 00113$:
      000029                        412 00102$:
                                    413 ;	_ser.c:101: if (RI) {
                                    414 ;	_ser.c:102: RI = 0;
      000029 10 98 02         [24]  415 	jbc	_RI,00114$
      00002C 80 00            [24]  416 	sjmp	00104$
      00002E                        417 00114$:
      00002E                        418 00104$:
                                    419 ;	_ser.c:105: ES=1;  
      00002E D2 AC            [12]  420 	setb	_ES
      000030 22               [24]  421 	ret
                                    422 ;------------------------------------------------------------
                                    423 ;Allocation info for local variables in function 'ser_interrupt_handler'
                                    424 ;------------------------------------------------------------
                                    425 ;	_ser.c:109: ser_interrupt_handler(void) __interrupt 4 __using 1
                                    426 ;	-----------------------------------------
                                    427 ;	 function ser_interrupt_handler
                                    428 ;	-----------------------------------------
      000031                        429 _ser_interrupt_handler:
                           00000F   430 	ar7 = 0x0f
                           00000E   431 	ar6 = 0x0e
                           00000D   432 	ar5 = 0x0d
                           00000C   433 	ar4 = 0x0c
                           00000B   434 	ar3 = 0x0b
                           00000A   435 	ar2 = 0x0a
                           000009   436 	ar1 = 0x09
                           000008   437 	ar0 = 0x08
      000031 C0 E0            [24]  438 	push	acc
      000033 C0 82            [24]  439 	push	dpl
      000035 C0 83            [24]  440 	push	dph
      000037 C0 D0            [24]  441 	push	psw
      000039 75 D0 08         [24]  442 	mov	psw,#0x08
                                    443 ;	_ser.c:111: ES=0;
      00003C C2 AC            [12]  444 	clr	_ES
                                    445 ;	_ser.c:113: if (RI) {
                                    446 ;	_ser.c:114: RI = 0;
      00003E 10 98 02         [24]  447 	jbc	_RI,00119$
      000041 80 14            [24]  448 	sjmp	00102$
      000043                        449 00119$:
                                    450 ;	_ser.c:115: ser_rxBuffer[ser_rxIndexIn++] = SBUF;
      000043 90r00r02         [24]  451 	mov	dptr,#_ser_rxIndexIn
      000046 E0               [24]  452 	movx	a,@dptr
      000047 FF               [12]  453 	mov	r7,a
      000048 04               [12]  454 	inc	a
      000049 F0               [24]  455 	movx	@dptr,a
      00004A EF               [12]  456 	mov	a,r7
      00004B 24r04            [12]  457 	add	a,#_ser_rxBuffer
      00004D F5 82            [12]  458 	mov	dpl,a
      00004F E4               [12]  459 	clr	a
      000050 34s01            [12]  460 	addc	a,#(_ser_rxBuffer >> 8)
      000052 F5 83            [12]  461 	mov	dph,a
      000054 E5 99            [12]  462 	mov	a,_SBUF
      000056 F0               [24]  463 	movx	@dptr,a
      000057                        464 00102$:
                                    465 ;	_ser.c:118: if (TI) {
                                    466 ;	_ser.c:119: TI = 0;
      000057 10 99 02         [24]  467 	jbc	_TI,00120$
      00005A 80 25            [24]  468 	sjmp	00107$
      00005C                        469 00120$:
                                    470 ;	_ser.c:120: if (ser_txIndexIn == ser_txIndexOut) {
      00005C 90r00r00         [24]  471 	mov	dptr,#_ser_txIndexIn
      00005F E0               [24]  472 	movx	a,@dptr
      000060 FF               [12]  473 	mov	r7,a
      000061 90r00r01         [24]  474 	mov	dptr,#_ser_txIndexOut
      000064 E0               [24]  475 	movx	a,@dptr
      000065 FE               [12]  476 	mov	r6,a
      000066 EF               [12]  477 	mov	a,r7
      000067 B5 0E 04         [24]  478 	cjne	a,ar6,00104$
                                    479 ;	_ser.c:121: ser_txBusy = 0;
      00006A C2*00            [12]  480 	clr	_ser_txBusy
      00006C 80 13            [24]  481 	sjmp	00107$
      00006E                        482 00104$:
                                    483 ;	_ser.c:124: SBUF = ser_txBuffer[ser_txIndexOut++];
      00006E 90r00r01         [24]  484 	mov	dptr,#_ser_txIndexOut
      000071 EE               [12]  485 	mov	a,r6
      000072 04               [12]  486 	inc	a
      000073 F0               [24]  487 	movx	@dptr,a
      000074 EE               [12]  488 	mov	a,r6
      000075 24r04            [12]  489 	add	a,#_ser_txBuffer
      000077 F5 82            [12]  490 	mov	dpl,a
      000079 E4               [12]  491 	clr	a
      00007A 34s00            [12]  492 	addc	a,#(_ser_txBuffer >> 8)
      00007C F5 83            [12]  493 	mov	dph,a
      00007E E0               [24]  494 	movx	a,@dptr
      00007F F5 99            [12]  495 	mov	_SBUF,a
      000081                        496 00107$:
                                    497 ;	_ser.c:128: ES=1;
      000081 D2 AC            [12]  498 	setb	_ES
      000083 D0 D0            [24]  499 	pop	psw
      000085 D0 83            [24]  500 	pop	dph
      000087 D0 82            [24]  501 	pop	dpl
      000089 D0 E0            [24]  502 	pop	acc
      00008B 32               [24]  503 	reti
                                    504 ;	eliminated unneeded push/pop b
                                    505 ;------------------------------------------------------------
                                    506 ;Allocation info for local variables in function 'ser_putc'
                                    507 ;------------------------------------------------------------
                                    508 ;c                         Allocated with name '_ser_putc_c_1_17'
                                    509 ;------------------------------------------------------------
                                    510 ;	_ser.c:132: ser_putc(unsigned char c)
                                    511 ;	-----------------------------------------
                                    512 ;	 function ser_putc
                                    513 ;	-----------------------------------------
      00008C                        514 _ser_putc:
                           000007   515 	ar7 = 0x07
                           000006   516 	ar6 = 0x06
                           000005   517 	ar5 = 0x05
                           000004   518 	ar4 = 0x04
                           000003   519 	ar3 = 0x03
                           000002   520 	ar2 = 0x02
                           000001   521 	ar1 = 0x01
                           000000   522 	ar0 = 0x00
      00008C E5 82            [12]  523 	mov	a,dpl
      00008E 90r02r04         [24]  524 	mov	dptr,#_ser_putc_c_1_17
      000091 F0               [24]  525 	movx	@dptr,a
                                    526 ;	_ser.c:134: ES=0;
      000092 C2 AC            [12]  527 	clr	_ES
                                    528 ;	_ser.c:136: if (ser_txBusy) {
      000094 30*00 1B         [24]  529 	jnb	_ser_txBusy,00102$
                                    530 ;	_ser.c:137: ser_txBuffer[ser_txIndexIn++] = c;
      000097 90r00r00         [24]  531 	mov	dptr,#_ser_txIndexIn
      00009A E0               [24]  532 	movx	a,@dptr
      00009B FF               [12]  533 	mov	r7,a
      00009C 04               [12]  534 	inc	a
      00009D F0               [24]  535 	movx	@dptr,a
      00009E EF               [12]  536 	mov	a,r7
      00009F 24r04            [12]  537 	add	a,#_ser_txBuffer
      0000A1 FF               [12]  538 	mov	r7,a
      0000A2 E4               [12]  539 	clr	a
      0000A3 34s00            [12]  540 	addc	a,#(_ser_txBuffer >> 8)
      0000A5 FE               [12]  541 	mov	r6,a
      0000A6 90r02r04         [24]  542 	mov	dptr,#_ser_putc_c_1_17
      0000A9 E0               [24]  543 	movx	a,@dptr
      0000AA FD               [12]  544 	mov	r5,a
      0000AB 8F 82            [24]  545 	mov	dpl,r7
      0000AD 8E 83            [24]  546 	mov	dph,r6
      0000AF F0               [24]  547 	movx	@dptr,a
      0000B0 80 08            [24]  548 	sjmp	00103$
      0000B2                        549 00102$:
                                    550 ;	_ser.c:140: ser_txBusy = 1;
      0000B2 D2*00            [12]  551 	setb	_ser_txBusy
                                    552 ;	_ser.c:141: SBUF = c;
      0000B4 90r02r04         [24]  553 	mov	dptr,#_ser_putc_c_1_17
      0000B7 E0               [24]  554 	movx	a,@dptr
      0000B8 F5 99            [12]  555 	mov	_SBUF,a
      0000BA                        556 00103$:
                                    557 ;	_ser.c:144: ES=1;
      0000BA D2 AC            [12]  558 	setb	_ES
      0000BC 22               [24]  559 	ret
                                    560 ;------------------------------------------------------------
                                    561 ;Allocation info for local variables in function 'ser_getc'
                                    562 ;------------------------------------------------------------
                                    563 ;tmp                       Allocated with name '_ser_getc_tmp_1_22'
                                    564 ;------------------------------------------------------------
                                    565 ;	_ser.c:148: ser_getc(void)
                                    566 ;	-----------------------------------------
                                    567 ;	 function ser_getc
                                    568 ;	-----------------------------------------
      0000BD                        569 _ser_getc:
                                    570 ;	_ser.c:153: if (ser_rxIndexIn != ser_rxIndexOut) {
      0000BD 90r00r02         [24]  571 	mov	dptr,#_ser_rxIndexIn
      0000C0 E0               [24]  572 	movx	a,@dptr
      0000C1 FF               [12]  573 	mov	r7,a
      0000C2 90r00r03         [24]  574 	mov	dptr,#_ser_rxIndexOut
      0000C5 E0               [24]  575 	movx	a,@dptr
      0000C6 FE               [12]  576 	mov	r6,a
      0000C7 EF               [12]  577 	mov	a,r7
      0000C8 B5 06 02         [24]  578 	cjne	a,ar6,00109$
      0000CB 80 18            [24]  579 	sjmp	00102$
      0000CD                        580 00109$:
                                    581 ;	_ser.c:154: tmp = ser_rxBuffer[ser_rxIndexOut++];
      0000CD 90r00r03         [24]  582 	mov	dptr,#_ser_rxIndexOut
      0000D0 EE               [12]  583 	mov	a,r6
      0000D1 04               [12]  584 	inc	a
      0000D2 F0               [24]  585 	movx	@dptr,a
      0000D3 EE               [12]  586 	mov	a,r6
      0000D4 24r04            [12]  587 	add	a,#_ser_rxBuffer
      0000D6 F5 82            [12]  588 	mov	dpl,a
      0000D8 E4               [12]  589 	clr	a
      0000D9 34s01            [12]  590 	addc	a,#(_ser_rxBuffer >> 8)
      0000DB F5 83            [12]  591 	mov	dph,a
      0000DD E0               [24]  592 	movx	a,@dptr
      0000DE FF               [12]  593 	mov	r7,a
      0000DF 90r02r05         [24]  594 	mov	dptr,#_ser_getc_tmp_1_22
      0000E2 F0               [24]  595 	movx	@dptr,a
      0000E3 80 05            [24]  596 	sjmp	00103$
      0000E5                        597 00102$:
                                    598 ;	_ser.c:157: tmp = 0;
      0000E5 90r02r05         [24]  599 	mov	dptr,#_ser_getc_tmp_1_22
      0000E8 E4               [12]  600 	clr	a
      0000E9 F0               [24]  601 	movx	@dptr,a
      0000EA                        602 00103$:
                                    603 ;	_ser.c:161: return(tmp);
      0000EA 90r02r05         [24]  604 	mov	dptr,#_ser_getc_tmp_1_22
      0000ED E0               [24]  605 	movx	a,@dptr
      0000EE F5 82            [12]  606 	mov	dpl,a
      0000F0 22               [24]  607 	ret
                                    608 ;------------------------------------------------------------
                                    609 ;Allocation info for local variables in function 'ser_printString'
                                    610 ;------------------------------------------------------------
                                    611 ;String                    Allocated with name '_ser_printString_String_1_25'
                                    612 ;------------------------------------------------------------
                                    613 ;	_ser.c:165: ser_printString(char *String)
                                    614 ;	-----------------------------------------
                                    615 ;	 function ser_printString
                                    616 ;	-----------------------------------------
      0000F1                        617 _ser_printString:
      0000F1 AF F0            [24]  618 	mov	r7,b
      0000F3 AE 83            [24]  619 	mov	r6,dph
      0000F5 E5 82            [12]  620 	mov	a,dpl
      0000F7 90r02r06         [24]  621 	mov	dptr,#_ser_printString_String_1_25
      0000FA F0               [24]  622 	movx	@dptr,a
      0000FB EE               [12]  623 	mov	a,r6
      0000FC A3               [24]  624 	inc	dptr
      0000FD F0               [24]  625 	movx	@dptr,a
      0000FE EF               [12]  626 	mov	a,r7
      0000FF A3               [24]  627 	inc	dptr
      000100 F0               [24]  628 	movx	@dptr,a
                                    629 ;	_ser.c:167: while (*String) {
      000101 90r02r06         [24]  630 	mov	dptr,#_ser_printString_String_1_25
      000104 E0               [24]  631 	movx	a,@dptr
      000105 FD               [12]  632 	mov	r5,a
      000106 A3               [24]  633 	inc	dptr
      000107 E0               [24]  634 	movx	a,@dptr
      000108 FE               [12]  635 	mov	r6,a
      000109 A3               [24]  636 	inc	dptr
      00010A E0               [24]  637 	movx	a,@dptr
      00010B FF               [12]  638 	mov	r7,a
      00010C                        639 00101$:
      00010C 8D 82            [24]  640 	mov	dpl,r5
      00010E 8E 83            [24]  641 	mov	dph,r6
      000110 8F F0            [24]  642 	mov	b,r7
      000112 12r00r00         [24]  643 	lcall	__gptrget
      000115 FC               [12]  644 	mov	r4,a
      000116 60 37            [24]  645 	jz	00108$
                                    646 ;	_ser.c:168: ser_putc(*String++);
      000118 0D               [12]  647 	inc	r5
      000119 BD 00 01         [24]  648 	cjne	r5,#0x00,00114$
      00011C 0E               [12]  649 	inc	r6
      00011D                        650 00114$:
      00011D 90r02r06         [24]  651 	mov	dptr,#_ser_printString_String_1_25
      000120 ED               [12]  652 	mov	a,r5
      000121 F0               [24]  653 	movx	@dptr,a
      000122 EE               [12]  654 	mov	a,r6
      000123 A3               [24]  655 	inc	dptr
      000124 F0               [24]  656 	movx	@dptr,a
      000125 EF               [12]  657 	mov	a,r7
      000126 A3               [24]  658 	inc	dptr
      000127 F0               [24]  659 	movx	@dptr,a
      000128 C0 00            [24]  660 	push	ar0
      00012A E5*00            [12]  661 	mov	a,_spx
      00012C F8               [12]  662 	mov	r0,a
      00012D 24 03            [12]  663 	add	a,#0x03
      00012F F5*00            [12]  664 	mov	_spx,a
      000131 EF               [12]  665 	mov	a,r7
      000132 F2               [24]  666 	movx	@r0,a
      000133 08               [12]  667 	inc	r0
      000134 EE               [12]  668 	mov	a,r6
      000135 F2               [24]  669 	movx	@r0,a
      000136 08               [12]  670 	inc	r0
      000137 ED               [12]  671 	mov	a,r5
      000138 F2               [24]  672 	movx	@r0,a
      000139 D0 00            [24]  673 	pop	ar0
      00013B 8C 82            [24]  674 	mov	dpl,r4
      00013D 12r00r8C         [24]  675 	lcall	_ser_putc
      000140 A8*00            [24]  676 	mov	r0,_spx
      000142 18               [12]  677 	dec	r0
      000143 E2               [24]  678 	movx	a,@r0
      000144 FD               [12]  679 	mov	r5,a
      000145 18               [12]  680 	dec	r0
      000146 E2               [24]  681 	movx	a,@r0
      000147 FE               [12]  682 	mov	r6,a
      000148 18               [12]  683 	dec	r0
      000149 E2               [24]  684 	movx	a,@r0
      00014A FF               [12]  685 	mov	r7,a
      00014B 88*00            [24]  686 	mov	_spx,r0
      00014D 80 BD            [24]  687 	sjmp	00101$
      00014F                        688 00108$:
      00014F 90r02r06         [24]  689 	mov	dptr,#_ser_printString_String_1_25
      000152 ED               [12]  690 	mov	a,r5
      000153 F0               [24]  691 	movx	@dptr,a
      000154 EE               [12]  692 	mov	a,r6
      000155 A3               [24]  693 	inc	dptr
      000156 F0               [24]  694 	movx	@dptr,a
      000157 EF               [12]  695 	mov	a,r7
      000158 A3               [24]  696 	inc	dptr
      000159 F0               [24]  697 	movx	@dptr,a
      00015A 22               [24]  698 	ret
                                    699 ;------------------------------------------------------------
                                    700 ;Allocation info for local variables in function 'ser_charAvail'
                                    701 ;------------------------------------------------------------
                                    702 ;ret                       Allocated with name '_ser_charAvail_ret_1_29'
                                    703 ;------------------------------------------------------------
                                    704 ;	_ser.c:173: ser_charAvail(void)
                                    705 ;	-----------------------------------------
                                    706 ;	 function ser_charAvail
                                    707 ;	-----------------------------------------
      00015B                        708 _ser_charAvail:
                                    709 ;	_ser.c:175: char ret = 0;
      00015B 90r02r09         [24]  710 	mov	dptr,#_ser_charAvail_ret_1_29
      00015E E4               [12]  711 	clr	a
      00015F F0               [24]  712 	movx	@dptr,a
                                    713 ;	_ser.c:177: if (ser_rxIndexIn != ser_rxIndexOut) {
      000160 90r00r02         [24]  714 	mov	dptr,#_ser_rxIndexIn
      000163 E0               [24]  715 	movx	a,@dptr
      000164 FF               [12]  716 	mov	r7,a
      000165 90r00r03         [24]  717 	mov	dptr,#_ser_rxIndexOut
      000168 E0               [24]  718 	movx	a,@dptr
      000169 FE               [12]  719 	mov	r6,a
      00016A EF               [12]  720 	mov	a,r7
      00016B B5 06 02         [24]  721 	cjne	a,ar6,00108$
      00016E 80 06            [24]  722 	sjmp	00102$
      000170                        723 00108$:
                                    724 ;	_ser.c:178: ret = 1;
      000170 90r02r09         [24]  725 	mov	dptr,#_ser_charAvail_ret_1_29
      000173 74 01            [12]  726 	mov	a,#0x01
      000175 F0               [24]  727 	movx	@dptr,a
      000176                        728 00102$:
                                    729 ;	_ser.c:181: return(ret);
      000176 90r02r09         [24]  730 	mov	dptr,#_ser_charAvail_ret_1_29
      000179 E0               [24]  731 	movx	a,@dptr
      00017A F5 82            [12]  732 	mov	dpl,a
      00017C 22               [24]  733 	ret
                                    734 	.area CSEG    (CODE)
                                    735 	.area CONST   (CODE)
                                    736 	.area XINIT   (CODE)
                                    737 	.area CABS    (ABS,CODE)
