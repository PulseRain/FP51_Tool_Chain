                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.3 #9771 (MSVC)
                                      4 ;--------------------------------------------------------
                                      5 	.module cotf
                                      6 	.optsdcc -mmcs51 --model-large --xstack
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _tancotf
                                     12 	.globl _fabsf
                                     13 	.globl _cotf
                                     14 ;--------------------------------------------------------
                                     15 ; special function registers
                                     16 ;--------------------------------------------------------
                                     17 	.area RSEG    (ABS,DATA)
      000000                         18 	.org 0x0000
                                     19 ;--------------------------------------------------------
                                     20 ; special function bits
                                     21 ;--------------------------------------------------------
                                     22 	.area RSEG    (ABS,DATA)
      000000                         23 	.org 0x0000
                                     24 ;--------------------------------------------------------
                                     25 ; overlayable register banks
                                     26 ;--------------------------------------------------------
                                     27 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         28 	.ds 8
                                     29 ;--------------------------------------------------------
                                     30 ; internal ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area DSEG    (DATA)
                                     33 ;--------------------------------------------------------
                                     34 ; overlayable items in internal ram 
                                     35 ;--------------------------------------------------------
                                     36 ;--------------------------------------------------------
                                     37 ; indirectly addressable internal ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area ISEG    (DATA)
                                     40 ;--------------------------------------------------------
                                     41 ; absolute internal ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area IABS    (ABS,DATA)
                                     44 	.area IABS    (ABS,DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; bit data
                                     47 ;--------------------------------------------------------
                                     48 	.area BSEG    (BIT)
                                     49 ;--------------------------------------------------------
                                     50 ; paged external ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area PSEG    (PAG,XDATA)
                                     53 ;--------------------------------------------------------
                                     54 ; external ram data
                                     55 ;--------------------------------------------------------
                                     56 	.area XSEG    (XDATA)
                                     57 ;--------------------------------------------------------
                                     58 ; absolute external ram data
                                     59 ;--------------------------------------------------------
                                     60 	.area XABS    (ABS,XDATA)
                                     61 ;--------------------------------------------------------
                                     62 ; external initialized ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area XISEG   (XDATA)
                                     65 	.area HOME    (CODE)
                                     66 	.area GSINIT0 (CODE)
                                     67 	.area GSINIT1 (CODE)
                                     68 	.area GSINIT2 (CODE)
                                     69 	.area GSINIT3 (CODE)
                                     70 	.area GSINIT4 (CODE)
                                     71 	.area GSINIT5 (CODE)
                                     72 	.area GSINIT  (CODE)
                                     73 	.area GSFINAL (CODE)
                                     74 	.area CSEG    (CODE)
                                     75 ;--------------------------------------------------------
                                     76 ; global & static initialisations
                                     77 ;--------------------------------------------------------
                                     78 	.area HOME    (CODE)
                                     79 	.area GSINIT  (CODE)
                                     80 	.area GSFINAL (CODE)
                                     81 	.area GSINIT  (CODE)
                                     82 ;--------------------------------------------------------
                                     83 ; Home
                                     84 ;--------------------------------------------------------
                                     85 	.area HOME    (CODE)
                                     86 	.area HOME    (CODE)
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CSEG    (CODE)
                                     91 ;------------------------------------------------------------
                                     92 ;Allocation info for local variables in function 'cotf'
                                     93 ;------------------------------------------------------------
                                     94 ;x                         Allocated to stack - _bpx +0
                                     95 ;y                         Allocated to stack - _bpx +4
                                     96 ;sloc0                     Allocated to stack - _bp +1
                                     97 ;------------------------------------------------------------
                                     98 ;	cotf.c:37: float cotf(float x) _FLOAT_FUNC_REENTRANT
                                     99 ;	-----------------------------------------
                                    100 ;	 function cotf
                                    101 ;	-----------------------------------------
      000000                        102 _cotf:
                           000007   103 	ar7 = 0x07
                           000006   104 	ar6 = 0x06
                           000005   105 	ar5 = 0x05
                           000004   106 	ar4 = 0x04
                           000003   107 	ar3 = 0x03
                           000002   108 	ar2 = 0x02
                           000001   109 	ar1 = 0x01
                           000000   110 	ar0 = 0x00
      000000 A8*00            [24]  111 	mov	r0,_spx
      000002 05*00            [12]  112 	inc	_spx
      000004 C5*00            [12]  113 	xch	a,_bpx
      000006 F2               [24]  114 	movx	@r0,a
      000007 08               [12]  115 	inc	r0
      000008 E8               [12]  116 	mov	a,r0
      000009 C5*00            [12]  117 	xch	a,_bpx
      00000B C0*00            [24]  118 	push	_bp
      00000D 85 81*00         [24]  119 	mov	_bp,sp
      000010 05 81            [12]  120 	inc	sp
      000012 05 81            [12]  121 	inc	sp
      000014 05 81            [12]  122 	inc	sp
      000016 05 81            [12]  123 	inc	sp
      000018 05*00            [12]  124 	inc	_spx
      00001A 05*00            [12]  125 	inc	_spx
      00001C 05*00            [12]  126 	inc	_spx
      00001E 05*00            [12]  127 	inc	_spx
      000020 AF 82            [24]  128 	mov	r7,dpl
      000022 AE 83            [24]  129 	mov	r6,dph
      000024 AD F0            [24]  130 	mov	r5,b
      000026 FC               [12]  131 	mov	r4,a
      000027 A8*00            [24]  132 	mov	r0,_bpx
      000029 EF               [12]  133 	mov	a,r7
      00002A F2               [24]  134 	movx	@r0,a
      00002B 08               [12]  135 	inc	r0
      00002C EE               [12]  136 	mov	a,r6
      00002D F2               [24]  137 	movx	@r0,a
      00002E 08               [12]  138 	inc	r0
      00002F ED               [12]  139 	mov	a,r5
      000030 F2               [24]  140 	movx	@r0,a
      000031 08               [12]  141 	inc	r0
      000032 EC               [12]  142 	mov	a,r4
      000033 F2               [24]  143 	movx	@r0,a
                                    144 ;	cotf.c:41: y=fabsf(x);
      000034 A8*00            [24]  145 	mov	r0,_bpx
      000036 A9*00            [24]  146 	mov	r1,_bp
      000038 09               [12]  147 	inc	r1
      000039 E2               [24]  148 	movx	a,@r0
      00003A F7               [12]  149 	mov	@r1,a
      00003B 08               [12]  150 	inc	r0
      00003C E2               [24]  151 	movx	a,@r0
      00003D 09               [12]  152 	inc	r1
      00003E F7               [12]  153 	mov	@r1,a
      00003F 08               [12]  154 	inc	r0
      000040 E2               [24]  155 	movx	a,@r0
      000041 09               [12]  156 	inc	r1
      000042 F7               [12]  157 	mov	@r1,a
      000043 08               [12]  158 	inc	r0
      000044 E2               [24]  159 	movx	a,@r0
      000045 09               [12]  160 	inc	r1
      000046 F7               [12]  161 	mov	@r1,a
      000047 A8*00            [24]  162 	mov	r0,_bp
      000049 08               [12]  163 	inc	r0
      00004A 86 82            [24]  164 	mov	dpl,@r0
      00004C 08               [12]  165 	inc	r0
      00004D 86 83            [24]  166 	mov	dph,@r0
      00004F 08               [12]  167 	inc	r0
      000050 86 F0            [24]  168 	mov	b,@r0
      000052 08               [12]  169 	inc	r0
      000053 E6               [12]  170 	mov	a,@r0
      000054 12r00r00         [24]  171 	lcall	_fabsf
      000057 AA 82            [24]  172 	mov	r2,dpl
      000059 AB 83            [24]  173 	mov	r3,dph
      00005B AE F0            [24]  174 	mov	r6,b
      00005D FF               [12]  175 	mov	r7,a
                                    176 ;	cotf.c:42: if (y<1.0E-30) //This one requires more thinking...
      00005E 90r00r00         [24]  177 	mov	dptr,#___fslt_PARM_2
      000061 74 60            [12]  178 	mov	a,#0x60
      000063 F0               [24]  179 	movx	@dptr,a
      000064 74 42            [12]  180 	mov	a,#0x42
      000066 A3               [24]  181 	inc	dptr
      000067 F0               [24]  182 	movx	@dptr,a
      000068 74 A2            [12]  183 	mov	a,#0xa2
      00006A A3               [24]  184 	inc	dptr
      00006B F0               [24]  185 	movx	@dptr,a
      00006C 74 0D            [12]  186 	mov	a,#0x0d
      00006E A3               [24]  187 	inc	dptr
      00006F F0               [24]  188 	movx	@dptr,a
      000070 8A 82            [24]  189 	mov	dpl,r2
      000072 8B 83            [24]  190 	mov	dph,r3
      000074 8E F0            [24]  191 	mov	b,r6
      000076 EF               [12]  192 	mov	a,r7
      000077 12r00r00         [24]  193 	lcall	___fslt
      00007A E5 82            [12]  194 	mov	a,dpl
      00007C 60 3A            [24]  195 	jz	00105$
                                    196 ;	cotf.c:44: errno = ERANGE;
      00007E 90r00r00         [24]  197 	mov	dptr,#_errno
      000081 74 22            [12]  198 	mov	a,#0x22
      000083 F0               [24]  199 	movx	@dptr,a
      000084 E4               [12]  200 	clr	a
      000085 A3               [24]  201 	inc	dptr
      000086 F0               [24]  202 	movx	@dptr,a
                                    203 ;	cotf.c:45: if (x<0.0)
      000087 90r00r00         [24]  204 	mov	dptr,#___fslt_PARM_2
      00008A F0               [24]  205 	movx	@dptr,a
      00008B A3               [24]  206 	inc	dptr
      00008C F0               [24]  207 	movx	@dptr,a
      00008D A3               [24]  208 	inc	dptr
      00008E F0               [24]  209 	movx	@dptr,a
      00008F A3               [24]  210 	inc	dptr
      000090 F0               [24]  211 	movx	@dptr,a
      000091 A8*00            [24]  212 	mov	r0,_bp
      000093 08               [12]  213 	inc	r0
      000094 86 82            [24]  214 	mov	dpl,@r0
      000096 08               [12]  215 	inc	r0
      000097 86 83            [24]  216 	mov	dph,@r0
      000099 08               [12]  217 	inc	r0
      00009A 86 F0            [24]  218 	mov	b,@r0
      00009C 08               [12]  219 	inc	r0
      00009D E6               [12]  220 	mov	a,@r0
      00009E 12r00r00         [24]  221 	lcall	___fslt
      0000A1 E5 82            [12]  222 	mov	a,dpl
      0000A3 60 0A            [24]  223 	jz	00102$
                                    224 ;	cotf.c:46: return -HUGE_VALF;
      0000A5 90 FF FF         [24]  225 	mov	dptr,#0xffff
      0000A8 75 F0 7F         [24]  226 	mov	b,#0x7f
      0000AB 74 FF            [12]  227 	mov	a,#0xff
      0000AD 80 26            [24]  228 	sjmp	00106$
      0000AF                        229 00102$:
                                    230 ;	cotf.c:48: return +HUGE_VALF;
      0000AF 90 FF FF         [24]  231 	mov	dptr,#0xffff
      0000B2 74 7F            [12]  232 	mov	a,#0x7f
      0000B4 F5 F0            [12]  233 	mov	b,a
      0000B6 80 1D            [24]  234 	sjmp	00106$
      0000B8                        235 00105$:
                                    236 ;	cotf.c:50: return tancotf(x, 1);
      0000B8 90r00r00         [24]  237 	mov	dptr,#_tancotf_PARM_2
      0000BB 74 01            [12]  238 	mov	a,#0x01
      0000BD F0               [24]  239 	movx	@dptr,a
      0000BE A8*00            [24]  240 	mov	r0,_bp
      0000C0 08               [12]  241 	inc	r0
      0000C1 86 82            [24]  242 	mov	dpl,@r0
      0000C3 08               [12]  243 	inc	r0
      0000C4 86 83            [24]  244 	mov	dph,@r0
      0000C6 08               [12]  245 	inc	r0
      0000C7 86 F0            [24]  246 	mov	b,@r0
      0000C9 08               [12]  247 	inc	r0
      0000CA E6               [12]  248 	mov	a,@r0
      0000CB 12r00r00         [24]  249 	lcall	_tancotf
      0000CE AC 82            [24]  250 	mov	r4,dpl
      0000D0 AD 83            [24]  251 	mov	r5,dph
      0000D2 AE F0            [24]  252 	mov	r6,b
      0000D4 FF               [12]  253 	mov	r7,a
      0000D5                        254 00106$:
      0000D5 85*00 81         [24]  255 	mov	sp,_bp
      0000D8 D0*00            [24]  256 	pop	_bp
      0000DA C5*00            [12]  257 	xch	a,_bpx
      0000DC F8               [12]  258 	mov	r0,a
      0000DD 18               [12]  259 	dec	r0
      0000DE E2               [24]  260 	movx	a,@r0
      0000DF C5*00            [12]  261 	xch	a,_bpx
      0000E1 88*00            [24]  262 	mov	_spx,r0
      0000E3 22               [24]  263 	ret
                                    264 	.area CSEG    (CODE)
                                    265 	.area CONST   (CODE)
                                    266 	.area XINIT   (CODE)
                                    267 	.area CABS    (ABS,CODE)
